---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2826
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Comment(
        Token(Comment, "# No arguments", (2,0)->(2,14)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (3,0)->(3,3)),
            ty: None,
            name: Raw(no_args),
            equal: Token(Equal, (3,12)->(3,13)),
            expr: Call(
                f: Identifier(Raw(bufnr)) arg: [],
            ),
            eol: Token(EndOfLine, (3,21)->(3,21)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (4,0)->(4,0)),
    ),
    Comment(
        Token(Comment, "# One argument", (5,0)->(5,14)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (6,0)->(6,3)),
            ty: None,
            name: Raw(some_args),
            equal: Token(Equal, (6,14)->(6,15)),
            expr: Call(
                f: Identifier(Raw(len)) arg: [
                    String(
                        DoubleQuote(
                            "hello world",
                        ),
                    ),
                ],
            ),
            eol: Token(EndOfLine, (6,34)->(6,34)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (7,0)->(7,0)),
    ),
    Comment(
        Token(Comment, "# More arguments", (8,0)->(8,16)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (9,0)->(9,3)),
            ty: None,
            name: Raw(matched),
            equal: Token(Equal, (9,12)->(9,13)),
            expr: Call(
                f: Identifier(Raw(match)) arg: [
                    Array(
                        ArrayLiteral {
                            open: Token(LeftBracket, (9,20)->(9,21)),
                            elements: [
                                String(
                                    DoubleQuote(
                                        "matched",
                                    ),
                                ),
                                String(
                                    DoubleQuote(
                                        "some_args",
                                    ),
                                ),
                            ],
                            close: Token(RightBracket, (9,43)->(9,44)),
                        },
                    ),
                    String(
                        DoubleQuote(
                            "a",
                        ),
                    ),
                    Number(
                        Number(1),
                    ),
                ],
            ),
            eol: Token(EndOfLine, (9,53)->(9,53)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (10,0)->(10,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (11,0)->(11,3)),
            ty: None,
            name: Raw(zed),
            equal: Token(Equal, (11,8)->(11,9)),
            expr: MethodCall(
                MethodCall {
                    left: DictAccess(
                        DictAccess {
                            container: Index(
                                IndexExpression {
                                    container: Identifier(
                                        Raw(symbolTable),
                                    ),
                                    open: Token(LeftBracket, (11,21)->(11,22)),
                                    index: Item(
                                        Identifier(
                                            Raw(mid),
                                        ),
                                    ),
                                    close: Token(RightBracket, (11,25)->(11,26)),
                                },
                            ),
                            dot: Token(Dot, (11,26)->(11,27)),
                            index: RawIdentifier {
                                name: "name",
                            },
                        },
                    ),
                    tok: Token(MethodArrow, (11,31)->(11,33)),
                    right: f: Identifier(Raw(len)) arg: [],
                },
            ),
            eol: Token(EndOfLine, (11,38)->(11,38)),
        },
    ),
    Eval(
        EvalCommand {
            eval: None,
            expr: Call(
                f: Identifier(Raw(prop_add)) arg: [
                    DictAccess(
                        DictAccess {
                            container: Index(
                                IndexExpression {
                                    container: Identifier(
                                        Raw(symbolTable),
                                    ),
                                    open: Token(LeftBracket, (12,20)->(12,21)),
                                    index: Item(
                                        Identifier(
                                            Raw(mid),
                                        ),
                                    ),
                                    close: Token(RightBracket, (12,24)->(12,25)),
                                },
                            ),
                            dot: Token(Dot, (12,25)->(12,26)),
                            index: RawIdentifier {
                                name: "outlineLine",
                            },
                        },
                    ),
                    Identifier(
                        Raw(col),
                    ),
                    Dict(
                        DictLiteral {
                            open: Token(LeftBrace, (13,10)->(13,11)),
                            elements: [
                                KeyValue {
                                    key: Literal(
                                        Literal {
                                            token: Token(Identifier, "bufnr", (13,11)->(13,16)),
                                        },
                                    ),
                                    colon: Token(SpacedColon, (13,16)->(13,18)),
                                    value: Identifier(
                                        Raw(bnr),
                                    ),
                                },
                                KeyValue {
                                    key: Literal(
                                        Literal {
                                            token: Token(Identifier, "type", (13,23)->(13,27)),
                                        },
                                    ),
                                    colon: Token(SpacedColon, (13,27)->(13,29)),
                                    value: String(
                                        SingleQuote(
                                            "LspOutlineHighlight",
                                        ),
                                    ),
                                },
                                KeyValue {
                                    key: Literal(
                                        Literal {
                                            token: Token(Identifier, "length", (14,10)->(14,16)),
                                        },
                                    ),
                                    colon: Token(SpacedColon, (14,16)->(14,18)),
                                    value: MethodCall(
                                        MethodCall {
                                            left: DictAccess(
                                                DictAccess {
                                                    container: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(symbolTable),
                                                            ),
                                                            open: Token(LeftBracket, (14,29)->(14,30)),
                                                            index: Item(
                                                                Identifier(
                                                                    Raw(mid),
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, (14,33)->(14,34)),
                                                        },
                                                    ),
                                                    dot: Token(Dot, (14,34)->(14,35)),
                                                    index: RawIdentifier {
                                                        name: "name",
                                                    },
                                                },
                                            ),
                                            tok: Token(MethodArrow, (14,39)->(14,41)),
                                            right: f: Identifier(Raw(len)) arg: [],
                                        },
                                    ),
                                },
                            ],
                            close: Token(RightBrace, (14,46)->(14,47)),
                        },
                    ),
                ],
            ),
            eol: Token(EndOfLine, (14,48)->(14,48)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (15,0)->(15,0)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (16,0)->(16,0)),
    ),
    Statement(
        Assign(
            AssignStatement {
                left: Identifier(
                    Raw(dirName),
                ),
                equals: Token(Equal, (17,8)->(17,9)),
                right: Call(
                    f: Identifier(Raw(input)) arg: [
                        String(
                            DoubleQuote(
                                "Add Workspace Folder: ",
                            ),
                        ),
                        Call(
                            f: Identifier(Raw(getcwd)) arg: [],
                        ),
                        String(
                            SingleQuote(
                                "dir",
                            ),
                        ),
                    ],
                ),
                eol: Token(EndOfLine, (17,58)->(17,58)),
            },
        ),
    ),
]
