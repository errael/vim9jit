---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2830
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (2,0)->(2,3)),
            name: Raw(Test_assignment_one),
            args: Signature {
                open: Token(LeftParen, (2,23)->(2,24)),
                params: [],
                close: Token(RightParen, (2,24)->(2,25)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (2,25)->(2,25)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, (3,2)->(3,5)),
                            ty: Some(
                                Bool,
                            ),
                            name: Raw(bool1),
                            equal: Token(Equal, (3,18)->(3,19)),
                            expr: Boolean(
                                VimBoolean {
                                    value: true,
                                },
                            ),
                            eol: Token(EndOfLine, (3,24)->(3,24)),
                        },
                    ),
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: Call(
                                f: Identifier(Raw(assert_equal)) arg: [
                                    Identifier(
                                        Scope(ScopedIdentifier { scope: VimVar, colon: Token(Colon, (4,16)->(4,17)), accessor: Raw(true) }),
                                    ),
                                    Identifier(
                                        Raw(bool1),
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, (4,29)->(4,29)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (5,0)->(5,6)),
            end_eol: Token(EndOfLine, (5,6)->(5,6)),
        },
    ),
]
