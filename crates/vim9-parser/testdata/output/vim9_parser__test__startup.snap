---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2851
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Comment(
        Token(Comment, "# Thanks to: https://github.com/dstein64/vim-startuptime for this test file", (2,0)->(2,75)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (3,0)->(3,0)),
    ),
    Comment(
        Token(Comment, "# (documented in autoload/startuptime.vim)", (4,0)->(4,42)),
    ),
    ExportCommand(
        ExportCommand {
            export: Token(Identifier, (5,0)->(5,6)),
            command: Def(
                DefCommand {
                    def: Token(Identifier, (5,7)->(5,10)),
                    name: Raw(Extract),
                    args: Signature {
                        open: Token(LeftParen, (5,18)->(5,19)),
                        params: [
                            Parameter {
                                name: Raw(file),
                                ty: Some(
                                    String,
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(options),
                                ty: Some(
                                    Dict {
                                        open: Token(AngleLeft, (7,19)->(7,20)),
                                        inner: Any,
                                        close: Token(AngleRight, (7,23)->(7,24)),
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(event_types),
                                ty: Some(
                                    Dict {
                                        open: Token(AngleLeft, (8,23)->(8,24)),
                                        inner: Number,
                                        close: Token(GreaterThan, (8,30)->(8,31)),
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, (9,4)->(9,5)),
                    },
                    ret: Some(
                        List {
                            open: Token(AngleLeft, (9,11)->(9,12)),
                            inner: List {
                                open: Token(AngleLeft, (9,16)->(9,17)),
                                inner: Dict {
                                    open: Token(AngleLeft, (9,21)->(9,22)),
                                    inner: Any,
                                    close: Token(AngleRight, (9,25)->(9,26)),
                                },
                                close: Token(AngleRight, (9,26)->(9,27)),
                            },
                            close: Token(GreaterThan, (9,27)->(9,28)),
                        },
                    ),
                    def_eol: Token(EndOfLine, (9,28)->(9,28)),
                    body: Body {
                        commands: [
                            Var(
                                VarCommand {
                                    var: Token(Identifier, (10,2)->(10,7)),
                                    ty: None,
                                    name: Raw(other_event_type),
                                    equal: Token(Equal, (10,25)->(10,26)),
                                    expr: Index(
                                        IndexExpression {
                                            container: Identifier(
                                                Raw(event_types),
                                            ),
                                            open: Token(LeftBracket, (10,38)->(10,39)),
                                            index: Item(
                                                String(
                                                    SingleQuote(
                                                        "other",
                                                    ),
                                                ),
                                            ),
                                            close: Token(RightBracket, (10,46)->(10,47)),
                                        },
                                    ),
                                    eol: Token(EndOfLine, (10,47)->(10,47)),
                                },
                            ),
                            Var(
                                VarCommand {
                                    var: Token(Identifier, (11,2)->(11,7)),
                                    ty: None,
                                    name: Raw(sourcing_event_type),
                                    equal: Token(Equal, (11,28)->(11,29)),
                                    expr: Index(
                                        IndexExpression {
                                            container: Identifier(
                                                Raw(event_types),
                                            ),
                                            open: Token(LeftBracket, (11,41)->(11,42)),
                                            index: Item(
                                                String(
                                                    SingleQuote(
                                                        "sourcing",
                                                    ),
                                                ),
                                            ),
                                            close: Token(RightBracket, (11,52)->(11,53)),
                                        },
                                    ),
                                    eol: Token(EndOfLine, (11,53)->(11,53)),
                                },
                            ),
                            Var(
                                VarCommand {
                                    var: Token(Identifier, (12,2)->(12,7)),
                                    ty: None,
                                    name: Raw(result),
                                    equal: Token(Equal, (12,15)->(12,16)),
                                    expr: Array(
                                        ArrayLiteral {
                                            open: Token(LeftBracket, (12,17)->(12,18)),
                                            elements: [],
                                            close: Token(RightBracket, (12,18)->(12,19)),
                                        },
                                    ),
                                    eol: Token(EndOfLine, (12,19)->(12,19)),
                                },
                            ),
                            Var(
                                VarCommand {
                                    var: Token(Identifier, (13,2)->(13,7)),
                                    ty: None,
                                    name: Raw(lines),
                                    equal: Token(Equal, (13,14)->(13,15)),
                                    expr: Call(
                                        f: Identifier(Raw(readfile)) arg: [
                                            Identifier(
                                                Raw(file),
                                            ),
                                        ],
                                    ),
                                    eol: Token(EndOfLine, (13,30)->(13,30)),
                                },
                            ),
                            Decl(
                                DeclCommand {
                                    var: Token(Identifier, (14,2)->(14,5)),
                                    name: Raw(occurrences),
                                    ty: Some(
                                        Dict {
                                            open: Token(AngleLeft, (14,23)->(14,24)),
                                            inner: Any,
                                            close: Token(GreaterThan, (14,27)->(14,28)),
                                        },
                                    ),
                                    eol: Token(EndOfLine, (14,28)->(14,28)),
                                },
                            ),
                            For(
                                ForCommand {
                                    for_: Token(Identifier, (15,2)->(15,5)),
                                    for_identifier: Raw(line),
                                    for_type: None,
                                    in_: Token(Identifier, (15,11)->(15,13)),
                                    for_expr: Identifier(
                                        Raw(lines),
                                    ),
                                    eol: Token(EndOfLine, (15,19)->(15,19)),
                                    body: Body {
                                        commands: [
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, (16,4)->(16,6)),
                                                    condition: Infix(
                                                        InfixExpression {
                                                            token: Token(Or, "||", (16,28)->(16,30)),
                                                            operator: Or,
                                                            left: Infix(
                                                                InfixExpression {
                                                                    token: Token(EqualTo, "==#", (16,22)->(16,25)),
                                                                    operator: EqualTo,
                                                                    left: Call(
                                                                        f: Identifier(Raw(strchars)) arg: [
                                                                            Identifier(
                                                                                Raw(line),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    right: Number(
                                                                        Number(0),
                                                                    ),
                                                                },
                                                            ),
                                                            right: Infix(
                                                                InfixExpression {
                                                                    token: Token(NotRegexpMatches, "!~#", (16,39)->(16,42)),
                                                                    operator: NotRegexpMatches,
                                                                    left: Index(
                                                                        IndexExpression {
                                                                            container: Identifier(
                                                                                Raw(line),
                                                                            ),
                                                                            open: Token(LeftBracket, (16,35)->(16,36)),
                                                                            index: Item(
                                                                                Number(
                                                                                    Number(0),
                                                                                ),
                                                                            ),
                                                                            close: Token(RightBracket, (16,37)->(16,38)),
                                                                        },
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "^\\d$",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, (16,49)->(16,49)),
                                                    body: Body {
                                                        commands: [
                                                            Continue(
                                                                ContinueCommand {
                                                                    cont: Token(Identifier, (17,6)->(17,14)),
                                                                    eol: Token(EndOfLine, (17,14)->(17,14)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: None,
                                                    endif_tok: Token(Identifier, (18,4)->(18,9)),
                                                    endif_eol: Token(EndOfLine, (18,9)->(18,9)),
                                                },
                                            ),
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, (19,4)->(19,6)),
                                                    condition: Infix(
                                                        InfixExpression {
                                                            token: Token(RegexpMatches, "=~#", (19,12)->(19,15)),
                                                            operator: RegexpMatches,
                                                            left: Identifier(
                                                                Raw(line),
                                                            ),
                                                            right: String(
                                                                SingleQuote(
                                                                    ": --- N\\=VIM STARTING ---$",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, (19,44)->(19,44)),
                                                    body: Body {
                                                        commands: [
                                                            Eval(
                                                                EvalCommand {
                                                                    eval: None,
                                                                    expr: Call(
                                                                        f: Identifier(Raw(add)) arg: [
                                                                            Identifier(
                                                                                Raw(result),
                                                                            ),
                                                                            Array(
                                                                                ArrayLiteral {
                                                                                    open: Token(LeftBracket, (20,18)->(20,19)),
                                                                                    elements: [],
                                                                                    close: Token(RightBracket, (20,19)->(20,20)),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    eol: Token(EndOfLine, (20,21)->(20,21)),
                                                                },
                                                            ),
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: Identifier(
                                                                            Raw(occurrences),
                                                                        ),
                                                                        equals: Token(Equal, (21,18)->(21,19)),
                                                                        right: Dict(
                                                                            DictLiteral {
                                                                                open: Token(LeftBrace, (21,20)->(21,21)),
                                                                                elements: [],
                                                                                close: Token(RightBrace, (21,21)->(21,22)),
                                                                            },
                                                                        ),
                                                                        eol: Token(EndOfLine, (21,22)->(21,22)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: None,
                                                    endif_tok: Token(Identifier, (22,4)->(22,9)),
                                                    endif_eol: Token(EndOfLine, (22,9)->(22,9)),
                                                },
                                            ),
                                            Var(
                                                VarCommand {
                                                    var: Token(Identifier, (23,4)->(23,9)),
                                                    ty: None,
                                                    name: Raw(idx),
                                                    equal: Token(Equal, (23,14)->(23,15)),
                                                    expr: Call(
                                                        f: Identifier(Raw(stridx)) arg: [
                                                            Identifier(
                                                                Raw(line),
                                                            ),
                                                            String(
                                                                SingleQuote(
                                                                    ":",
                                                                ),
                                                            ),
                                                        ],
                                                    ),
                                                    eol: Token(EndOfLine, (23,33)->(23,33)),
                                                },
                                            ),
                                            Var(
                                                VarCommand {
                                                    var: Token(Identifier, (24,4)->(24,9)),
                                                    ty: None,
                                                    name: Raw(times),
                                                    equal: Token(Equal, (24,16)->(24,17)),
                                                    expr: Call(
                                                        f: Identifier(Raw(split)) arg: [
                                                            Index(
                                                                IndexExpression {
                                                                    container: Identifier(
                                                                        Raw(line),
                                                                    ),
                                                                    open: Token(LeftBracket, (24,28)->(24,29)),
                                                                    index: Slice(
                                                                        VimSlice {
                                                                            start: None,
                                                                            colon: Token(SpacedColon, (24,29)->(24,31)),
                                                                            finish: Some(
                                                                                Infix(
                                                                                    InfixExpression {
                                                                                        token: Token(Minus, "-", (24,35)->(24,36)),
                                                                                        operator: Minus,
                                                                                        left: Identifier(
                                                                                            Raw(idx),
                                                                                        ),
                                                                                        right: Number(
                                                                                            Number(1),
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        },
                                                                    ),
                                                                    close: Token(RightBracket, (24,38)->(24,39)),
                                                                },
                                                            ),
                                                            String(
                                                                SingleQuote(
                                                                    "\\s\\+",
                                                                ),
                                                            ),
                                                        ],
                                                    ),
                                                    eol: Token(EndOfLine, (24,48)->(24,48)),
                                                },
                                            ),
                                            Var(
                                                VarCommand {
                                                    var: Token(Identifier, (25,4)->(25,9)),
                                                    ty: None,
                                                    name: Raw(event),
                                                    equal: Token(Equal, (25,16)->(25,17)),
                                                    expr: Index(
                                                        IndexExpression {
                                                            container: Identifier(
                                                                Raw(line),
                                                            ),
                                                            open: Token(LeftBracket, (25,22)->(25,23)),
                                                            index: Slice(
                                                                VimSlice {
                                                                    start: Some(
                                                                        Infix(
                                                                            InfixExpression {
                                                                                token: Token(Plus, "+", (25,27)->(25,28)),
                                                                                operator: Plus,
                                                                                left: Identifier(
                                                                                    Raw(idx),
                                                                                ),
                                                                                right: Number(
                                                                                    Number(2),
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ),
                                                                    colon: Token(SpacedColon, (25,31)->(25,32)),
                                                                    finish: None,
                                                                },
                                                            ),
                                                            close: Token(RightBracket, (25,32)->(25,33)),
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, (25,33)->(25,33)),
                                                },
                                            ),
                                            Var(
                                                VarCommand {
                                                    var: Token(Identifier, (26,4)->(26,7)),
                                                    ty: None,
                                                    name: Raw(type),
                                                    equal: Token(Equal, (26,13)->(26,14)),
                                                    expr: Identifier(
                                                        Raw(other_event_type),
                                                    ),
                                                    eol: Token(EndOfLine, (26,31)->(26,31)),
                                                },
                                            ),
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, (27,4)->(27,6)),
                                                    condition: Infix(
                                                        InfixExpression {
                                                            token: Token(EqualTo, "==#", (27,18)->(27,21)),
                                                            operator: EqualTo,
                                                            left: Call(
                                                                f: Identifier(Raw(len)) arg: [
                                                                    Identifier(
                                                                        Raw(times),
                                                                    ),
                                                                ],
                                                            ),
                                                            right: Number(
                                                                Number(3),
                                                            ),
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, (27,23)->(27,23)),
                                                    body: Body {
                                                        commands: [
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: Identifier(
                                                                            Raw(type),
                                                                        ),
                                                                        equals: Token(Equal, (28,11)->(28,12)),
                                                                        right: Identifier(
                                                                            Raw(sourcing_event_type),
                                                                        ),
                                                                        eol: Token(EndOfLine, (28,32)->(28,32)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: None,
                                                    endif_tok: Token(Identifier, (29,4)->(29,9)),
                                                    endif_eol: Token(EndOfLine, (29,9)->(29,9)),
                                                },
                                            ),
                                            Var(
                                                VarCommand {
                                                    var: Token(Identifier, (30,4)->(30,9)),
                                                    ty: None,
                                                    name: Raw(key),
                                                    equal: Token(Equal, (30,14)->(30,15)),
                                                    expr: Infix(
                                                        InfixExpression {
                                                            token: Token(StringConcat, "..", (30,28)->(30,30)),
                                                            operator: StringConcat,
                                                            left: Infix(
                                                                InfixExpression {
                                                                    token: Token(StringConcat, "..", (30,21)->(30,23)),
                                                                    operator: StringConcat,
                                                                    left: Identifier(
                                                                        Raw(type),
                                                                    ),
                                                                    right: String(
                                                                        SingleQuote(
                                                                            "-",
                                                                        ),
                                                                    ),
                                                                },
                                                            ),
                                                            right: Identifier(
                                                                Raw(event),
                                                            ),
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, (30,36)->(30,36)),
                                                },
                                            ),
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, (31,4)->(31,6)),
                                                    condition: Call(
                                                        f: Identifier(Raw(has_key)) arg: [
                                                            Identifier(
                                                                Raw(occurrences),
                                                            ),
                                                            Identifier(
                                                                Raw(key),
                                                            ),
                                                        ],
                                                    ),
                                                    if_eol: Token(EndOfLine, (31,32)->(31,32)),
                                                    body: Body {
                                                        commands: [
                                                            Statement(
                                                                Mutate(
                                                                    MutationStatement {
                                                                        left: Index(
                                                                            IndexExpression {
                                                                                container: Identifier(
                                                                                    Raw(occurrences),
                                                                                ),
                                                                                open: Token(LeftBracket, (32,17)->(32,18)),
                                                                                index: Item(
                                                                                    Identifier(
                                                                                        Raw(key),
                                                                                    ),
                                                                                ),
                                                                                close: Token(RightBracket, (32,21)->(32,22)),
                                                                            },
                                                                        ),
                                                                        modifier: Token(PlusEquals, "+=", (32,23)->(32,25)),
                                                                        right: Number(
                                                                            Number(1),
                                                                        ),
                                                                        eol: Token(EndOfLine, (32,27)->(32,27)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: Some(
                                                        ElseCommand {
                                                            else_tok: Token(Identifier, (33,4)->(33,8)),
                                                            else_eol: Token(EndOfLine, (33,8)->(33,8)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: Index(
                                                                                    IndexExpression {
                                                                                        container: Identifier(
                                                                                            Raw(occurrences),
                                                                                        ),
                                                                                        open: Token(LeftBracket, (34,17)->(34,18)),
                                                                                        index: Item(
                                                                                            Identifier(
                                                                                                Raw(key),
                                                                                            ),
                                                                                        ),
                                                                                        close: Token(RightBracket, (34,21)->(34,22)),
                                                                                    },
                                                                                ),
                                                                                equals: Token(Equal, (34,23)->(34,24)),
                                                                                right: Number(
                                                                                    Number(1),
                                                                                ),
                                                                                eol: Token(EndOfLine, (34,26)->(34,26)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    endif_tok: Token(Identifier, (35,4)->(35,9)),
                                                    endif_eol: Token(EndOfLine, (35,9)->(35,9)),
                                                },
                                            ),
                                            Comment(
                                                Token(Comment, "# 'finish' time is reported as 'clock' in --startuptime output.", (36,4)->(36,67)),
                                            ),
                                            Var(
                                                VarCommand {
                                                    var: Token(Identifier, (37,4)->(37,9)),
                                                    ty: None,
                                                    name: Raw(item),
                                                    equal: Token(Equal, (37,15)->(37,16)),
                                                    expr: Dict(
                                                        DictLiteral {
                                                            open: Token(LeftBrace, (37,17)->(37,18)),
                                                            elements: [
                                                                KeyValue {
                                                                    key: Literal(
                                                                        Literal {
                                                                            token: Token(SingleQuoteString, "event", (38,7)->(38,11)),
                                                                        },
                                                                    ),
                                                                    colon: Token(SpacedColon, (38,13)->(38,15)),
                                                                    value: Identifier(
                                                                        Raw(event),
                                                                    ),
                                                                },
                                                                KeyValue {
                                                                    key: Literal(
                                                                        Literal {
                                                                            token: Token(SingleQuoteString, "occurrence", (39,7)->(39,16)),
                                                                        },
                                                                    ),
                                                                    colon: Token(SpacedColon, (39,18)->(39,20)),
                                                                    value: Index(
                                                                        IndexExpression {
                                                                            container: Identifier(
                                                                                Raw(occurrences),
                                                                            ),
                                                                            open: Token(LeftBracket, (39,31)->(39,32)),
                                                                            index: Item(
                                                                                Identifier(
                                                                                    Raw(key),
                                                                                ),
                                                                            ),
                                                                            close: Token(RightBracket, (39,35)->(39,36)),
                                                                        },
                                                                    ),
                                                                },
                                                                KeyValue {
                                                                    key: Literal(
                                                                        Literal {
                                                                            token: Token(SingleQuoteString, "finish", (40,7)->(40,12)),
                                                                        },
                                                                    ),
                                                                    colon: Token(SpacedColon, (40,14)->(40,16)),
                                                                    value: Call(
                                                                        f: Identifier(Raw(str2float)) arg: [
                                                                            Index(
                                                                                IndexExpression {
                                                                                    container: Identifier(
                                                                                        Raw(times),
                                                                                    ),
                                                                                    open: Token(LeftBracket, (40,31)->(40,32)),
                                                                                    index: Item(
                                                                                        Number(
                                                                                            Number(0),
                                                                                        ),
                                                                                    ),
                                                                                    close: Token(RightBracket, (40,33)->(40,34)),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    ),
                                                                },
                                                                KeyValue {
                                                                    key: Literal(
                                                                        Literal {
                                                                            token: Token(SingleQuoteString, "type", (41,7)->(41,10)),
                                                                        },
                                                                    ),
                                                                    colon: Token(SpacedColon, (41,12)->(41,14)),
                                                                    value: Identifier(
                                                                        Raw(type),
                                                                    ),
                                                                },
                                                            ],
                                                            close: Token(RightBrace, (42,4)->(42,5)),
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, (42,5)->(42,5)),
                                                },
                                            ),
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, (43,4)->(43,6)),
                                                    condition: Infix(
                                                        InfixExpression {
                                                            token: Token(EqualTo, "==#", (43,12)->(43,15)),
                                                            operator: EqualTo,
                                                            left: Identifier(
                                                                Raw(type),
                                                            ),
                                                            right: Identifier(
                                                                Raw(sourcing_event_type),
                                                            ),
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, (43,35)->(43,35)),
                                                    body: Body {
                                                        commands: [
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: Index(
                                                                            IndexExpression {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                open: Token(LeftBracket, (44,10)->(44,11)),
                                                                                index: Item(
                                                                                    String(
                                                                                        SingleQuote(
                                                                                            "self+sourced",
                                                                                        ),
                                                                                    ),
                                                                                ),
                                                                                close: Token(RightBracket, (44,25)->(44,26)),
                                                                            },
                                                                        ),
                                                                        equals: Token(Equal, (44,27)->(44,28)),
                                                                        right: Call(
                                                                            f: Identifier(Raw(str2float)) arg: [
                                                                                Index(
                                                                                    IndexExpression {
                                                                                        container: Identifier(
                                                                                            Raw(times),
                                                                                        ),
                                                                                        open: Token(LeftBracket, (44,44)->(44,45)),
                                                                                        index: Item(
                                                                                            Number(
                                                                                                Number(1),
                                                                                            ),
                                                                                        ),
                                                                                        close: Token(RightBracket, (44,46)->(44,47)),
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        ),
                                                                        eol: Token(EndOfLine, (44,48)->(44,48)),
                                                                    },
                                                                ),
                                                            ),
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, (45,10)->(45,11)),
                                                                                index: RawIdentifier {
                                                                                    name: "self",
                                                                                },
                                                                            },
                                                                        ),
                                                                        equals: Token(Equal, (45,16)->(45,17)),
                                                                        right: Call(
                                                                            f: Identifier(Raw(str2float)) arg: [
                                                                                Index(
                                                                                    IndexExpression {
                                                                                        container: Identifier(
                                                                                            Raw(times),
                                                                                        ),
                                                                                        open: Token(LeftBracket, (45,33)->(45,34)),
                                                                                        index: Item(
                                                                                            Number(
                                                                                                Number(2),
                                                                                            ),
                                                                                        ),
                                                                                        close: Token(RightBracket, (45,35)->(45,36)),
                                                                                    },
                                                                                ),
                                                                            ],
                                                                        ),
                                                                        eol: Token(EndOfLine, (45,37)->(45,37)),
                                                                    },
                                                                ),
                                                            ),
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(item),
                                                                                ),
                                                                                dot: Token(Dot, (46,10)->(46,11)),
                                                                                index: RawIdentifier {
                                                                                    name: "start",
                                                                                },
                                                                            },
                                                                        ),
                                                                        equals: Token(Equal, (46,17)->(46,18)),
                                                                        right: Infix(
                                                                            InfixExpression {
                                                                                token: Token(Minus, "-", (46,31)->(46,32)),
                                                                                operator: Minus,
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(item),
                                                                                        ),
                                                                                        dot: Token(Dot, (46,23)->(46,24)),
                                                                                        index: RawIdentifier {
                                                                                            name: "finish",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                right: Index(
                                                                                    IndexExpression {
                                                                                        container: Identifier(
                                                                                            Raw(item),
                                                                                        ),
                                                                                        open: Token(LeftBracket, (46,37)->(46,38)),
                                                                                        index: Item(
                                                                                            String(
                                                                                                SingleQuote(
                                                                                                    "self+sourced",
                                                                                                ),
                                                                                            ),
                                                                                        ),
                                                                                        close: Token(RightBracket, (46,52)->(46,53)),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        eol: Token(EndOfLine, (46,53)->(46,53)),
                                                                    },
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: Some(
                                                        ElseCommand {
                                                            else_tok: Token(Identifier, (47,4)->(47,8)),
                                                            else_eol: Token(EndOfLine, (47,8)->(47,8)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(item),
                                                                                        ),
                                                                                        dot: Token(Dot, (48,10)->(48,11)),
                                                                                        index: RawIdentifier {
                                                                                            name: "elapsed",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                equals: Token(Equal, (48,19)->(48,20)),
                                                                                right: Call(
                                                                                    f: Identifier(Raw(str2float)) arg: [
                                                                                        Index(
                                                                                            IndexExpression {
                                                                                                container: Identifier(
                                                                                                    Raw(times),
                                                                                                ),
                                                                                                open: Token(LeftBracket, (48,36)->(48,37)),
                                                                                                index: Item(
                                                                                                    Number(
                                                                                                        Number(1),
                                                                                                    ),
                                                                                                ),
                                                                                                close: Token(RightBracket, (48,38)->(48,39)),
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                ),
                                                                                eol: Token(EndOfLine, (48,40)->(48,40)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(item),
                                                                                        ),
                                                                                        dot: Token(Dot, (49,10)->(49,11)),
                                                                                        index: RawIdentifier {
                                                                                            name: "start",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                equals: Token(Equal, (49,17)->(49,18)),
                                                                                right: Infix(
                                                                                    InfixExpression {
                                                                                        token: Token(Minus, "-", (49,31)->(49,32)),
                                                                                        operator: Minus,
                                                                                        left: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(item),
                                                                                                ),
                                                                                                dot: Token(Dot, (49,23)->(49,24)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "finish",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        right: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(item),
                                                                                                ),
                                                                                                dot: Token(Dot, (49,37)->(49,38)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "elapsed",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                eol: Token(EndOfLine, (49,45)->(49,45)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    endif_tok: Token(Identifier, (50,4)->(50,9)),
                                                    endif_eol: Token(EndOfLine, (50,9)->(50,9)),
                                                },
                                            ),
                                            Var(
                                                VarCommand {
                                                    var: Token(Identifier, (51,4)->(51,9)),
                                                    ty: None,
                                                    name: Raw(types),
                                                    equal: Token(Equal, (51,16)->(51,17)),
                                                    expr: Array(
                                                        ArrayLiteral {
                                                            open: Token(LeftBracket, (51,18)->(51,19)),
                                                            elements: [],
                                                            close: Token(RightBracket, (51,19)->(51,20)),
                                                        },
                                                    ),
                                                    eol: Token(EndOfLine, (51,20)->(51,20)),
                                                },
                                            ),
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, (52,4)->(52,6)),
                                                    condition: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(options),
                                                            ),
                                                            dot: Token(Dot, (52,14)->(52,15)),
                                                            index: RawIdentifier {
                                                                name: "sourcing_events",
                                                            },
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, (52,30)->(52,30)),
                                                    body: Body {
                                                        commands: [
                                                            Eval(
                                                                EvalCommand {
                                                                    eval: None,
                                                                    expr: Call(
                                                                        f: Identifier(Raw(add)) arg: [
                                                                            Identifier(
                                                                                Raw(types),
                                                                            ),
                                                                            Identifier(
                                                                                Raw(sourcing_event_type),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    eol: Token(EndOfLine, (53,37)->(53,37)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: None,
                                                    endif_tok: Token(Identifier, (54,4)->(54,9)),
                                                    endif_eol: Token(EndOfLine, (54,9)->(54,9)),
                                                },
                                            ),
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, (55,4)->(55,6)),
                                                    condition: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(options),
                                                            ),
                                                            dot: Token(Dot, (55,14)->(55,15)),
                                                            index: RawIdentifier {
                                                                name: "other_events",
                                                            },
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, (55,27)->(55,27)),
                                                    body: Body {
                                                        commands: [
                                                            Eval(
                                                                EvalCommand {
                                                                    eval: None,
                                                                    expr: Call(
                                                                        f: Identifier(Raw(add)) arg: [
                                                                            Identifier(
                                                                                Raw(types),
                                                                            ),
                                                                            Identifier(
                                                                                Raw(other_event_type),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    eol: Token(EndOfLine, (56,34)->(56,34)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: None,
                                                    endif_tok: Token(Identifier, (57,4)->(57,9)),
                                                    endif_eol: Token(EndOfLine, (57,9)->(57,9)),
                                                },
                                            ),
                                            If(
                                                IfCommand {
                                                    if_tok: Token(Identifier, (58,4)->(58,6)),
                                                    condition: Infix(
                                                        InfixExpression {
                                                            token: Token(NotEqualTo, "!=#", (58,31)->(58,34)),
                                                            operator: NotEqualTo,
                                                            left: Call(
                                                                f: Identifier(Raw(index)) arg: [
                                                                    Identifier(
                                                                        Raw(types),
                                                                    ),
                                                                    DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(item),
                                                                            ),
                                                                            dot: Token(Dot, (58,24)->(58,25)),
                                                                            index: RawIdentifier {
                                                                                name: "type",
                                                                            },
                                                                        },
                                                                    ),
                                                                ],
                                                            ),
                                                            right: Prefix(
                                                                PrefixExpression {
                                                                    token: Token(Minus, (58,35)->(58,36)),
                                                                    operator: Minus,
                                                                    right: Number(
                                                                        Number(1),
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    if_eol: Token(EndOfLine, (58,37)->(58,37)),
                                                    body: Body {
                                                        commands: [
                                                            Eval(
                                                                EvalCommand {
                                                                    eval: None,
                                                                    expr: Call(
                                                                        f: Identifier(Raw(add)) arg: [
                                                                            Index(
                                                                                IndexExpression {
                                                                                    container: Identifier(
                                                                                        Raw(result),
                                                                                    ),
                                                                                    open: Token(LeftBracket, (59,16)->(59,17)),
                                                                                    index: Item(
                                                                                        Prefix(
                                                                                            PrefixExpression {
                                                                                                token: Token(Minus, (59,17)->(59,18)),
                                                                                                operator: Minus,
                                                                                                right: Number(
                                                                                                    Number(1),
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    close: Token(RightBracket, (59,19)->(59,20)),
                                                                                },
                                                                            ),
                                                                            Identifier(
                                                                                Raw(item),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    eol: Token(EndOfLine, (59,27)->(59,27)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    elseifs: [],
                                                    else_command: None,
                                                    endif_tok: Token(Identifier, (60,4)->(60,9)),
                                                    endif_eol: Token(EndOfLine, (60,9)->(60,9)),
                                                },
                                            ),
                                        ],
                                    },
                                    endfor_: Token(Identifier, (61,2)->(61,8)),
                                    endfor_eol: Token(EndOfLine, (61,8)->(61,8)),
                                },
                            ),
                            Return(
                                ReturnCommand {
                                    ret: Token(Identifier, (62,2)->(62,8)),
                                    expr: Some(
                                        Identifier(
                                            Raw(result),
                                        ),
                                    ),
                                    eol: Token(EndOfLine, (62,15)->(62,15)),
                                },
                            ),
                        ],
                    },
                    enddef: Token(Identifier, (63,0)->(63,6)),
                    end_eol: Token(EndOfLine, (63,6)->(63,6)),
                },
            ),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (64,0)->(64,0)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (65,0)->(65,3)),
            name: Raw(Mean),
            args: Signature {
                open: Token(LeftParen, (65,8)->(65,9)),
                params: [
                    Parameter {
                        name: Raw(numbers),
                        ty: Some(
                            List {
                                open: Token(AngleLeft, (65,22)->(65,23)),
                                inner: Float,
                                close: Token(AngleRight, (65,28)->(65,29)),
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, (65,29)->(65,30)),
            },
            ret: Some(
                Float,
            ),
            def_eol: Token(EndOfLine, (65,37)->(65,37)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, (66,2)->(66,4)),
                            condition: Infix(
                                InfixExpression {
                                    token: Token(EqualTo, "==#", (66,18)->(66,21)),
                                    operator: EqualTo,
                                    left: Call(
                                        f: Identifier(Raw(len)) arg: [
                                            Identifier(
                                                Raw(numbers),
                                            ),
                                        ],
                                    ),
                                    right: Number(
                                        Number(0),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, (66,23)->(66,23)),
                            body: Body {
                                commands: [
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "    throw  vim-startuptime: cannot take mean of empty list",
                                            eol: Token(EndOfLine, (67,59)->(67,59)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, (68,2)->(68,7)),
                            endif_eol: Token(EndOfLine, (68,7)->(68,7)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, (69,2)->(69,5)),
                            ty: None,
                            name: Raw(result),
                            equal: Token(Equal, (69,13)->(69,14)),
                            expr: Number(
                                Number(0.0),
                            ),
                            eol: Token(EndOfLine, (69,18)->(69,18)),
                        },
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, (70,2)->(70,5)),
                            for_identifier: Raw(number),
                            for_type: None,
                            in_: Token(Identifier, (70,13)->(70,15)),
                            for_expr: Identifier(
                                Raw(numbers),
                            ),
                            eol: Token(EndOfLine, (70,23)->(70,23)),
                            body: Body {
                                commands: [
                                    Statement(
                                        Mutate(
                                            MutationStatement {
                                                left: Identifier(
                                                    Raw(result),
                                                ),
                                                modifier: Token(PlusEquals, "+=", (71,11)->(71,13)),
                                                right: Identifier(
                                                    Raw(number),
                                                ),
                                                eol: Token(EndOfLine, (71,20)->(71,20)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, (72,2)->(72,8)),
                            endfor_eol: Token(EndOfLine, (72,8)->(72,8)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: Identifier(
                                    Raw(result),
                                ),
                                equals: Token(Equal, (73,9)->(73,10)),
                                right: Infix(
                                    InfixExpression {
                                        token: Token(Div, "/", (73,18)->(73,19)),
                                        operator: Divide,
                                        left: Identifier(
                                            Raw(result),
                                        ),
                                        right: Call(
                                            f: Identifier(Raw(len)) arg: [
                                                Identifier(
                                                    Raw(numbers),
                                                ),
                                            ],
                                        ),
                                    },
                                ),
                                eol: Token(EndOfLine, (73,32)->(73,32)),
                            },
                        ),
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, (74,2)->(74,8)),
                            expr: Some(
                                Identifier(
                                    Raw(result),
                                ),
                            ),
                            eol: Token(EndOfLine, (74,15)->(74,15)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (75,0)->(75,6)),
            end_eol: Token(EndOfLine, (75,6)->(75,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (76,0)->(76,0)),
    ),
    Comment(
        Token(Comment, "# (documented in autoload/startuptime.vim)", (77,0)->(77,42)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (78,0)->(78,3)),
            name: Raw(StandardDeviation),
            args: Signature {
                open: Token(LeftParen, (78,21)->(78,22)),
                params: [
                    Parameter {
                        name: Raw(numbers),
                        ty: Some(
                            List {
                                open: Token(AngleLeft, (79,19)->(79,20)),
                                inner: Float,
                                close: Token(AngleRight, (79,25)->(79,26)),
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(ddof),
                        ty: Some(
                            Number,
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(mean),
                        ty: Some(
                            Float,
                        ),
                        equal: Some(
                            Token(Equal, (81,18)->(81,19)),
                        ),
                        default_val: Some(
                            Call(
                                f: Identifier(Raw(str2float)) arg: [
                                    String(
                                        SingleQuote(
                                            "nan",
                                        ),
                                    ),
                                ],
                            ),
                        ),
                    },
                ],
                close: Token(RightParen, (82,4)->(82,5)),
            },
            ret: Some(
                Float,
            ),
            def_eol: Token(EndOfLine, (82,12)->(82,12)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, (83,2)->(83,7)),
                            ty: None,
                            name: Raw(mean2),
                            equal: Token(Equal, (83,14)->(83,15)),
                            expr: Ternary(
                                Ternary {
                                    cond: Call(
                                        f: Identifier(Raw(isnan)) arg: [
                                            Identifier(
                                                Raw(mean),
                                            ),
                                        ],
                                    ),
                                    question: Token(QuestionMark, (83,28)->(83,29)),
                                    if_true: Call(
                                        f: Identifier(Raw(Mean)) arg: [
                                            Identifier(
                                                Raw(numbers),
                                            ),
                                        ],
                                    ),
                                    colon: Token(SpacedColon, (83,44)->(83,46)),
                                    if_false: Identifier(
                                        Raw(mean),
                                    ),
                                },
                            ),
                            eol: Token(EndOfLine, (83,50)->(83,50)),
                        },
                    ),
                    Var(
                        VarCommand {
                            var: Token(Identifier, (84,2)->(84,5)),
                            ty: None,
                            name: Raw(result),
                            equal: Token(Equal, (84,13)->(84,14)),
                            expr: Number(
                                Number(0.0),
                            ),
                            eol: Token(EndOfLine, (84,18)->(84,18)),
                        },
                    ),
                    For(
                        ForCommand {
                            for_: Token(Identifier, (85,2)->(85,5)),
                            for_identifier: Raw(number),
                            for_type: None,
                            in_: Token(Identifier, (85,13)->(85,15)),
                            for_expr: Identifier(
                                Raw(numbers),
                            ),
                            eol: Token(EndOfLine, (85,23)->(85,23)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, (86,4)->(86,9)),
                                            ty: None,
                                            name: Raw(diff),
                                            equal: Token(Equal, (86,15)->(86,16)),
                                            expr: Infix(
                                                InfixExpression {
                                                    token: Token(Minus, "-", (86,23)->(86,24)),
                                                    operator: Minus,
                                                    left: Identifier(
                                                        Raw(mean2),
                                                    ),
                                                    right: Identifier(
                                                        Raw(number),
                                                    ),
                                                },
                                            ),
                                            eol: Token(EndOfLine, (86,31)->(86,31)),
                                        },
                                    ),
                                    Statement(
                                        Mutate(
                                            MutationStatement {
                                                left: Identifier(
                                                    Raw(result),
                                                ),
                                                modifier: Token(PlusEquals, "+=", (87,11)->(87,13)),
                                                right: Infix(
                                                    InfixExpression {
                                                        token: Token(Mul, "*", (87,19)->(87,20)),
                                                        operator: Multiply,
                                                        left: Identifier(
                                                            Raw(diff),
                                                        ),
                                                        right: Identifier(
                                                            Raw(diff),
                                                        ),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, (87,25)->(87,25)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            endfor_: Token(Identifier, (88,2)->(88,8)),
                            endfor_eol: Token(EndOfLine, (88,8)->(88,8)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: Identifier(
                                    Raw(result),
                                ),
                                equals: Token(Equal, (89,9)->(89,10)),
                                right: Infix(
                                    InfixExpression {
                                        token: Token(Div, "/", (89,18)->(89,19)),
                                        operator: Divide,
                                        left: Identifier(
                                            Raw(result),
                                        ),
                                        right: Grouped(
                                            GroupedExpression {
                                                open: Token(LeftParen, (89,20)->(89,21)),
                                                expr: Infix(
                                                    InfixExpression {
                                                        token: Token(Minus, "-", (89,34)->(89,35)),
                                                        operator: Minus,
                                                        left: Call(
                                                            f: Identifier(Raw(len)) arg: [
                                                                Identifier(
                                                                    Raw(numbers),
                                                                ),
                                                            ],
                                                        ),
                                                        right: Identifier(
                                                            Raw(ddof),
                                                        ),
                                                    },
                                                ),
                                                close: Token(RightParen, (89,40)->(89,41)),
                                            },
                                        ),
                                    },
                                ),
                                eol: Token(EndOfLine, (89,41)->(89,41)),
                            },
                        ),
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: Identifier(
                                    Raw(result),
                                ),
                                equals: Token(Equal, (90,9)->(90,10)),
                                right: Call(
                                    f: Identifier(Raw(sqrt)) arg: [
                                        Identifier(
                                            Raw(result),
                                        ),
                                    ],
                                ),
                                eol: Token(EndOfLine, (90,23)->(90,23)),
                            },
                        ),
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, (91,2)->(91,8)),
                            expr: Some(
                                Identifier(
                                    Raw(result),
                                ),
                            ),
                            eol: Token(EndOfLine, (91,15)->(91,15)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (92,0)->(92,6)),
            end_eol: Token(EndOfLine, (92,6)->(92,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (93,0)->(93,0)),
    ),
    Comment(
        Token(Comment, "# (documented in autoload/startuptime.vim)", (94,0)->(94,42)),
    ),
    ExportCommand(
        ExportCommand {
            export: Token(Identifier, (95,0)->(95,6)),
            command: Def(
                DefCommand {
                    def: Token(Identifier, (95,7)->(95,10)),
                    name: Raw(Consolidate),
                    args: Signature {
                        open: Token(LeftParen, (95,22)->(95,23)),
                        params: [
                            Parameter {
                                name: Raw(items),
                                ty: Some(
                                    List {
                                        open: Token(AngleLeft, (96,15)->(96,16)),
                                        inner: List {
                                            open: Token(AngleLeft, (96,20)->(96,21)),
                                            inner: Dict {
                                                open: Token(AngleLeft, (96,25)->(96,26)),
                                                inner: Any,
                                                close: Token(AngleRight, (96,29)->(96,30)),
                                            },
                                            close: Token(AngleRight, (96,30)->(96,31)),
                                        },
                                        close: Token(AngleRight, (96,31)->(96,32)),
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                            Parameter {
                                name: Raw(tfields),
                                ty: Some(
                                    List {
                                        open: Token(AngleLeft, (96,47)->(96,48)),
                                        inner: String,
                                        close: Token(AngleRight, (96,54)->(96,55)),
                                    },
                                ),
                                equal: None,
                                default_val: None,
                            },
                        ],
                        close: Token(RightParen, (96,55)->(96,56)),
                    },
                    ret: Some(
                        List {
                            open: Token(AngleLeft, (96,62)->(96,63)),
                            inner: Dict {
                                open: Token(AngleLeft, (96,67)->(96,68)),
                                inner: Any,
                                close: Token(AngleRight, (96,71)->(96,72)),
                            },
                            close: Token(GreaterThan, (96,72)->(96,73)),
                        },
                    ),
                    def_eol: Token(EndOfLine, (96,73)->(96,73)),
                    body: Body {
                        commands: [
                            Var(
                                VarCommand {
                                    var: Token(Identifier, (97,2)->(97,7)),
                                    ty: None,
                                    name: Raw(lookup),
                                    equal: Token(Equal, (97,15)->(97,16)),
                                    expr: Dict(
                                        DictLiteral {
                                            open: Token(LeftBrace, (97,17)->(97,18)),
                                            elements: [],
                                            close: Token(RightBrace, (97,18)->(97,19)),
                                        },
                                    ),
                                    eol: Token(EndOfLine, (97,19)->(97,19)),
                                },
                            ),
                            For(
                                ForCommand {
                                    for_: Token(Identifier, (98,2)->(98,5)),
                                    for_identifier: Raw(try),
                                    for_type: None,
                                    in_: Token(Identifier, (98,10)->(98,12)),
                                    for_expr: Identifier(
                                        Raw(items),
                                    ),
                                    eol: Token(EndOfLine, (98,18)->(98,18)),
                                    body: Body {
                                        commands: [
                                            For(
                                                ForCommand {
                                                    for_: Token(Identifier, (99,4)->(99,7)),
                                                    for_identifier: Raw(item),
                                                    for_type: None,
                                                    in_: Token(Identifier, (99,13)->(99,15)),
                                                    for_expr: Identifier(
                                                        Raw(try),
                                                    ),
                                                    eol: Token(EndOfLine, (99,19)->(99,19)),
                                                    body: Body {
                                                        commands: [
                                                            Var(
                                                                VarCommand {
                                                                    var: Token(Identifier, (100,6)->(100,11)),
                                                                    ty: None,
                                                                    name: Raw(key),
                                                                    equal: Token(Equal, (100,16)->(100,17)),
                                                                    expr: Infix(
                                                                        InfixExpression {
                                                                            token: Token(StringConcat, "..", (100,61)->(100,63)),
                                                                            operator: StringConcat,
                                                                            left: Infix(
                                                                                InfixExpression {
                                                                                    token: Token(StringConcat, "..", (100,54)->(100,56)),
                                                                                    operator: StringConcat,
                                                                                    left: Infix(
                                                                                        InfixExpression {
                                                                                            token: Token(StringConcat, "..", (100,35)->(100,37)),
                                                                                            operator: StringConcat,
                                                                                            left: Infix(
                                                                                                InfixExpression {
                                                                                                    token: Token(StringConcat, "..", (100,28)->(100,30)),
                                                                                                    operator: StringConcat,
                                                                                                    left: DictAccess(
                                                                                                        DictAccess {
                                                                                                            container: Identifier(
                                                                                                                Raw(item),
                                                                                                            ),
                                                                                                            dot: Token(Dot, (100,22)->(100,23)),
                                                                                                            index: RawIdentifier {
                                                                                                                name: "type",
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                    right: String(
                                                                                                        SingleQuote(
                                                                                                            "-",
                                                                                                        ),
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                            right: DictAccess(
                                                                                                DictAccess {
                                                                                                    container: Identifier(
                                                                                                        Raw(item),
                                                                                                    ),
                                                                                                    dot: Token(Dot, (100,42)->(100,43)),
                                                                                                    index: RawIdentifier {
                                                                                                        name: "occurrence",
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    right: String(
                                                                                        SingleQuote(
                                                                                            "-",
                                                                                        ),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            right: DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(item),
                                                                                    ),
                                                                                    dot: Token(Dot, (100,68)->(100,69)),
                                                                                    index: RawIdentifier {
                                                                                        name: "event",
                                                                                    },
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                    eol: Token(EndOfLine, (100,74)->(100,74)),
                                                                },
                                                            ),
                                                            If(
                                                                IfCommand {
                                                                    if_tok: Token(Identifier, (101,6)->(101,8)),
                                                                    condition: Call(
                                                                        f: Identifier(Raw(has_key)) arg: [
                                                                            Identifier(
                                                                                Raw(lookup),
                                                                            ),
                                                                            Identifier(
                                                                                Raw(key),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    if_eol: Token(EndOfLine, (101,29)->(101,29)),
                                                                    body: Body {
                                                                        commands: [
                                                                            For(
                                                                                ForCommand {
                                                                                    for_: Token(Identifier, (102,8)->(102,11)),
                                                                                    for_identifier: Raw(tfield),
                                                                                    for_type: None,
                                                                                    in_: Token(Identifier, (102,19)->(102,21)),
                                                                                    for_expr: Identifier(
                                                                                        Raw(tfields),
                                                                                    ),
                                                                                    eol: Token(EndOfLine, (102,29)->(102,29)),
                                                                                    body: Body {
                                                                                        commands: [
                                                                                            If(
                                                                                                IfCommand {
                                                                                                    if_tok: Token(Identifier, (103,10)->(103,12)),
                                                                                                    condition: Call(
                                                                                                        f: Identifier(Raw(has_key)) arg: [
                                                                                                            Identifier(
                                                                                                                Raw(item),
                                                                                                            ),
                                                                                                            Identifier(
                                                                                                                Raw(tfield),
                                                                                                            ),
                                                                                                        ],
                                                                                                    ),
                                                                                                    if_eol: Token(EndOfLine, (103,34)->(103,34)),
                                                                                                    body: Body {
                                                                                                        commands: [
                                                                                                            Eval(
                                                                                                                EvalCommand {
                                                                                                                    eval: None,
                                                                                                                    expr: Call(
                                                                                                                        f: Identifier(Raw(add)) arg: [
                                                                                                                            Index(
                                                                                                                                IndexExpression {
                                                                                                                                    container: Index(
                                                                                                                                        IndexExpression {
                                                                                                                                            container: Identifier(
                                                                                                                                                Raw(lookup),
                                                                                                                                            ),
                                                                                                                                            open: Token(LeftBracket, (104,22)->(104,23)),
                                                                                                                                            index: Item(
                                                                                                                                                Identifier(
                                                                                                                                                    Raw(key),
                                                                                                                                                ),
                                                                                                                                            ),
                                                                                                                                            close: Token(RightBracket, (104,26)->(104,27)),
                                                                                                                                        },
                                                                                                                                    ),
                                                                                                                                    open: Token(LeftBracket, (104,27)->(104,28)),
                                                                                                                                    index: Item(
                                                                                                                                        Identifier(
                                                                                                                                            Raw(tfield),
                                                                                                                                        ),
                                                                                                                                    ),
                                                                                                                                    close: Token(RightBracket, (104,34)->(104,35)),
                                                                                                                                },
                                                                                                                            ),
                                                                                                                            Index(
                                                                                                                                IndexExpression {
                                                                                                                                    container: Identifier(
                                                                                                                                        Raw(item),
                                                                                                                                    ),
                                                                                                                                    open: Token(LeftBracket, (104,41)->(104,42)),
                                                                                                                                    index: Item(
                                                                                                                                        Identifier(
                                                                                                                                            Raw(tfield),
                                                                                                                                        ),
                                                                                                                                    ),
                                                                                                                                    close: Token(RightBracket, (104,48)->(104,49)),
                                                                                                                                },
                                                                                                                            ),
                                                                                                                        ],
                                                                                                                    ),
                                                                                                                    eol: Token(EndOfLine, (104,50)->(104,50)),
                                                                                                                },
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                    elseifs: [],
                                                                                                    else_command: None,
                                                                                                    endif_tok: Token(Identifier, (105,10)->(105,15)),
                                                                                                    endif_eol: Token(EndOfLine, (105,15)->(105,15)),
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                    endfor_: Token(Identifier, (106,8)->(106,14)),
                                                                                    endfor_eol: Token(EndOfLine, (106,14)->(106,14)),
                                                                                },
                                                                            ),
                                                                            Statement(
                                                                                Mutate(
                                                                                    MutationStatement {
                                                                                        left: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Index(
                                                                                                    IndexExpression {
                                                                                                        container: Identifier(
                                                                                                            Raw(lookup),
                                                                                                        ),
                                                                                                        open: Token(LeftBracket, (107,14)->(107,15)),
                                                                                                        index: Item(
                                                                                                            Identifier(
                                                                                                                Raw(key),
                                                                                                            ),
                                                                                                        ),
                                                                                                        close: Token(RightBracket, (107,18)->(107,19)),
                                                                                                    },
                                                                                                ),
                                                                                                dot: Token(Dot, (107,19)->(107,20)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "tries",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        modifier: Token(PlusEquals, "+=", (107,26)->(107,28)),
                                                                                        right: Number(
                                                                                            Number(1),
                                                                                        ),
                                                                                        eol: Token(EndOfLine, (107,30)->(107,30)),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                    elseifs: [],
                                                                    else_command: Some(
                                                                        ElseCommand {
                                                                            else_tok: Token(Identifier, (108,6)->(108,10)),
                                                                            else_eol: Token(EndOfLine, (108,10)->(108,10)),
                                                                            body: Body {
                                                                                commands: [
                                                                                    Statement(
                                                                                        Assign(
                                                                                            AssignStatement {
                                                                                                left: Index(
                                                                                                    IndexExpression {
                                                                                                        container: Identifier(
                                                                                                            Raw(lookup),
                                                                                                        ),
                                                                                                        open: Token(LeftBracket, (109,14)->(109,15)),
                                                                                                        index: Item(
                                                                                                            Identifier(
                                                                                                                Raw(key),
                                                                                                            ),
                                                                                                        ),
                                                                                                        close: Token(RightBracket, (109,18)->(109,19)),
                                                                                                    },
                                                                                                ),
                                                                                                equals: Token(Equal, (109,20)->(109,21)),
                                                                                                right: Call(
                                                                                                    f: Identifier(Raw(deepcopy)) arg: [
                                                                                                        Identifier(
                                                                                                            Raw(item),
                                                                                                        ),
                                                                                                    ],
                                                                                                ),
                                                                                                eol: Token(EndOfLine, (109,36)->(109,36)),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                    For(
                                                                                        ForCommand {
                                                                                            for_: Token(Identifier, (110,8)->(110,11)),
                                                                                            for_identifier: Raw(tfield),
                                                                                            for_type: None,
                                                                                            in_: Token(Identifier, (110,19)->(110,21)),
                                                                                            for_expr: Identifier(
                                                                                                Raw(tfields),
                                                                                            ),
                                                                                            eol: Token(EndOfLine, (110,29)->(110,29)),
                                                                                            body: Body {
                                                                                                commands: [
                                                                                                    If(
                                                                                                        IfCommand {
                                                                                                            if_tok: Token(Identifier, (111,10)->(111,12)),
                                                                                                            condition: Call(
                                                                                                                f: Identifier(Raw(has_key)) arg: [
                                                                                                                    Index(
                                                                                                                        IndexExpression {
                                                                                                                            container: Identifier(
                                                                                                                                Raw(lookup),
                                                                                                                            ),
                                                                                                                            open: Token(LeftBracket, (111,27)->(111,28)),
                                                                                                                            index: Item(
                                                                                                                                Identifier(
                                                                                                                                    Raw(key),
                                                                                                                                ),
                                                                                                                            ),
                                                                                                                            close: Token(RightBracket, (111,31)->(111,32)),
                                                                                                                        },
                                                                                                                    ),
                                                                                                                    Identifier(
                                                                                                                        Raw(tfield),
                                                                                                                    ),
                                                                                                                ],
                                                                                                            ),
                                                                                                            if_eol: Token(EndOfLine, (111,41)->(111,41)),
                                                                                                            body: Body {
                                                                                                                commands: [
                                                                                                                    Comment(
                                                                                                                        Token(Comment, "# Put item in a list.", (112,12)->(112,33)),
                                                                                                                    ),
                                                                                                                    Statement(
                                                                                                                        Assign(
                                                                                                                            AssignStatement {
                                                                                                                                left: Index(
                                                                                                                                    IndexExpression {
                                                                                                                                        container: Index(
                                                                                                                                            IndexExpression {
                                                                                                                                                container: Identifier(
                                                                                                                                                    Raw(lookup),
                                                                                                                                                ),
                                                                                                                                                open: Token(LeftBracket, (113,18)->(113,19)),
                                                                                                                                                index: Item(
                                                                                                                                                    Identifier(
                                                                                                                                                        Raw(key),
                                                                                                                                                    ),
                                                                                                                                                ),
                                                                                                                                                close: Token(RightBracket, (113,22)->(113,23)),
                                                                                                                                            },
                                                                                                                                        ),
                                                                                                                                        open: Token(LeftBracket, (113,23)->(113,24)),
                                                                                                                                        index: Item(
                                                                                                                                            Identifier(
                                                                                                                                                Raw(tfield),
                                                                                                                                            ),
                                                                                                                                        ),
                                                                                                                                        close: Token(RightBracket, (113,30)->(113,31)),
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                                equals: Token(Equal, (113,32)->(113,33)),
                                                                                                                                right: Array(
                                                                                                                                    ArrayLiteral {
                                                                                                                                        open: Token(LeftBracket, (113,34)->(113,35)),
                                                                                                                                        elements: [
                                                                                                                                            Index(
                                                                                                                                                IndexExpression {
                                                                                                                                                    container: Index(
                                                                                                                                                        IndexExpression {
                                                                                                                                                            container: Identifier(
                                                                                                                                                                Raw(lookup),
                                                                                                                                                            ),
                                                                                                                                                            open: Token(LeftBracket, (113,41)->(113,42)),
                                                                                                                                                            index: Item(
                                                                                                                                                                Identifier(
                                                                                                                                                                    Raw(key),
                                                                                                                                                                ),
                                                                                                                                                            ),
                                                                                                                                                            close: Token(RightBracket, (113,45)->(113,46)),
                                                                                                                                                        },
                                                                                                                                                    ),
                                                                                                                                                    open: Token(LeftBracket, (113,46)->(113,47)),
                                                                                                                                                    index: Item(
                                                                                                                                                        Identifier(
                                                                                                                                                            Raw(tfield),
                                                                                                                                                        ),
                                                                                                                                                    ),
                                                                                                                                                    close: Token(RightBracket, (113,53)->(113,54)),
                                                                                                                                                },
                                                                                                                                            ),
                                                                                                                                        ],
                                                                                                                                        close: Token(RightBracket, (113,54)->(113,55)),
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                                eol: Token(EndOfLine, (113,55)->(113,55)),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                    ),
                                                                                                                ],
                                                                                                            },
                                                                                                            elseifs: [],
                                                                                                            else_command: None,
                                                                                                            endif_tok: Token(Identifier, (114,10)->(114,15)),
                                                                                                            endif_eol: Token(EndOfLine, (114,15)->(114,15)),
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                            endfor_: Token(Identifier, (115,8)->(115,14)),
                                                                                            endfor_eol: Token(EndOfLine, (115,14)->(115,14)),
                                                                                        },
                                                                                    ),
                                                                                    Statement(
                                                                                        Assign(
                                                                                            AssignStatement {
                                                                                                left: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: Index(
                                                                                                            IndexExpression {
                                                                                                                container: Identifier(
                                                                                                                    Raw(lookup),
                                                                                                                ),
                                                                                                                open: Token(LeftBracket, (116,14)->(116,15)),
                                                                                                                index: Item(
                                                                                                                    Identifier(
                                                                                                                        Raw(key),
                                                                                                                    ),
                                                                                                                ),
                                                                                                                close: Token(RightBracket, (116,18)->(116,19)),
                                                                                                            },
                                                                                                        ),
                                                                                                        dot: Token(Dot, (116,19)->(116,20)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "tries",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                equals: Token(Equal, (116,26)->(116,27)),
                                                                                                right: Number(
                                                                                                    Number(1),
                                                                                                ),
                                                                                                eol: Token(EndOfLine, (116,29)->(116,29)),
                                                                                            },
                                                                                        ),
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        },
                                                                    ),
                                                                    endif_tok: Token(Identifier, (117,6)->(117,11)),
                                                                    endif_eol: Token(EndOfLine, (117,11)->(117,11)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    endfor_: Token(Identifier, (118,4)->(118,10)),
                                                    endfor_eol: Token(EndOfLine, (118,10)->(118,10)),
                                                },
                                            ),
                                        ],
                                    },
                                    endfor_: Token(Identifier, (119,2)->(119,8)),
                                    endfor_eol: Token(EndOfLine, (119,8)->(119,8)),
                                },
                            ),
                            Var(
                                VarCommand {
                                    var: Token(Identifier, (120,2)->(120,7)),
                                    ty: None,
                                    name: Raw(result),
                                    equal: Token(Equal, (120,15)->(120,16)),
                                    expr: Call(
                                        f: Identifier(Raw(values)) arg: [
                                            Identifier(
                                                Raw(lookup),
                                            ),
                                        ],
                                    ),
                                    eol: Token(EndOfLine, (120,31)->(120,31)),
                                },
                            ),
                            For(
                                ForCommand {
                                    for_: Token(Identifier, (121,2)->(121,5)),
                                    for_identifier: Raw(item),
                                    for_type: None,
                                    in_: Token(Identifier, (121,11)->(121,13)),
                                    for_expr: Identifier(
                                        Raw(result),
                                    ),
                                    eol: Token(EndOfLine, (121,20)->(121,20)),
                                    body: Body {
                                        commands: [
                                            For(
                                                ForCommand {
                                                    for_: Token(Identifier, (122,4)->(122,7)),
                                                    for_identifier: Raw(tfield),
                                                    for_type: None,
                                                    in_: Token(Identifier, (122,15)->(122,17)),
                                                    for_expr: Identifier(
                                                        Raw(tfields),
                                                    ),
                                                    eol: Token(EndOfLine, (122,25)->(122,25)),
                                                    body: Body {
                                                        commands: [
                                                            If(
                                                                IfCommand {
                                                                    if_tok: Token(Identifier, (123,6)->(123,8)),
                                                                    condition: Call(
                                                                        f: Identifier(Raw(has_key)) arg: [
                                                                            Identifier(
                                                                                Raw(item),
                                                                            ),
                                                                            Identifier(
                                                                                Raw(tfield),
                                                                            ),
                                                                        ],
                                                                    ),
                                                                    if_eol: Token(EndOfLine, (123,30)->(123,30)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Var(
                                                                                VarCommand {
                                                                                    var: Token(Identifier, (124,8)->(124,13)),
                                                                                    ty: None,
                                                                                    name: Raw(mean),
                                                                                    equal: Token(Equal, (124,19)->(124,20)),
                                                                                    expr: Call(
                                                                                        f: Identifier(Raw(Mean)) arg: [
                                                                                            Index(
                                                                                                IndexExpression {
                                                                                                    container: Identifier(
                                                                                                        Raw(item),
                                                                                                    ),
                                                                                                    open: Token(LeftBracket, (124,30)->(124,31)),
                                                                                                    index: Item(
                                                                                                        Identifier(
                                                                                                            Raw(tfield),
                                                                                                        ),
                                                                                                    ),
                                                                                                    close: Token(RightBracket, (124,37)->(124,38)),
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    ),
                                                                                    eol: Token(EndOfLine, (124,39)->(124,39)),
                                                                                },
                                                                            ),
                                                                            Comment(
                                                                                Token(Comment, "# Use 1 for ddof, for sample standard deviation.", (125,8)->(125,56)),
                                                                            ),
                                                                            Var(
                                                                                VarCommand {
                                                                                    var: Token(Identifier, (126,8)->(126,13)),
                                                                                    ty: None,
                                                                                    name: Raw(std),
                                                                                    equal: Token(Equal, (126,18)->(126,19)),
                                                                                    expr: Call(
                                                                                        f: Identifier(Raw(StandardDeviation)) arg: [
                                                                                            Index(
                                                                                                IndexExpression {
                                                                                                    container: Identifier(
                                                                                                        Raw(item),
                                                                                                    ),
                                                                                                    open: Token(LeftBracket, (126,42)->(126,43)),
                                                                                                    index: Item(
                                                                                                        Identifier(
                                                                                                            Raw(tfield),
                                                                                                        ),
                                                                                                    ),
                                                                                                    close: Token(RightBracket, (126,49)->(126,50)),
                                                                                                },
                                                                                            ),
                                                                                            Number(
                                                                                                Number(1),
                                                                                            ),
                                                                                            Identifier(
                                                                                                Raw(mean),
                                                                                            ),
                                                                                        ],
                                                                                    ),
                                                                                    eol: Token(EndOfLine, (126,60)->(126,60)),
                                                                                },
                                                                            ),
                                                                            Statement(
                                                                                Assign(
                                                                                    AssignStatement {
                                                                                        left: Index(
                                                                                            IndexExpression {
                                                                                                container: Identifier(
                                                                                                    Raw(item),
                                                                                                ),
                                                                                                open: Token(LeftBracket, (127,12)->(127,13)),
                                                                                                index: Item(
                                                                                                    Identifier(
                                                                                                        Raw(tfield),
                                                                                                    ),
                                                                                                ),
                                                                                                close: Token(RightBracket, (127,19)->(127,20)),
                                                                                            },
                                                                                        ),
                                                                                        equals: Token(Equal, (127,21)->(127,22)),
                                                                                        right: Dict(
                                                                                            DictLiteral {
                                                                                                open: Token(LeftBrace, (127,23)->(127,24)),
                                                                                                elements: [
                                                                                                    KeyValue {
                                                                                                        key: Literal(
                                                                                                            Literal {
                                                                                                                token: Token(SingleQuoteString, "mean", (127,25)->(127,28)),
                                                                                                            },
                                                                                                        ),
                                                                                                        colon: Token(SpacedColon, (127,30)->(127,32)),
                                                                                                        value: Identifier(
                                                                                                            Raw(mean),
                                                                                                        ),
                                                                                                    },
                                                                                                    KeyValue {
                                                                                                        key: Literal(
                                                                                                            Literal {
                                                                                                                token: Token(SingleQuoteString, "std", (127,39)->(127,41)),
                                                                                                            },
                                                                                                        ),
                                                                                                        colon: Token(SpacedColon, (127,43)->(127,45)),
                                                                                                        value: Identifier(
                                                                                                            Raw(std),
                                                                                                        ),
                                                                                                    },
                                                                                                ],
                                                                                                close: Token(RightBrace, (127,48)->(127,49)),
                                                                                            },
                                                                                        ),
                                                                                        eol: Token(EndOfLine, (127,49)->(127,49)),
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                    elseifs: [],
                                                                    else_command: None,
                                                                    endif_tok: Token(Identifier, (128,6)->(128,11)),
                                                                    endif_eol: Token(EndOfLine, (128,11)->(128,11)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                    endfor_: Token(Identifier, (129,4)->(129,10)),
                                                    endfor_eol: Token(EndOfLine, (129,10)->(129,10)),
                                                },
                                            ),
                                        ],
                                    },
                                    endfor_: Token(Identifier, (130,2)->(130,8)),
                                    endfor_eol: Token(EndOfLine, (130,8)->(130,8)),
                                },
                            ),
                            Comment(
                                Token(Comment, "# Sort on mean start time, event name, then occurrence.", (131,2)->(131,57)),
                            ),
                            Var(
                                VarCommand {
                                    var: Token(Identifier, (132,2)->(132,7)),
                                    ty: None,
                                    name: Raw(Compare),
                                    equal: Token(Equal, (132,16)->(132,17)),
                                    expr: Lambda(
                                        Lambda {
                                            args: Signature {
                                                open: Token(LeftParen, (132,18)->(132,19)),
                                                params: [
                                                    Parameter {
                                                        name: Raw(i1),
                                                        ty: None,
                                                        equal: None,
                                                        default_val: None,
                                                    },
                                                    Parameter {
                                                        name: Raw(i2),
                                                        ty: None,
                                                        equal: None,
                                                        default_val: None,
                                                    },
                                                ],
                                                close: Token(RightParen, (132,25)->(132,26)),
                                            },
                                            ret: None,
                                            arrow: Token(Arrow, (132,27)->(132,29)),
                                            body: Body {
                                                commands: [
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Virtual, (0,0)->(0,0)),
                                                            expr: Some(
                                                                Ternary(
                                                                    Ternary {
                                                                        cond: Infix(
                                                                            InfixExpression {
                                                                                token: Token(NotEqualTo, "!=#", (133,22)->(133,25)),
                                                                                operator: NotEqualTo,
                                                                                left: DictAccess(
                                                                                    DictAccess {
                                                                                        container: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(i1),
                                                                                                ),
                                                                                                dot: Token(Dot, (133,10)->(133,11)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "start",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, (133,16)->(133,17)),
                                                                                        index: RawIdentifier {
                                                                                            name: "mean",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                right: DictAccess(
                                                                                    DictAccess {
                                                                                        container: DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(i2),
                                                                                                ),
                                                                                                dot: Token(Dot, (133,28)->(133,29)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "start",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        dot: Token(Dot, (133,34)->(133,35)),
                                                                                        index: RawIdentifier {
                                                                                            name: "mean",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        question: Token(QuestionMark, (134,8)->(134,9)),
                                                                        if_true: Grouped(
                                                                            GroupedExpression {
                                                                                open: Token(LeftParen, (134,10)->(134,11)),
                                                                                expr: Ternary(
                                                                                    Ternary {
                                                                                        cond: Infix(
                                                                                            InfixExpression {
                                                                                                token: Token(LessThan, "<#", (134,25)->(134,27)),
                                                                                                operator: LessThan,
                                                                                                left: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: DictAccess(
                                                                                                            DictAccess {
                                                                                                                container: Identifier(
                                                                                                                    Raw(i1),
                                                                                                                ),
                                                                                                                dot: Token(Dot, (134,13)->(134,14)),
                                                                                                                index: RawIdentifier {
                                                                                                                    name: "start",
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                        dot: Token(Dot, (134,19)->(134,20)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "mean",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                right: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: DictAccess(
                                                                                                            DictAccess {
                                                                                                                container: Identifier(
                                                                                                                    Raw(i2),
                                                                                                                ),
                                                                                                                dot: Token(Dot, (134,30)->(134,31)),
                                                                                                                index: RawIdentifier {
                                                                                                                    name: "start",
                                                                                                                },
                                                                                                            },
                                                                                                        ),
                                                                                                        dot: Token(Dot, (134,36)->(134,37)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "mean",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        question: Token(QuestionMark, (134,42)->(134,43)),
                                                                                        if_true: Prefix(
                                                                                            PrefixExpression {
                                                                                                token: Token(Minus, (134,44)->(134,45)),
                                                                                                operator: Minus,
                                                                                                right: Number(
                                                                                                    Number(1),
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        colon: Token(SpacedColon, (134,47)->(134,49)),
                                                                                        if_false: Number(
                                                                                            Number(1),
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                close: Token(RightParen, (134,50)->(134,51)),
                                                                            },
                                                                        ),
                                                                        colon: Token(SpacedColon, (135,8)->(135,10)),
                                                                        if_false: Grouped(
                                                                            GroupedExpression {
                                                                                open: Token(LeftParen, (135,10)->(135,11)),
                                                                                expr: Ternary(
                                                                                    Ternary {
                                                                                        cond: Infix(
                                                                                            InfixExpression {
                                                                                                token: Token(NotEqualTo, "!=#", (135,20)->(135,23)),
                                                                                                operator: NotEqualTo,
                                                                                                left: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: Identifier(
                                                                                                            Raw(i1),
                                                                                                        ),
                                                                                                        dot: Token(Dot, (135,13)->(135,14)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "event",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                                right: DictAccess(
                                                                                                    DictAccess {
                                                                                                        container: Identifier(
                                                                                                            Raw(i2),
                                                                                                        ),
                                                                                                        dot: Token(Dot, (135,26)->(135,27)),
                                                                                                        index: RawIdentifier {
                                                                                                            name: "event",
                                                                                                        },
                                                                                                    },
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        question: Token(QuestionMark, (136,11)->(136,12)),
                                                                                        if_true: Grouped(
                                                                                            GroupedExpression {
                                                                                                open: Token(LeftParen, (136,13)->(136,14)),
                                                                                                expr: Ternary(
                                                                                                    Ternary {
                                                                                                        cond: Infix(
                                                                                                            InfixExpression {
                                                                                                                token: Token(LessThan, "<#", (136,23)->(136,25)),
                                                                                                                operator: LessThan,
                                                                                                                left: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(i1),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, (136,16)->(136,17)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "event",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                right: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(i2),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, (136,28)->(136,29)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "event",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        question: Token(QuestionMark, (136,35)->(136,36)),
                                                                                                        if_true: Prefix(
                                                                                                            PrefixExpression {
                                                                                                                token: Token(Minus, (136,37)->(136,38)),
                                                                                                                operator: Minus,
                                                                                                                right: Number(
                                                                                                                    Number(1),
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        colon: Token(SpacedColon, (136,40)->(136,42)),
                                                                                                        if_false: Number(
                                                                                                            Number(1),
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                close: Token(RightParen, (136,43)->(136,44)),
                                                                                            },
                                                                                        ),
                                                                                        colon: Token(SpacedColon, (137,11)->(137,13)),
                                                                                        if_false: Grouped(
                                                                                            GroupedExpression {
                                                                                                open: Token(LeftParen, (137,13)->(137,14)),
                                                                                                expr: Ternary(
                                                                                                    Ternary {
                                                                                                        cond: Infix(
                                                                                                            InfixExpression {
                                                                                                                token: Token(NotEqualTo, "!=#", (137,28)->(137,31)),
                                                                                                                operator: NotEqualTo,
                                                                                                                left: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(i1),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, (137,16)->(137,17)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "occurrence",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                                right: DictAccess(
                                                                                                                    DictAccess {
                                                                                                                        container: Identifier(
                                                                                                                            Raw(i2),
                                                                                                                        ),
                                                                                                                        dot: Token(Dot, (137,34)->(137,35)),
                                                                                                                        index: RawIdentifier {
                                                                                                                            name: "occurrence",
                                                                                                                        },
                                                                                                                    },
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                        question: Token(QuestionMark, (138,14)->(138,15)),
                                                                                                        if_true: Grouped(
                                                                                                            GroupedExpression {
                                                                                                                open: Token(LeftParen, (138,16)->(138,17)),
                                                                                                                expr: Ternary(
                                                                                                                    Ternary {
                                                                                                                        cond: Infix(
                                                                                                                            InfixExpression {
                                                                                                                                token: Token(LessThan, "<#", (138,31)->(138,33)),
                                                                                                                                operator: LessThan,
                                                                                                                                left: DictAccess(
                                                                                                                                    DictAccess {
                                                                                                                                        container: Identifier(
                                                                                                                                            Raw(i1),
                                                                                                                                        ),
                                                                                                                                        dot: Token(Dot, (138,19)->(138,20)),
                                                                                                                                        index: RawIdentifier {
                                                                                                                                            name: "occurrence",
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                                right: DictAccess(
                                                                                                                                    DictAccess {
                                                                                                                                        container: Identifier(
                                                                                                                                            Raw(i2),
                                                                                                                                        ),
                                                                                                                                        dot: Token(Dot, (138,36)->(138,37)),
                                                                                                                                        index: RawIdentifier {
                                                                                                                                            name: "occurrence",
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                        question: Token(QuestionMark, (138,48)->(138,49)),
                                                                                                                        if_true: Prefix(
                                                                                                                            PrefixExpression {
                                                                                                                                token: Token(Minus, (138,50)->(138,51)),
                                                                                                                                operator: Minus,
                                                                                                                                right: Number(
                                                                                                                                    Number(1),
                                                                                                                                ),
                                                                                                                            },
                                                                                                                        ),
                                                                                                                        colon: Token(SpacedColon, (138,53)->(138,55)),
                                                                                                                        if_false: Number(
                                                                                                                            Number(1),
                                                                                                                        ),
                                                                                                                    },
                                                                                                                ),
                                                                                                                close: Token(RightParen, (138,56)->(138,57)),
                                                                                                            },
                                                                                                        ),
                                                                                                        colon: Token(SpacedColon, (139,14)->(139,16)),
                                                                                                        if_false: Number(
                                                                                                            Number(0),
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                close: Token(RightParen, (139,17)->(139,18)),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                close: Token(RightParen, (139,18)->(139,19)),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                            eol: Token(Virtual, (0,0)->(0,0)),
                                                        },
                                                    ),
                                                ],
                                            },
                                        },
                                    ),
                                    eol: Token(EndOfLine, (139,19)->(139,19)),
                                },
                            ),
                            Eval(
                                EvalCommand {
                                    eval: None,
                                    expr: Call(
                                        f: Identifier(Raw(sort)) arg: [
                                            Identifier(
                                                Raw(result),
                                            ),
                                            Identifier(
                                                Raw(Compare),
                                            ),
                                        ],
                                    ),
                                    eol: Token(EndOfLine, (140,23)->(140,23)),
                                },
                            ),
                            Return(
                                ReturnCommand {
                                    ret: Token(Identifier, (141,2)->(141,8)),
                                    expr: Some(
                                        Identifier(
                                            Raw(result),
                                        ),
                                    ),
                                    eol: Token(EndOfLine, (141,15)->(141,15)),
                                },
                            ),
                        ],
                    },
                    enddef: Token(Identifier, (142,0)->(142,6)),
                    end_eol: Token(EndOfLine, (142,6)->(142,6)),
                },
            ),
        },
    ),
]
