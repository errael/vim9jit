---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2824
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (2,0)->(2,3)),
            ty: None,
            name: Raw(x),
            equal: Token(Equal, (2,6)->(2,7)),
            expr: Dict(
                DictLiteral {
                    open: Token(LeftBrace, (2,8)->(2,9)),
                    elements: [
                        KeyValue {
                            key: Literal(
                                Literal {
                                    token: Token(Identifier, "hello", (2,10)->(2,15)),
                                },
                            ),
                            colon: Token(SpacedColon, (2,15)->(2,17)),
                            value: String(
                                DoubleQuote(
                                    "world",
                                ),
                            ),
                        },
                        KeyValue {
                            key: Literal(
                                Literal {
                                    token: Token(Identifier, "another", (2,26)->(2,33)),
                                },
                            ),
                            colon: Token(SpacedColon, (2,33)->(2,35)),
                            value: Boolean(
                                VimBoolean {
                                    value: false,
                                },
                            ),
                        },
                    ],
                    close: Token(RightBrace, (2,41)->(2,42)),
                },
            ),
            eol: Token(EndOfLine, (2,42)->(2,42)),
        },
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (3,0)->(3,3)),
            ty: None,
            name: Raw(y),
            equal: Token(Equal, (3,6)->(3,7)),
            expr: Call(
                f: Identifier(Raw(len)) arg: [
                    Call(
                        f: Identifier(Raw(nvim_get_autcomds)) arg: [
                            Dict(
                                DictLiteral {
                                    open: Token(LeftBrace, (3,30)->(3,31)),
                                    elements: [
                                        KeyValue {
                                            key: Literal(
                                                Literal {
                                                    token: Token(Identifier, "group", (3,31)->(3,36)),
                                                },
                                            ),
                                            colon: Token(SpacedColon, (3,36)->(3,38)),
                                            value: String(
                                                DoubleQuote(
                                                    "matchparen",
                                                ),
                                            ),
                                        },
                                    ],
                                    close: Token(RightBrace, (3,50)->(3,51)),
                                },
                            ),
                        ],
                    ),
                ],
            ),
            eol: Token(EndOfLine, (3,53)->(3,53)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (4,0)->(4,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (5,0)->(5,3)),
            ty: None,
            name: Raw(multiline),
            equal: Token(Equal, (5,14)->(5,15)),
            expr: Dict(
                DictLiteral {
                    open: Token(LeftBrace, (5,16)->(5,17)),
                    elements: [
                        KeyValue {
                            key: Literal(
                                Literal {
                                    token: Token(Identifier, "x", (6,2)->(6,3)),
                                },
                            ),
                            colon: Token(SpacedColon, (6,3)->(6,5)),
                            value: Identifier(
                                Raw(x),
                            ),
                        },
                    ],
                    close: Token(RightBrace, (7,0)->(7,1)),
                },
            ),
            eol: Token(EndOfLine, (7,1)->(7,1)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (8,0)->(8,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (9,0)->(9,3)),
            ty: None,
            name: Raw(multiline_trail),
            equal: Token(Equal, (9,20)->(9,21)),
            expr: Dict(
                DictLiteral {
                    open: Token(LeftBrace, (9,22)->(9,23)),
                    elements: [
                        KeyValue {
                            key: Literal(
                                Literal {
                                    token: Token(Identifier, "x", (10,2)->(10,3)),
                                },
                            ),
                            colon: Token(SpacedColon, (10,3)->(10,5)),
                            value: Identifier(
                                Raw(x),
                            ),
                        },
                    ],
                    close: Token(RightBrace, (11,0)->(11,1)),
                },
            ),
            eol: Token(EndOfLine, (11,1)->(11,1)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (12,0)->(12,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (13,0)->(13,3)),
            ty: None,
            name: Raw(multiline_two),
            equal: Token(Equal, (13,18)->(13,19)),
            expr: Dict(
                DictLiteral {
                    open: Token(LeftBrace, (13,20)->(13,21)),
                    elements: [
                        KeyValue {
                            key: Literal(
                                Literal {
                                    token: Token(Identifier, "x", (14,2)->(14,3)),
                                },
                            ),
                            colon: Token(SpacedColon, (14,3)->(14,5)),
                            value: Identifier(
                                Raw(x),
                            ),
                        },
                        KeyValue {
                            key: Literal(
                                Literal {
                                    token: Token(Identifier, "y", (15,2)->(15,3)),
                                },
                            ),
                            colon: Token(SpacedColon, (15,3)->(15,5)),
                            value: Identifier(
                                Raw(y),
                            ),
                        },
                    ],
                    close: Token(RightBrace, (16,0)->(16,1)),
                },
            ),
            eol: Token(EndOfLine, (16,1)->(16,1)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (17,0)->(17,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (18,0)->(18,3)),
            ty: None,
            name: Raw(multiline_trail),
            equal: Token(Equal, (18,20)->(18,21)),
            expr: Dict(
                DictLiteral {
                    open: Token(LeftBrace, (18,22)->(18,23)),
                    elements: [
                        KeyValue {
                            key: Literal(
                                Literal {
                                    token: Token(Identifier, "x", (19,2)->(19,3)),
                                },
                            ),
                            colon: Token(SpacedColon, (19,3)->(19,5)),
                            value: Identifier(
                                Raw(x),
                            ),
                        },
                        KeyValue {
                            key: Literal(
                                Literal {
                                    token: Token(Identifier, "y", (20,2)->(20,3)),
                                },
                            ),
                            colon: Token(SpacedColon, (20,3)->(20,5)),
                            value: Identifier(
                                Raw(y),
                            ),
                        },
                    ],
                    close: Token(RightBrace, (25,0)->(25,1)),
                },
            ),
            eol: Token(EndOfLine, (25,1)->(25,1)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (26,0)->(26,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (27,0)->(27,3)),
            ty: None,
            name: Raw(keyed),
            equal: Token(Equal, (27,10)->(27,11)),
            expr: Dict(
                DictLiteral {
                    open: Token(LeftBrace, (27,12)->(27,13)),
                    elements: [
                        KeyValue {
                            key: Expression(
                                String(
                                    DoubleQuote(
                                        "hello",
                                    ),
                                ),
                            ),
                            colon: Token(SpacedColon, (28,13)->(28,15)),
                            value: String(
                                DoubleQuote(
                                    "world",
                                ),
                            ),
                        },
                        KeyValue {
                            key: Expression(
                                String(
                                    Interpolated(
                                        "{bnr}",
                                    ),
                                ),
                            ),
                            colon: Token(SpacedColon, (29,14)->(29,16)),
                            value: Identifier(
                                Raw(diag_by_lnum),
                            ),
                        },
                    ],
                    close: Token(RightBrace, (30,0)->(30,1)),
                },
            ),
            eol: Token(EndOfLine, (30,1)->(30,1)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (31,0)->(31,0)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (32,0)->(32,0)),
    ),
    Eval(
        EvalCommand {
            eval: None,
            expr: Call(
                f: Identifier(Raw(prop_add)) arg: [
                    Call(
                        f: Identifier(Raw(line)) arg: [
                            String(
                                SingleQuote(
                                    ".",
                                ),
                            ),
                        ],
                    ),
                    Identifier(
                        Raw(col),
                    ),
                    Dict(
                        DictLiteral {
                            open: Token(LeftBrace, (33,25)->(33,26)),
                            elements: [
                                KeyValue {
                                    key: Literal(
                                        Literal {
                                            token: Token(Identifier, "type", (33,26)->(33,30)),
                                        },
                                    ),
                                    colon: Token(SpacedColon, (33,30)->(33,32)),
                                    value: String(
                                        SingleQuote(
                                            "LspOutlineHighlight",
                                        ),
                                    ),
                                },
                                KeyValue {
                                    key: Literal(
                                        Literal {
                                            token: Token(Identifier, "length", (34,10)->(34,16)),
                                        },
                                    ),
                                    colon: Token(SpacedColon, (34,16)->(34,18)),
                                    value: MethodCall(
                                        MethodCall {
                                            left: DictAccess(
                                                DictAccess {
                                                    container: Index(
                                                        IndexExpression {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Scope(ScopedIdentifier { scope: Window, colon: Token(Colon, (34,19)->(34,20)), accessor: Raw(lspSymbols) }),
                                                                    ),
                                                                    dot: Token(Dot, (34,30)->(34,31)),
                                                                    index: RawIdentifier {
                                                                        name: "lnumTable",
                                                                    },
                                                                },
                                                            ),
                                                            open: Token(LeftBracket, (34,40)->(34,41)),
                                                            index: Item(
                                                                Identifier(
                                                                    Raw(lnum),
                                                                ),
                                                            ),
                                                            close: Token(RightBracket, (34,45)->(34,46)),
                                                        },
                                                    ),
                                                    dot: Token(Dot, (34,46)->(34,47)),
                                                    index: RawIdentifier {
                                                        name: "name",
                                                    },
                                                },
                                            ),
                                            tok: Token(MethodArrow, (34,51)->(34,53)),
                                            right: f: Identifier(Raw(len)) arg: [],
                                        },
                                    ),
                                },
                            ],
                            close: Token(RightBrace, (34,58)->(34,59)),
                        },
                    ),
                ],
            ),
            eol: Token(EndOfLine, (34,60)->(34,60)),
        },
    ),
]
