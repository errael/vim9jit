---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2833
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (2,0)->(2,3)),
            ty: None,
            name: Raw(l),
            equal: Token(Equal, (2,6)->(2,7)),
            expr: Array(
                ArrayLiteral {
                    open: Token(LeftBracket, (2,8)->(2,9)),
                    elements: [
                        Number(
                            Number(1),
                        ),
                        Number(
                            Number(2),
                        ),
                        Number(
                            Number(3),
                        ),
                    ],
                    close: Token(RightBracket, (2,16)->(2,17)),
                },
            ),
            eol: Token(EndOfLine, (2,17)->(2,17)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (3,0)->(3,0)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (4,0)->(4,3)),
            name: Raw(Test_can_index),
            args: Signature {
                open: Token(LeftParen, (4,18)->(4,19)),
                params: [],
                close: Token(RightParen, (4,19)->(4,20)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (4,20)->(4,20)),
            body: Body {
                commands: [
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: Call(
                                f: Identifier(Raw(assert_equal)) arg: [
                                    Number(
                                        Number(1),
                                    ),
                                    Index(
                                        IndexExpression {
                                            container: Identifier(
                                                Raw(l),
                                            ),
                                            open: Token(LeftBracket, (5,19)->(5,20)),
                                            index: Item(
                                                Number(
                                                    Number(0),
                                                ),
                                            ),
                                            close: Token(RightBracket, (5,21)->(5,22)),
                                        },
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, (5,23)->(5,23)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (6,0)->(6,6)),
            end_eol: Token(EndOfLine, (6,6)->(6,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (7,0)->(7,0)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (8,0)->(8,3)),
            name: Raw(Test_minus),
            args: Signature {
                open: Token(LeftParen, (8,14)->(8,15)),
                params: [],
                close: Token(RightParen, (8,15)->(8,16)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (8,16)->(8,16)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, (9,2)->(9,5)),
                            ty: None,
                            name: Raw(index),
                            equal: Token(Equal, (9,12)->(9,13)),
                            expr: Number(
                                Number(1),
                            ),
                            eol: Token(EndOfLine, (9,15)->(9,15)),
                        },
                    ),
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: Call(
                                f: Identifier(Raw(assert_equal)) arg: [
                                    Number(
                                        Number(1),
                                    ),
                                    Index(
                                        IndexExpression {
                                            container: Identifier(
                                                Raw(l),
                                            ),
                                            open: Token(LeftBracket, (10,19)->(10,20)),
                                            index: Item(
                                                Infix(
                                                    InfixExpression {
                                                        token: Token(Minus, "-", (10,26)->(10,27)),
                                                        operator: Minus,
                                                        left: Identifier(
                                                            Raw(index),
                                                        ),
                                                        right: Number(
                                                            Number(1),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            close: Token(RightBracket, (10,29)->(10,30)),
                                        },
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, (10,31)->(10,31)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (11,0)->(11,6)),
            end_eol: Token(EndOfLine, (11,6)->(11,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (12,0)->(12,0)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (13,0)->(13,3)),
            name: Raw(Test_both),
            args: Signature {
                open: Token(LeftParen, (13,13)->(13,14)),
                params: [],
                close: Token(RightParen, (13,14)->(13,15)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (13,15)->(13,15)),
            body: Body {
                commands: [
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: Call(
                                f: Identifier(Raw(assert_equal)) arg: [
                                    Array(
                                        ArrayLiteral {
                                            open: Token(LeftBracket, (14,15)->(14,16)),
                                            elements: [
                                                Number(
                                                    Number(1),
                                                ),
                                                Number(
                                                    Number(2),
                                                ),
                                            ],
                                            close: Token(RightBracket, (14,20)->(14,21)),
                                        },
                                    ),
                                    Index(
                                        IndexExpression {
                                            container: Identifier(
                                                Raw(l),
                                            ),
                                            open: Token(LeftBracket, (14,24)->(14,25)),
                                            index: Slice(
                                                VimSlice {
                                                    start: Some(
                                                        Number(
                                                            Number(0),
                                                        ),
                                                    ),
                                                    colon: Token(SpacedColon, (14,27)->(14,29)),
                                                    finish: Some(
                                                        Number(
                                                            Number(1),
                                                        ),
                                                    ),
                                                },
                                            ),
                                            close: Token(RightBracket, (14,30)->(14,31)),
                                        },
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, (14,32)->(14,32)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (15,0)->(15,6)),
            end_eol: Token(EndOfLine, (15,6)->(15,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (16,0)->(16,0)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (17,0)->(17,3)),
            name: Raw(Test_left),
            args: Signature {
                open: Token(LeftParen, (17,13)->(17,14)),
                params: [],
                close: Token(RightParen, (17,14)->(17,15)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (17,15)->(17,15)),
            body: Body {
                commands: [
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: Call(
                                f: Identifier(Raw(assert_equal)) arg: [
                                    Array(
                                        ArrayLiteral {
                                            open: Token(LeftBracket, (18,15)->(18,16)),
                                            elements: [
                                                Number(
                                                    Number(2),
                                                ),
                                                Number(
                                                    Number(3),
                                                ),
                                            ],
                                            close: Token(RightBracket, (18,20)->(18,21)),
                                        },
                                    ),
                                    Index(
                                        IndexExpression {
                                            container: Identifier(
                                                Raw(l),
                                            ),
                                            open: Token(LeftBracket, (18,24)->(18,25)),
                                            index: Slice(
                                                VimSlice {
                                                    start: Some(
                                                        Number(
                                                            Number(1),
                                                        ),
                                                    ),
                                                    colon: Token(SpacedColon, (18,27)->(18,29)),
                                                    finish: None,
                                                },
                                            ),
                                            close: Token(RightBracket, (18,29)->(18,30)),
                                        },
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, (18,31)->(18,31)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (19,0)->(19,6)),
            end_eol: Token(EndOfLine, (19,6)->(19,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (20,0)->(20,0)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (21,0)->(21,3)),
            name: Raw(Test_right),
            args: Signature {
                open: Token(LeftParen, (21,14)->(21,15)),
                params: [],
                close: Token(RightParen, (21,15)->(21,16)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (21,16)->(21,16)),
            body: Body {
                commands: [
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: Call(
                                f: Identifier(Raw(assert_equal)) arg: [
                                    Array(
                                        ArrayLiteral {
                                            open: Token(LeftBracket, (22,15)->(22,16)),
                                            elements: [
                                                Number(
                                                    Number(1),
                                                ),
                                                Number(
                                                    Number(2),
                                                ),
                                            ],
                                            close: Token(RightBracket, (22,20)->(22,21)),
                                        },
                                    ),
                                    Index(
                                        IndexExpression {
                                            container: Identifier(
                                                Raw(l),
                                            ),
                                            open: Token(LeftBracket, (22,24)->(22,25)),
                                            index: Slice(
                                                VimSlice {
                                                    start: None,
                                                    colon: Token(SpacedColon, (22,25)->(22,27)),
                                                    finish: Some(
                                                        Number(
                                                            Number(1),
                                                        ),
                                                    ),
                                                },
                                            ),
                                            close: Token(RightBracket, (22,28)->(22,29)),
                                        },
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, (22,30)->(22,30)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (23,0)->(23,6)),
            end_eol: Token(EndOfLine, (23,6)->(23,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (24,0)->(24,0)),
    ),
]
