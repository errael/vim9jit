---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2850
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Comment(
        Token(Comment, "# Thanks to https://github.com/hahdookin/miniterm.vim for the test file", (2,0)->(2,71)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (3,0)->(3,0)),
    ),
    Comment(
        Token(Comment, "# Configuration", (4,0)->(4,15)),
    ),
    Comment(
        Token(Comment, "# g:miniterm_proportion = get(g:, \"miniterm_proportion\", 0.28)", (5,0)->(5,62)),
    ),
    Comment(
        Token(Comment, "# g:miniterm_position = get(g:, \"miniterm_position\", \"bottom\")", (6,0)->(6,62)),
    ),
    NoOp(
        Token(EndOfLine, "\n", (7,0)->(7,0)),
    ),
    Comment(
        Token(Comment, "# These two functions handle destroying buffers.", (8,0)->(8,48)),
    ),
    Comment(
        Token(Comment, "# Slight workaround to event handling while also", (9,0)->(9,48)),
    ),
    Comment(
        Token(Comment, "# being able to reference the \"manager\" in the", (10,0)->(10,46)),
    ),
    Comment(
        Token(Comment, "# event handling code.", (11,0)->(11,22)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (12,0)->(12,3)),
            name: Scope(ScopedIdentifier { scope: Global, colon: Token(Colon, (12,5)->(12,6)), accessor: Raw(AttachWipeoutHandler) }),
            args: Signature {
                open: Token(LeftParen, (12,26)->(12,27)),
                params: [
                    Parameter {
                        name: Raw(term),
                        ty: Some(
                            Dict {
                                open: Token(AngleLeft, (12,37)->(12,38)),
                                inner: Any,
                                close: Token(AngleRight, (12,41)->(12,42)),
                            },
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, (12,42)->(12,43)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (12,43)->(12,43)),
            body: Body {
                commands: [
                    Execute(
                        ExecuteCommand {
                            execute: Token(Identifier, (13,4)->(13,11)),
                            expr: Infix(
                                InfixExpression {
                                    token: Token(StringConcat, "..", (13,117)->(13,119)),
                                    operator: StringConcat,
                                    left: Infix(
                                        InfixExpression {
                                            token: Token(StringConcat, "..", (13,103)->(13,105)),
                                            operator: StringConcat,
                                            left: Infix(
                                                InfixExpression {
                                                    token: Token(StringConcat, "..", (13,56)->(13,58)),
                                                    operator: StringConcat,
                                                    left: Infix(
                                                        InfixExpression {
                                                            token: Token(StringConcat, "..", (13,42)->(13,44)),
                                                            operator: StringConcat,
                                                            left: String(
                                                                DoubleQuote(
                                                                    "autocmd BufWipeout <buffer=",
                                                                ),
                                                            ),
                                                            right: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(term),
                                                                    ),
                                                                    dot: Token(Dot, (13,49)->(13,50)),
                                                                    index: RawIdentifier {
                                                                        name: "bufnr",
                                                                    },
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    right: String(
                                                        DoubleQuote(
                                                            "> vim9 miniterm#GetManager().RemoveBufnr(",
                                                        ),
                                                    ),
                                                },
                                            ),
                                            right: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(term),
                                                    ),
                                                    dot: Token(Dot, (13,110)->(13,111)),
                                                    index: RawIdentifier {
                                                        name: "bufnr",
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                    right: String(
                                        DoubleQuote(
                                            ") | miniterm#GetManager().UpdateState()",
                                        ),
                                    ),
                                },
                            ),
                            eol: Token(EndOfLine, (13,161)->(13,161)),
                        },
                    ),
                    Execute(
                        ExecuteCommand {
                            execute: Token(Identifier, (14,4)->(14,11)),
                            expr: Infix(
                                InfixExpression {
                                    token: Token(StringConcat, "..", (14,116)->(14,118)),
                                    operator: StringConcat,
                                    left: Infix(
                                        InfixExpression {
                                            token: Token(StringConcat, "..", (14,102)->(14,104)),
                                            operator: StringConcat,
                                            left: Infix(
                                                InfixExpression {
                                                    token: Token(StringConcat, "..", (14,55)->(14,57)),
                                                    operator: StringConcat,
                                                    left: Infix(
                                                        InfixExpression {
                                                            token: Token(StringConcat, "..", (14,41)->(14,43)),
                                                            operator: StringConcat,
                                                            left: String(
                                                                DoubleQuote(
                                                                    "autocmd BufDelete <buffer=",
                                                                ),
                                                            ),
                                                            right: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(term),
                                                                    ),
                                                                    dot: Token(Dot, (14,48)->(14,49)),
                                                                    index: RawIdentifier {
                                                                        name: "bufnr",
                                                                    },
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    right: String(
                                                        DoubleQuote(
                                                            "> vim9 miniterm#GetManager().RemoveBufnr(",
                                                        ),
                                                    ),
                                                },
                                            ),
                                            right: DictAccess(
                                                DictAccess {
                                                    container: Identifier(
                                                        Raw(term),
                                                    ),
                                                    dot: Token(Dot, (14,109)->(14,110)),
                                                    index: RawIdentifier {
                                                        name: "bufnr",
                                                    },
                                                },
                                            ),
                                        },
                                    ),
                                    right: String(
                                        DoubleQuote(
                                            ") | miniterm#GetManager().UpdateState()",
                                        ),
                                    ),
                                },
                            ),
                            eol: Token(EndOfLine, (14,160)->(14,160)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (15,0)->(15,6)),
            end_eol: Token(EndOfLine, (15,6)->(15,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (16,0)->(16,0)),
    ),
    Comment(
        Token(Comment, "# Terminal class", (17,0)->(17,16)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (18,0)->(18,3)),
            name: Raw(Terminal),
            args: Signature {
                open: Token(LeftParen, (18,12)->(18,13)),
                params: [],
                close: Token(RightParen, (18,13)->(18,14)),
            },
            ret: Some(
                Dict {
                    open: Token(AngleLeft, (18,20)->(18,21)),
                    inner: Any,
                    close: Token(GreaterThan, (18,24)->(18,25)),
                },
            ),
            def_eol: Token(EndOfLine, (18,25)->(18,25)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, (19,4)->(19,7)),
                            ty: Some(
                                Dict {
                                    open: Token(AngleLeft, (19,17)->(19,18)),
                                    inner: Any,
                                    close: Token(GreaterThan, (19,21)->(19,22)),
                                },
                            ),
                            name: Raw(Res),
                            equal: Token(Equal, (19,23)->(19,24)),
                            expr: Dict(
                                DictLiteral {
                                    open: Token(LeftBrace, (19,25)->(19,26)),
                                    elements: [
                                        KeyValue {
                                            key: Literal(
                                                Literal {
                                                    token: Token(Identifier, "bufnr", (20,8)->(20,13)),
                                                },
                                            ),
                                            colon: Token(SpacedColon, (20,13)->(20,15)),
                                            value: Number(
                                                Number(0),
                                            ),
                                        },
                                        KeyValue {
                                            key: Literal(
                                                Literal {
                                                    token: Token(Identifier, "winnr", (21,8)->(21,13)),
                                                },
                                            ),
                                            colon: Token(SpacedColon, (21,13)->(21,15)),
                                            value: Number(
                                                Number(0),
                                            ),
                                        },
                                        KeyValue {
                                            key: Literal(
                                                Literal {
                                                    token: Token(Identifier, "open", (22,8)->(22,12)),
                                                },
                                            ),
                                            colon: Token(SpacedColon, (22,12)->(22,14)),
                                            value: Number(
                                                Number(0),
                                            ),
                                        },
                                    ],
                                    close: Token(RightBrace, (23,4)->(23,5)),
                                },
                            ),
                            eol: Token(EndOfLine, (23,5)->(23,5)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (24,0)->(24,0)),
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (25,7)->(25,8)),
                                        index: RawIdentifier {
                                            name: "bufnr",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (25,14)->(25,15)),
                                right: Call(
                                    f: Identifier(Raw(term_start)) arg: [
                                        String(
                                            EnvironmentVariable(
                                                "SHELL",
                                            ),
                                        ),
                                        Dict(
                                            DictLiteral {
                                                open: Token(LeftBrace, (25,35)->(25,36)),
                                                elements: [
                                                    KeyValue {
                                                        key: Literal(
                                                            Literal {
                                                                token: Token(Identifier, "hidden", (26,8)->(26,14)),
                                                            },
                                                        ),
                                                        colon: Token(SpacedColon, (26,14)->(26,16)),
                                                        value: Number(
                                                            Number(1),
                                                        ),
                                                    },
                                                    KeyValue {
                                                        key: Literal(
                                                            Literal {
                                                                token: Token(Identifier, "term_kill", (27,8)->(27,17)),
                                                            },
                                                        ),
                                                        colon: Token(SpacedColon, (27,17)->(27,19)),
                                                        value: String(
                                                            SingleQuote(
                                                                "hup",
                                                            ),
                                                        ),
                                                    },
                                                ],
                                                close: Token(RightBrace, (28,4)->(28,5)),
                                            },
                                        ),
                                    ],
                                ),
                                eol: Token(EndOfLine, (28,6)->(28,6)),
                            },
                        ),
                    ),
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: Call(
                                f: Identifier(Raw(setbufvar)) arg: [
                                    DictAccess(
                                        DictAccess {
                                            container: Identifier(
                                                Raw(Res),
                                            ),
                                            dot: Token(Dot, (29,17)->(29,18)),
                                            index: RawIdentifier {
                                                name: "bufnr",
                                            },
                                        },
                                    ),
                                    String(
                                        DoubleQuote(
                                            "&buflisted",
                                        ),
                                    ),
                                    Number(
                                        Number(0),
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, (29,41)->(29,41)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (30,0)->(30,0)),
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, (31,4)->(31,10)),
                            expr: Some(
                                Identifier(
                                    Raw(Res),
                                ),
                            ),
                            eol: Token(EndOfLine, (31,14)->(31,14)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (32,0)->(32,6)),
            end_eol: Token(EndOfLine, (32,6)->(32,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (33,0)->(33,0)),
    ),
    Comment(
        Token(Comment, "# Terminal manager class", (34,0)->(34,24)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (35,0)->(35,3)),
            name: Raw(TerminalManager),
            args: Signature {
                open: Token(LeftParen, (35,19)->(35,20)),
                params: [],
                close: Token(RightParen, (35,20)->(35,21)),
            },
            ret: Some(
                Dict {
                    open: Token(AngleLeft, (35,27)->(35,28)),
                    inner: Any,
                    close: Token(GreaterThan, (35,31)->(35,32)),
                },
            ),
            def_eol: Token(EndOfLine, (35,32)->(35,32)),
            body: Body {
                commands: [
                    Var(
                        VarCommand {
                            var: Token(Identifier, (36,4)->(36,7)),
                            ty: Some(
                                Dict {
                                    open: Token(AngleLeft, (36,17)->(36,18)),
                                    inner: Any,
                                    close: Token(GreaterThan, (36,21)->(36,22)),
                                },
                            ),
                            name: Raw(Res),
                            equal: Token(Equal, (36,23)->(36,24)),
                            expr: Dict(
                                DictLiteral {
                                    open: Token(LeftBrace, (36,25)->(36,26)),
                                    elements: [
                                        KeyValue {
                                            key: Literal(
                                                Literal {
                                                    token: Token(Identifier, "terminals", (37,8)->(37,17)),
                                                },
                                            ),
                                            colon: Token(SpacedColon, (37,17)->(37,19)),
                                            value: Array(
                                                ArrayLiteral {
                                                    open: Token(LeftBracket, (37,19)->(37,20)),
                                                    elements: [],
                                                    close: Token(RightBracket, (37,20)->(37,21)),
                                                },
                                            ),
                                        },
                                        KeyValue {
                                            key: Literal(
                                                Literal {
                                                    token: Token(Identifier, "current", (38,8)->(38,15)),
                                                },
                                            ),
                                            colon: Token(SpacedColon, (38,15)->(38,17)),
                                            value: Dict(
                                                DictLiteral {
                                                    open: Token(LeftBrace, (38,17)->(38,18)),
                                                    elements: [],
                                                    close: Token(RightBrace, (38,18)->(38,19)),
                                                },
                                            ),
                                        },
                                    ],
                                    close: Token(RightBrace, (39,4)->(39,5)),
                                },
                            ),
                            eol: Token(EndOfLine, (39,5)->(39,5)),
                        },
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (40,0)->(40,0)),
                    ),
                    Comment(
                        Token(Comment, "# Whether or not the manager has a current terminal", (41,4)->(41,55)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (42,4)->(42,7)),
                            name: Raw(HasCurrent),
                            args: Signature {
                                open: Token(LeftParen, (42,18)->(42,19)),
                                params: [],
                                close: Token(RightParen, (42,19)->(42,20)),
                            },
                            ret: Some(
                                Bool,
                            ),
                            def_eol: Token(EndOfLine, (42,26)->(42,26)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, (43,8)->(43,14)),
                                            expr: Some(
                                                Prefix(
                                                    PrefixExpression {
                                                        token: Token(Bang, (43,15)->(43,16)),
                                                        operator: Bang,
                                                        right: Call(
                                                            f: Identifier(Raw(empty)) arg: [
                                                                DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(Res),
                                                                        ),
                                                                        dot: Token(Dot, (43,25)->(43,26)),
                                                                        index: RawIdentifier {
                                                                            name: "current",
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                        ),
                                                    },
                                                ),
                                            ),
                                            eol: Token(EndOfLine, (43,34)->(43,34)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (44,4)->(44,10)),
                            end_eol: Token(EndOfLine, (44,10)->(44,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (45,7)->(45,8)),
                                        index: RawIdentifier {
                                            name: "HasCurrent",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (45,19)->(45,20)),
                                right: Identifier(
                                    Raw(HasCurrent),
                                ),
                                eol: Token(EndOfLine, (45,31)->(45,31)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (46,0)->(46,0)),
                    ),
                    Comment(
                        Token(Comment, "# Open the current terminal", (47,4)->(47,31)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (48,4)->(48,7)),
                            name: Raw(OpenCurrent),
                            args: Signature {
                                open: Token(LeftParen, (48,19)->(48,20)),
                                params: [],
                                close: Token(RightParen, (48,20)->(48,21)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (48,21)->(48,21)),
                            body: Body {
                                commands: [
                                    Execute(
                                        ExecuteCommand {
                                            execute: Token(Identifier, (49,8)->(49,12)),
                                            expr: Infix(
                                                InfixExpression {
                                                    token: Token(StringConcat, "..", (49,28)->(49,30)),
                                                    operator: StringConcat,
                                                    left: String(
                                                        DoubleQuote(
                                                            "bot sbuffer ",
                                                        ),
                                                    ),
                                                    right: DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(Res),
                                                                    ),
                                                                    dot: Token(Dot, (49,34)->(49,35)),
                                                                    index: RawIdentifier {
                                                                        name: "current",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, (49,42)->(49,43)),
                                                            index: RawIdentifier {
                                                                name: "bufnr",
                                                            },
                                                        },
                                                    ),
                                                },
                                            ),
                                            eol: Token(EndOfLine, (49,48)->(49,48)),
                                        },
                                    ),
                                    Execute(
                                        ExecuteCommand {
                                            execute: Token(Identifier, (50,8)->(50,12)),
                                            expr: Infix(
                                                InfixExpression {
                                                    token: Token(StringConcat, "..", (50,23)->(50,25)),
                                                    operator: StringConcat,
                                                    left: String(
                                                        DoubleQuote(
                                                            "resize ",
                                                        ),
                                                    ),
                                                    right: Call(
                                                        f: Identifier(Raw(float2nr)) arg: [
                                                            Infix(
                                                                InfixExpression {
                                                                    token: Token(Mul, "*", (50,42)->(50,43)),
                                                                    operator: Multiply,
                                                                    left: VimOption(
                                                                        VimOption {
                                                                            ampersand: Token(Ampersand, (50,35)->(50,36)),
                                                                            option: Literal {
                                                                                token: Token(Identifier, "lines", (50,36)->(50,41)),
                                                                            },
                                                                        },
                                                                    ),
                                                                    right: Identifier(
                                                                        Scope(ScopedIdentifier { scope: Global, colon: Token(Colon, (50,45)->(50,46)), accessor: Raw(miniterm_proportion) }),
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                },
                                            ),
                                            eol: Token(EndOfLine, (50,66)->(50,66)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "        setlocal winfixheight",
                                            eol: Token(EndOfLine, (51,29)->(51,29)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "        setlocal nonumber norelativenumber",
                                            eol: Token(EndOfLine, (52,42)->(52,42)),
                                        },
                                    ),
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "        setlocal hidden",
                                            eol: Token(EndOfLine, (53,23)->(53,23)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(Res),
                                                                ),
                                                                dot: Token(Dot, (54,11)->(54,12)),
                                                                index: RawIdentifier {
                                                                    name: "current",
                                                                },
                                                            },
                                                        ),
                                                        dot: Token(Dot, (54,19)->(54,20)),
                                                        index: RawIdentifier {
                                                            name: "winnr",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, (54,26)->(54,27)),
                                                right: Call(
                                                    f: Identifier(Raw(win_getid)) arg: [],
                                                ),
                                                eol: Token(EndOfLine, (54,39)->(54,39)),
                                            },
                                        ),
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(Res),
                                                                ),
                                                                dot: Token(Dot, (55,11)->(55,12)),
                                                                index: RawIdentifier {
                                                                    name: "current",
                                                                },
                                                            },
                                                        ),
                                                        dot: Token(Dot, (55,19)->(55,20)),
                                                        index: RawIdentifier {
                                                            name: "open",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, (55,25)->(55,26)),
                                                right: Number(
                                                    Number(1),
                                                ),
                                                eol: Token(EndOfLine, (55,28)->(55,28)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (56,4)->(56,10)),
                            end_eol: Token(EndOfLine, (56,10)->(56,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (57,7)->(57,8)),
                                        index: RawIdentifier {
                                            name: "OpenCurrent",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (57,20)->(57,21)),
                                right: Identifier(
                                    Raw(OpenCurrent),
                                ),
                                eol: Token(EndOfLine, (57,33)->(57,33)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (58,0)->(58,0)),
                    ),
                    Comment(
                        Token(Comment, "# Close the current terminal", (59,4)->(59,32)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (60,4)->(60,7)),
                            name: Raw(CloseCurrent),
                            args: Signature {
                                open: Token(LeftParen, (60,20)->(60,21)),
                                params: [],
                                close: Token(RightParen, (60,21)->(60,22)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (60,22)->(60,22)),
                            body: Body {
                                commands: [
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: Call(
                                                f: Identifier(Raw(win_execute)) arg: [
                                                    DictAccess(
                                                        DictAccess {
                                                            container: DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(Res),
                                                                    ),
                                                                    dot: Token(Dot, (61,23)->(61,24)),
                                                                    index: RawIdentifier {
                                                                        name: "current",
                                                                    },
                                                                },
                                                            ),
                                                            dot: Token(Dot, (61,31)->(61,32)),
                                                            index: RawIdentifier {
                                                                name: "winnr",
                                                            },
                                                        },
                                                    ),
                                                    String(
                                                        SingleQuote(
                                                            "close!",
                                                        ),
                                                    ),
                                                ],
                                            ),
                                            eol: Token(EndOfLine, (61,48)->(61,48)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(Res),
                                                                ),
                                                                dot: Token(Dot, (62,11)->(62,12)),
                                                                index: RawIdentifier {
                                                                    name: "current",
                                                                },
                                                            },
                                                        ),
                                                        dot: Token(Dot, (62,19)->(62,20)),
                                                        index: RawIdentifier {
                                                            name: "open",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, (62,25)->(62,26)),
                                                right: Number(
                                                    Number(0),
                                                ),
                                                eol: Token(EndOfLine, (62,28)->(62,28)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (63,4)->(63,10)),
                            end_eol: Token(EndOfLine, (63,10)->(63,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (64,7)->(64,8)),
                                        index: RawIdentifier {
                                            name: "CloseCurrent",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (64,21)->(64,22)),
                                right: Identifier(
                                    Raw(CloseCurrent),
                                ),
                                eol: Token(EndOfLine, (64,35)->(64,35)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (65,0)->(65,0)),
                    ),
                    Comment(
                        Token(Comment, "# Returns what index the terminal is in the list", (66,4)->(66,52)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (67,4)->(67,7)),
                            name: Raw(IndexOfTerm),
                            args: Signature {
                                open: Token(LeftParen, (67,19)->(67,20)),
                                params: [
                                    Parameter {
                                        name: Raw(term),
                                        ty: Some(
                                            Dict {
                                                open: Token(AngleLeft, (67,30)->(67,31)),
                                                inner: Any,
                                                close: Token(AngleRight, (67,34)->(67,35)),
                                            },
                                        ),
                                        equal: None,
                                        default_val: None,
                                    },
                                ],
                                close: Token(RightParen, (67,35)->(67,36)),
                            },
                            ret: Some(
                                Number,
                            ),
                            def_eol: Token(EndOfLine, (67,44)->(67,44)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, (68,8)->(68,11)),
                                            ty: None,
                                            name: Raw(index),
                                            equal: Token(Equal, (68,18)->(68,19)),
                                            expr: Prefix(
                                                PrefixExpression {
                                                    token: Token(Minus, (68,20)->(68,21)),
                                                    operator: Minus,
                                                    right: Number(
                                                        Number(1),
                                                    ),
                                                },
                                            ),
                                            eol: Token(EndOfLine, (68,22)->(68,22)),
                                        },
                                    ),
                                    For(
                                        ForCommand {
                                            for_: Token(Identifier, (69,8)->(69,11)),
                                            for_identifier: Raw(i),
                                            for_type: None,
                                            in_: Token(Identifier, (69,14)->(69,16)),
                                            for_expr: Call(
                                                f: Identifier(Raw(range)) arg: [
                                                    Call(
                                                        f: Identifier(Raw(len)) arg: [
                                                            DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(Res),
                                                                    ),
                                                                    dot: Token(Dot, (69,30)->(69,31)),
                                                                    index: RawIdentifier {
                                                                        name: "terminals",
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                            eol: Token(EndOfLine, (69,42)->(69,42)),
                                            body: Body {
                                                commands: [
                                                    Var(
                                                        VarCommand {
                                                            var: Token(Identifier, (70,12)->(70,15)),
                                                            ty: None,
                                                            name: Raw(t),
                                                            equal: Token(Equal, (70,18)->(70,19)),
                                                            expr: Index(
                                                                IndexExpression {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(Res),
                                                                            ),
                                                                            dot: Token(Dot, (70,23)->(70,24)),
                                                                            index: RawIdentifier {
                                                                                name: "terminals",
                                                                            },
                                                                        },
                                                                    ),
                                                                    open: Token(LeftBracket, (70,33)->(70,34)),
                                                                    index: Item(
                                                                        Identifier(
                                                                            Raw(i),
                                                                        ),
                                                                    ),
                                                                    close: Token(RightBracket, (70,35)->(70,36)),
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, (70,36)->(70,36)),
                                                        },
                                                    ),
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, (71,12)->(71,14)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(EqualTo, "==", (71,23)->(71,25)),
                                                                    operator: EqualTo,
                                                                    left: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(t),
                                                                            ),
                                                                            dot: Token(Dot, (71,16)->(71,17)),
                                                                            index: RawIdentifier {
                                                                                name: "bufnr",
                                                                            },
                                                                        },
                                                                    ),
                                                                    right: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(term),
                                                                            ),
                                                                            dot: Token(Dot, (71,30)->(71,31)),
                                                                            index: RawIdentifier {
                                                                                name: "bufnr",
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, (71,36)->(71,36)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Assign(
                                                                            AssignStatement {
                                                                                left: Identifier(
                                                                                    Raw(index),
                                                                                ),
                                                                                equals: Token(Equal, (72,22)->(72,23)),
                                                                                right: Identifier(
                                                                                    Raw(i),
                                                                                ),
                                                                                eol: Token(EndOfLine, (72,25)->(72,25)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                    Break(
                                                                        BreakCommand {
                                                                            br: Token(Identifier, (73,16)->(73,21)),
                                                                            eol: Token(EndOfLine, (73,21)->(73,21)),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [],
                                                            else_command: None,
                                                            endif_tok: Token(Identifier, (74,12)->(74,17)),
                                                            endif_eol: Token(EndOfLine, (74,17)->(74,17)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            endfor_: Token(Identifier, (75,8)->(75,14)),
                                            endfor_eol: Token(EndOfLine, (75,14)->(75,14)),
                                        },
                                    ),
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, (76,8)->(76,14)),
                                            expr: Some(
                                                Identifier(
                                                    Raw(index),
                                                ),
                                            ),
                                            eol: Token(EndOfLine, (76,20)->(76,20)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (77,4)->(77,10)),
                            end_eol: Token(EndOfLine, (77,10)->(77,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (78,7)->(78,8)),
                                        index: RawIdentifier {
                                            name: "IndexOfTerm",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (78,20)->(78,21)),
                                right: Identifier(
                                    Raw(IndexOfTerm),
                                ),
                                eol: Token(EndOfLine, (78,33)->(78,33)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (79,0)->(79,0)),
                    ),
                    Comment(
                        Token(Comment, "# Removes a terminal with bufnr from list if it exists", (80,4)->(80,58)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (81,4)->(81,7)),
                            name: Raw(RemoveBufnr),
                            args: Signature {
                                open: Token(LeftParen, (81,19)->(81,20)),
                                params: [
                                    Parameter {
                                        name: Raw(bufnr),
                                        ty: Some(
                                            Number,
                                        ),
                                        equal: None,
                                        default_val: None,
                                    },
                                ],
                                close: Token(RightParen, (81,33)->(81,34)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (81,34)->(81,34)),
                            body: Body {
                                commands: [
                                    For(
                                        ForCommand {
                                            for_: Token(Identifier, (82,8)->(82,11)),
                                            for_identifier: Raw(i),
                                            for_type: None,
                                            in_: Token(Identifier, (82,14)->(82,16)),
                                            for_expr: Call(
                                                f: Identifier(Raw(range)) arg: [
                                                    Call(
                                                        f: Identifier(Raw(len)) arg: [
                                                            DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(Res),
                                                                    ),
                                                                    dot: Token(Dot, (82,30)->(82,31)),
                                                                    index: RawIdentifier {
                                                                        name: "terminals",
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                            eol: Token(EndOfLine, (82,42)->(82,42)),
                                            body: Body {
                                                commands: [
                                                    Var(
                                                        VarCommand {
                                                            var: Token(Identifier, (83,12)->(83,15)),
                                                            ty: None,
                                                            name: Raw(t),
                                                            equal: Token(Equal, (83,18)->(83,19)),
                                                            expr: Index(
                                                                IndexExpression {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(Res),
                                                                            ),
                                                                            dot: Token(Dot, (83,23)->(83,24)),
                                                                            index: RawIdentifier {
                                                                                name: "terminals",
                                                                            },
                                                                        },
                                                                    ),
                                                                    open: Token(LeftBracket, (83,33)->(83,34)),
                                                                    index: Item(
                                                                        Identifier(
                                                                            Raw(i),
                                                                        ),
                                                                    ),
                                                                    close: Token(RightBracket, (83,35)->(83,36)),
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, (83,36)->(83,36)),
                                                        },
                                                    ),
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, (84,12)->(84,14)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(EqualTo, "==", (84,23)->(84,25)),
                                                                    operator: EqualTo,
                                                                    left: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(t),
                                                                            ),
                                                                            dot: Token(Dot, (84,16)->(84,17)),
                                                                            index: RawIdentifier {
                                                                                name: "bufnr",
                                                                            },
                                                                        },
                                                                    ),
                                                                    right: Identifier(
                                                                        Raw(bufnr),
                                                                    ),
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, (84,31)->(84,31)),
                                                            body: Body {
                                                                commands: [
                                                                    Eval(
                                                                        EvalCommand {
                                                                            eval: None,
                                                                            expr: MethodCall(
                                                                                MethodCall {
                                                                                    left: DictAccess(
                                                                                        DictAccess {
                                                                                            container: Identifier(
                                                                                                Raw(Res),
                                                                                            ),
                                                                                            dot: Token(Dot, (85,19)->(85,20)),
                                                                                            index: RawIdentifier {
                                                                                                name: "terminals",
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    tok: Token(MethodArrow, (85,29)->(85,31)),
                                                                                    right: f: Identifier(Raw(remove)) arg: [
                                                                                        Identifier(
                                                                                            Raw(i),
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            eol: Token(EndOfLine, (85,40)->(85,40)),
                                                                        },
                                                                    ),
                                                                    Break(
                                                                        BreakCommand {
                                                                            br: Token(Identifier, (86,16)->(86,21)),
                                                                            eol: Token(EndOfLine, (86,21)->(86,21)),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [],
                                                            else_command: None,
                                                            endif_tok: Token(Identifier, (87,12)->(87,17)),
                                                            endif_eol: Token(EndOfLine, (87,17)->(87,17)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            endfor_: Token(Identifier, (88,8)->(88,14)),
                                            endfor_eol: Token(EndOfLine, (88,14)->(88,14)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (89,4)->(89,10)),
                            end_eol: Token(EndOfLine, (89,10)->(89,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (90,7)->(90,8)),
                                        index: RawIdentifier {
                                            name: "RemoveBufnr",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (90,20)->(90,21)),
                                right: Identifier(
                                    Raw(RemoveBufnr),
                                ),
                                eol: Token(EndOfLine, (90,33)->(90,33)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (91,0)->(91,0)),
                    ),
                    Comment(
                        Token(Comment, "# Create a new terminal and set it as the current", (92,4)->(92,53)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (93,4)->(93,7)),
                            name: Raw(CreateNewCurrent),
                            args: Signature {
                                open: Token(LeftParen, (93,24)->(93,25)),
                                params: [],
                                close: Token(RightParen, (93,25)->(93,26)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (93,26)->(93,26)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, (94,8)->(94,11)),
                                            ty: None,
                                            name: Raw(term),
                                            equal: Token(Equal, (94,17)->(94,18)),
                                            expr: Call(
                                                f: Identifier(Raw(Terminal)) arg: [],
                                            ),
                                            eol: Token(EndOfLine, (94,29)->(94,29)),
                                        },
                                    ),
                                    Comment(
                                        Token(Comment, "#term.SetName(\"MT\" .. Res.terminals->len())", (95,8)->(95,51)),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: MethodCall(
                                                MethodCall {
                                                    left: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(Res),
                                                            ),
                                                            dot: Token(Dot, (96,11)->(96,12)),
                                                            index: RawIdentifier {
                                                                name: "terminals",
                                                            },
                                                        },
                                                    ),
                                                    tok: Token(MethodArrow, (96,21)->(96,23)),
                                                    right: f: Identifier(Raw(add)) arg: [
                                                        Identifier(
                                                            Raw(term),
                                                        ),
                                                    ],
                                                },
                                            ),
                                            eol: Token(EndOfLine, (96,32)->(96,32)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(Res),
                                                        ),
                                                        dot: Token(Dot, (97,11)->(97,12)),
                                                        index: RawIdentifier {
                                                            name: "current",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, (97,20)->(97,21)),
                                                right: Identifier(
                                                    Raw(term),
                                                ),
                                                eol: Token(EndOfLine, (97,26)->(97,26)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (98,4)->(98,10)),
                            end_eol: Token(EndOfLine, (98,10)->(98,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (99,7)->(99,8)),
                                        index: RawIdentifier {
                                            name: "CreateNewCurrent",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (99,25)->(99,26)),
                                right: Identifier(
                                    Raw(CreateNewCurrent),
                                ),
                                eol: Token(EndOfLine, (99,43)->(99,43)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (100,0)->(100,0)),
                    ),
                    Comment(
                        Token(Comment, "#   - if first time (no current terminal buffer):", (101,0)->(101,49)),
                    ),
                    Comment(
                        Token(Comment, "#       - run \"Toggle\" logic", (102,0)->(102,28)),
                    ),
                    Comment(
                        Token(Comment, "#   - else", (103,0)->(103,10)),
                    ),
                    Comment(
                        Token(Comment, "#       - if terminal window is open", (104,0)->(104,36)),
                    ),
                    Comment(
                        Token(Comment, "#           - close that terminal window", (105,0)->(105,40)),
                    ),
                    Comment(
                        Token(Comment, "#       - create new terminal buffer", (106,0)->(106,36)),
                    ),
                    Comment(
                        Token(Comment, "#       - open new terminal window", (107,0)->(107,34)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (108,4)->(108,7)),
                            name: Raw(NewTerminal),
                            args: Signature {
                                open: Token(LeftParen, (108,19)->(108,20)),
                                params: [],
                                close: Token(RightParen, (108,20)->(108,21)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (108,21)->(108,21)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, (109,8)->(109,10)),
                                            condition: Prefix(
                                                PrefixExpression {
                                                    token: Token(Bang, (109,11)->(109,12)),
                                                    operator: Bang,
                                                    right: Call(
                                                        f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (109,15)->(109,16)), index: RawIdentifier { name: "HasCurrent" } }) arg: [],
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, (109,28)->(109,28)),
                                            body: Body {
                                                commands: [
                                                    Eval(
                                                        EvalCommand {
                                                            eval: None,
                                                            expr: Call(
                                                                f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (110,15)->(110,16)), index: RawIdentifier { name: "ToggleTerminal" } }) arg: [],
                                                            ),
                                                            eol: Token(EndOfLine, (110,32)->(110,32)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, (111,8)->(111,12)),
                                                    else_eol: Token(EndOfLine, (111,12)->(111,12)),
                                                    body: Body {
                                                        commands: [
                                                            If(
                                                                IfCommand {
                                                                    if_tok: Token(Identifier, (112,12)->(112,14)),
                                                                    condition: DictAccess(
                                                                        DictAccess {
                                                                            container: DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(Res),
                                                                                    ),
                                                                                    dot: Token(Dot, (112,18)->(112,19)),
                                                                                    index: RawIdentifier {
                                                                                        name: "current",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            dot: Token(Dot, (112,26)->(112,27)),
                                                                            index: RawIdentifier {
                                                                                name: "open",
                                                                            },
                                                                        },
                                                                    ),
                                                                    if_eol: Token(EndOfLine, (112,31)->(112,31)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Eval(
                                                                                EvalCommand {
                                                                                    eval: None,
                                                                                    expr: Call(
                                                                                        f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (113,19)->(113,20)), index: RawIdentifier { name: "CloseCurrent" } }) arg: [],
                                                                                    ),
                                                                                    eol: Token(EndOfLine, (113,34)->(113,34)),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    elseifs: [],
                                                                    else_command: None,
                                                                    endif_tok: Token(Identifier, (114,12)->(114,17)),
                                                                    endif_eol: Token(EndOfLine, (114,17)->(114,17)),
                                                                },
                                                            ),
                                                            Eval(
                                                                EvalCommand {
                                                                    eval: None,
                                                                    expr: Call(
                                                                        f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (115,15)->(115,16)), index: RawIdentifier { name: "CreateNewCurrent" } }) arg: [],
                                                                    ),
                                                                    eol: Token(EndOfLine, (115,34)->(115,34)),
                                                                },
                                                            ),
                                                            NoOp(
                                                                Token(EndOfLine, "\n", (116,0)->(116,0)),
                                                            ),
                                                            Eval(
                                                                EvalCommand {
                                                                    eval: None,
                                                                    expr: Call(
                                                                        f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (117,15)->(117,16)), index: RawIdentifier { name: "OpenCurrent" } }) arg: [],
                                                                    ),
                                                                    eol: Token(EndOfLine, (117,29)->(117,29)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, (118,8)->(118,13)),
                                            endif_eol: Token(EndOfLine, (118,13)->(118,13)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (119,4)->(119,10)),
                            end_eol: Token(EndOfLine, (119,10)->(119,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (120,7)->(120,8)),
                                        index: RawIdentifier {
                                            name: "NewTerminal",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (120,20)->(120,21)),
                                right: Identifier(
                                    Raw(NewTerminal),
                                ),
                                eol: Token(EndOfLine, (120,33)->(120,33)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (121,0)->(121,0)),
                    ),
                    Comment(
                        Token(Comment, "#   - if first time (no current terminal buffer):", (122,0)->(122,49)),
                    ),
                    Comment(
                        Token(Comment, "#       - create a new terminal buffer", (123,0)->(123,38)),
                    ),
                    Comment(
                        Token(Comment, "#       - set new buffer as current", (124,0)->(124,35)),
                    ),
                    Comment(
                        Token(Comment, "#   - if terminal window is open:", (125,0)->(125,33)),
                    ),
                    Comment(
                        Token(Comment, "#       - close terminal window", (126,0)->(126,31)),
                    ),
                    Comment(
                        Token(Comment, "#   - else if terminal window isnt open:", (127,0)->(127,40)),
                    ),
                    Comment(
                        Token(Comment, "#       - open terminal window", (128,0)->(128,30)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (129,4)->(129,7)),
                            name: Raw(ToggleTerminal),
                            args: Signature {
                                open: Token(LeftParen, (129,22)->(129,23)),
                                params: [],
                                close: Token(RightParen, (129,23)->(129,24)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (129,24)->(129,24)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, (130,8)->(130,10)),
                                            condition: Prefix(
                                                PrefixExpression {
                                                    token: Token(Bang, (130,11)->(130,12)),
                                                    operator: Bang,
                                                    right: Call(
                                                        f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (130,15)->(130,16)), index: RawIdentifier { name: "HasCurrent" } }) arg: [],
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, (130,28)->(130,28)),
                                            body: Body {
                                                commands: [
                                                    Eval(
                                                        EvalCommand {
                                                            eval: None,
                                                            expr: Call(
                                                                f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (131,15)->(131,16)), index: RawIdentifier { name: "CreateNewCurrent" } }) arg: [],
                                                            ),
                                                            eol: Token(EndOfLine, (131,34)->(131,34)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, (132,8)->(132,13)),
                                            endif_eol: Token(EndOfLine, (132,13)->(132,13)),
                                        },
                                    ),
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, (133,8)->(133,10)),
                                            condition: DictAccess(
                                                DictAccess {
                                                    container: DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(Res),
                                                            ),
                                                            dot: Token(Dot, (133,14)->(133,15)),
                                                            index: RawIdentifier {
                                                                name: "current",
                                                            },
                                                        },
                                                    ),
                                                    dot: Token(Dot, (133,22)->(133,23)),
                                                    index: RawIdentifier {
                                                        name: "open",
                                                    },
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, (133,27)->(133,27)),
                                            body: Body {
                                                commands: [
                                                    Eval(
                                                        EvalCommand {
                                                            eval: None,
                                                            expr: Call(
                                                                f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (134,15)->(134,16)), index: RawIdentifier { name: "CloseCurrent" } }) arg: [],
                                                            ),
                                                            eol: Token(EndOfLine, (134,30)->(134,30)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, (135,8)->(135,12)),
                                                    else_eol: Token(EndOfLine, (135,12)->(135,12)),
                                                    body: Body {
                                                        commands: [
                                                            Eval(
                                                                EvalCommand {
                                                                    eval: None,
                                                                    expr: Call(
                                                                        f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (136,15)->(136,16)), index: RawIdentifier { name: "OpenCurrent" } }) arg: [],
                                                                    ),
                                                                    eol: Token(EndOfLine, (136,29)->(136,29)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, (137,8)->(137,13)),
                                            endif_eol: Token(EndOfLine, (137,13)->(137,13)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (138,4)->(138,10)),
                            end_eol: Token(EndOfLine, (138,10)->(138,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (139,7)->(139,8)),
                                        index: RawIdentifier {
                                            name: "ToggleTerminal",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (139,23)->(139,24)),
                                right: Identifier(
                                    Raw(ToggleTerminal),
                                ),
                                eol: Token(EndOfLine, (139,39)->(139,39)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (140,0)->(140,0)),
                    ),
                    Comment(
                        Token(Comment, "# Get index of current terminal in terminal list", (141,4)->(141,52)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (142,4)->(142,7)),
                            name: Raw(CurrentIndex),
                            args: Signature {
                                open: Token(LeftParen, (142,20)->(142,21)),
                                params: [],
                                close: Token(RightParen, (142,21)->(142,22)),
                            },
                            ret: Some(
                                Number,
                            ),
                            def_eol: Token(EndOfLine, (142,30)->(142,30)),
                            body: Body {
                                commands: [
                                    Return(
                                        ReturnCommand {
                                            ret: Token(Identifier, (143,8)->(143,14)),
                                            expr: Some(
                                                Call(
                                                    f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (143,18)->(143,19)), index: RawIdentifier { name: "IndexOfTerm" } }) arg: [
                                                        DictAccess(
                                                            DictAccess {
                                                                container: Identifier(
                                                                    Raw(Res),
                                                                ),
                                                                dot: Token(Dot, (143,34)->(143,35)),
                                                                index: RawIdentifier {
                                                                    name: "current",
                                                                },
                                                            },
                                                        ),
                                                    ],
                                                ),
                                            ),
                                            eol: Token(EndOfLine, (143,43)->(143,43)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (144,4)->(144,10)),
                            end_eol: Token(EndOfLine, (144,10)->(144,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (145,7)->(145,8)),
                                        index: RawIdentifier {
                                            name: "CurrentIndex",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (145,21)->(145,22)),
                                right: Identifier(
                                    Raw(CurrentIndex),
                                ),
                                eol: Token(EndOfLine, (145,35)->(145,35)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (146,0)->(146,0)),
                    ),
                    Comment(
                        Token(Comment, "# Swap current terminal to another based on an index offset", (147,4)->(147,63)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (148,4)->(148,7)),
                            name: Raw(OffsetTerminal),
                            args: Signature {
                                open: Token(LeftParen, (148,22)->(148,23)),
                                params: [
                                    Parameter {
                                        name: Raw(offset),
                                        ty: Some(
                                            Number,
                                        ),
                                        equal: None,
                                        default_val: None,
                                    },
                                ],
                                close: Token(RightParen, (148,37)->(148,38)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (148,38)->(148,38)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, (149,8)->(149,10)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(GreaterThan, ">", (149,30)->(149,31)),
                                                    operator: GreaterThan,
                                                    left: Call(
                                                        f: Identifier(Raw(len)) arg: [
                                                            DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(Res),
                                                                    ),
                                                                    dot: Token(Dot, (149,18)->(149,19)),
                                                                    index: RawIdentifier {
                                                                        name: "terminals",
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                    right: Number(
                                                        Number(0),
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, (149,33)->(149,33)),
                                            body: Body {
                                                commands: [
                                                    Var(
                                                        VarCommand {
                                                            var: Token(Identifier, (150,12)->(150,15)),
                                                            ty: None,
                                                            name: Raw(next_index),
                                                            equal: Token(Equal, (150,27)->(150,28)),
                                                            expr: Infix(
                                                                InfixExpression {
                                                                    token: Token(Percent, "%", (150,59)->(150,60)),
                                                                    operator: Modulo,
                                                                    left: Grouped(
                                                                        GroupedExpression {
                                                                            open: Token(LeftParen, (150,29)->(150,30)),
                                                                            expr: Infix(
                                                                                InfixExpression {
                                                                                    token: Token(Plus, "+", (150,49)->(150,50)),
                                                                                    operator: Plus,
                                                                                    left: Call(
                                                                                        f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (150,33)->(150,34)), index: RawIdentifier { name: "CurrentIndex" } }) arg: [],
                                                                                    ),
                                                                                    right: Identifier(
                                                                                        Raw(offset),
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            close: Token(RightParen, (150,57)->(150,58)),
                                                                        },
                                                                    ),
                                                                    right: Call(
                                                                        f: Identifier(Raw(len)) arg: [
                                                                            DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(Res),
                                                                                    ),
                                                                                    dot: Token(Dot, (150,68)->(150,69)),
                                                                                    index: RawIdentifier {
                                                                                        name: "terminals",
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                    ),
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, (150,79)->(150,79)),
                                                        },
                                                    ),
                                                    While(
                                                        WhileCommand {
                                                            while_: Token(Identifier, (151,12)->(151,17)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(LessThan, "<", (151,29)->(151,30)),
                                                                    operator: LessThan,
                                                                    left: Identifier(
                                                                        Raw(next_index),
                                                                    ),
                                                                    right: Number(
                                                                        Number(0),
                                                                    ),
                                                                },
                                                            ),
                                                            while_eol: Token(EndOfLine, (151,32)->(151,32)),
                                                            body: Body {
                                                                commands: [
                                                                    Statement(
                                                                        Mutate(
                                                                            MutationStatement {
                                                                                left: Identifier(
                                                                                    Raw(next_index),
                                                                                ),
                                                                                modifier: Token(PlusEquals, "+=", (152,27)->(152,29)),
                                                                                right: Call(
                                                                                    f: Identifier(Raw(len)) arg: [
                                                                                        DictAccess(
                                                                                            DictAccess {
                                                                                                container: Identifier(
                                                                                                    Raw(Res),
                                                                                                ),
                                                                                                dot: Token(Dot, (152,37)->(152,38)),
                                                                                                index: RawIdentifier {
                                                                                                    name: "terminals",
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                ),
                                                                                eol: Token(EndOfLine, (152,48)->(152,48)),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                            endwhile_: Token(Identifier, (153,12)->(153,20)),
                                                            endwhile_eol: Token(EndOfLine, (153,20)->(153,20)),
                                                        },
                                                    ),
                                                    Eval(
                                                        EvalCommand {
                                                            eval: None,
                                                            expr: Call(
                                                                f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (154,15)->(154,16)), index: RawIdentifier { name: "CloseCurrent" } }) arg: [],
                                                            ),
                                                            eol: Token(EndOfLine, (154,30)->(154,30)),
                                                        },
                                                    ),
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(Res),
                                                                        ),
                                                                        dot: Token(Dot, (155,15)->(155,16)),
                                                                        index: RawIdentifier {
                                                                            name: "current",
                                                                        },
                                                                    },
                                                                ),
                                                                equals: Token(Equal, (155,24)->(155,25)),
                                                                right: Index(
                                                                    IndexExpression {
                                                                        container: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(Res),
                                                                                ),
                                                                                dot: Token(Dot, (155,29)->(155,30)),
                                                                                index: RawIdentifier {
                                                                                    name: "terminals",
                                                                                },
                                                                            },
                                                                        ),
                                                                        open: Token(LeftBracket, (155,39)->(155,40)),
                                                                        index: Item(
                                                                            Identifier(
                                                                                Raw(next_index),
                                                                            ),
                                                                        ),
                                                                        close: Token(RightBracket, (155,50)->(155,51)),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, (155,51)->(155,51)),
                                                            },
                                                        ),
                                                    ),
                                                    Eval(
                                                        EvalCommand {
                                                            eval: None,
                                                            expr: Call(
                                                                f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (156,15)->(156,16)), index: RawIdentifier { name: "OpenCurrent" } }) arg: [],
                                                            ),
                                                            eol: Token(EndOfLine, (156,29)->(156,29)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, (157,8)->(157,13)),
                                            endif_eol: Token(EndOfLine, (157,13)->(157,13)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (158,4)->(158,10)),
                            end_eol: Token(EndOfLine, (158,10)->(158,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (159,7)->(159,8)),
                                        index: RawIdentifier {
                                            name: "OffsetTerminal",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (159,23)->(159,24)),
                                right: Identifier(
                                    Raw(OffsetTerminal),
                                ),
                                eol: Token(EndOfLine, (159,39)->(159,39)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (160,0)->(160,0)),
                    ),
                    Comment(
                        Token(Comment, "# Delete the current terminal window and do NOT reopen", (161,4)->(161,58)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (162,4)->(162,7)),
                            name: Raw(DeleteCurrent),
                            args: Signature {
                                open: Token(LeftParen, (162,21)->(162,22)),
                                params: [],
                                close: Token(RightParen, (162,22)->(162,23)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (162,23)->(162,23)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, (163,8)->(163,10)),
                                            condition: Call(
                                                f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (163,14)->(163,15)), index: RawIdentifier { name: "HasCurrent" } }) arg: [],
                                            ),
                                            if_eol: Token(EndOfLine, (163,27)->(163,27)),
                                            body: Body {
                                                commands: [
                                                    Comment(
                                                        Token(Comment, "# Wipe current's buffer", (164,12)->(164,35)),
                                                    ),
                                                    Execute(
                                                        ExecuteCommand {
                                                            execute: Token(Identifier, (165,12)->(165,19)),
                                                            expr: Infix(
                                                                InfixExpression {
                                                                    token: Token(StringConcat, "..", (165,33)->(165,35)),
                                                                    operator: StringConcat,
                                                                    left: String(
                                                                        DoubleQuote(
                                                                            "bwipeout! ",
                                                                        ),
                                                                    ),
                                                                    right: DictAccess(
                                                                        DictAccess {
                                                                            container: DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(Res),
                                                                                    ),
                                                                                    dot: Token(Dot, (165,39)->(165,40)),
                                                                                    index: RawIdentifier {
                                                                                        name: "current",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            dot: Token(Dot, (165,47)->(165,48)),
                                                                            index: RawIdentifier {
                                                                                name: "bufnr",
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, (165,53)->(165,53)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, (166,8)->(166,13)),
                                            endif_eol: Token(EndOfLine, (166,13)->(166,13)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (167,4)->(167,10)),
                            end_eol: Token(EndOfLine, (167,10)->(167,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (168,7)->(168,8)),
                                        index: RawIdentifier {
                                            name: "DeleteCurrent",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (168,22)->(168,23)),
                                right: Identifier(
                                    Raw(DeleteCurrent),
                                ),
                                eol: Token(EndOfLine, (168,37)->(168,37)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (169,0)->(169,0)),
                    ),
                    Comment(
                        Token(Comment, "# Wipe all buffers managed by this", (170,4)->(170,38)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (171,4)->(171,7)),
                            name: Raw(DeleteAll),
                            args: Signature {
                                open: Token(LeftParen, (171,17)->(171,18)),
                                params: [],
                                close: Token(RightParen, (171,18)->(171,19)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (171,19)->(171,19)),
                            body: Body {
                                commands: [
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, (172,8)->(172,11)),
                                            ty: None,
                                            name: Raw(buf_nums),
                                            equal: Token(Equal, (172,21)->(172,22)),
                                            expr: Call(
                                                f: Identifier(Raw(mapnew)) arg: [
                                                    DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(Res),
                                                            ),
                                                            dot: Token(Dot, (172,33)->(172,34)),
                                                            index: RawIdentifier {
                                                                name: "terminals",
                                                            },
                                                        },
                                                    ),
                                                    Lambda(
                                                        Lambda {
                                                            args: Signature {
                                                                open: Token(LeftParen, (172,45)->(172,46)),
                                                                params: [
                                                                    Parameter {
                                                                        name: Raw(_),
                                                                        ty: None,
                                                                        equal: None,
                                                                        default_val: None,
                                                                    },
                                                                    Parameter {
                                                                        name: Raw(v),
                                                                        ty: None,
                                                                        equal: None,
                                                                        default_val: None,
                                                                    },
                                                                ],
                                                                close: Token(RightParen, (172,50)->(172,51)),
                                                            },
                                                            ret: None,
                                                            arrow: Token(Arrow, (172,52)->(172,54)),
                                                            body: Body {
                                                                commands: [
                                                                    Return(
                                                                        ReturnCommand {
                                                                            ret: Token(Virtual, (0,0)->(0,0)),
                                                                            expr: Some(
                                                                                DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(v),
                                                                                        ),
                                                                                        dot: Token(Dot, (172,56)->(172,57)),
                                                                                        index: RawIdentifier {
                                                                                            name: "bufnr",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            eol: Token(Virtual, (0,0)->(0,0)),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                            ),
                                            eol: Token(EndOfLine, (172,63)->(172,63)),
                                        },
                                    ),
                                    For(
                                        ForCommand {
                                            for_: Token(Identifier, (173,8)->(173,11)),
                                            for_identifier: Raw(buf_num),
                                            for_type: None,
                                            in_: Token(Identifier, (173,20)->(173,22)),
                                            for_expr: Identifier(
                                                Raw(buf_nums),
                                            ),
                                            eol: Token(EndOfLine, (173,31)->(173,31)),
                                            body: Body {
                                                commands: [
                                                    Execute(
                                                        ExecuteCommand {
                                                            execute: Token(Identifier, (174,12)->(174,19)),
                                                            expr: Infix(
                                                                InfixExpression {
                                                                    token: Token(StringConcat, "..", (174,33)->(174,35)),
                                                                    operator: StringConcat,
                                                                    left: String(
                                                                        DoubleQuote(
                                                                            "bwipeout! ",
                                                                        ),
                                                                    ),
                                                                    right: Identifier(
                                                                        Raw(buf_num),
                                                                    ),
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, (174,43)->(174,43)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            endfor_: Token(Identifier, (175,8)->(175,14)),
                                            endfor_eol: Token(EndOfLine, (175,14)->(175,14)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(Res),
                                                        ),
                                                        dot: Token(Dot, (176,11)->(176,12)),
                                                        index: RawIdentifier {
                                                            name: "current",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, (176,20)->(176,21)),
                                                right: Dict(
                                                    DictLiteral {
                                                        open: Token(LeftBrace, (176,22)->(176,23)),
                                                        elements: [],
                                                        close: Token(RightBrace, (176,23)->(176,24)),
                                                    },
                                                ),
                                                eol: Token(EndOfLine, (176,24)->(176,24)),
                                            },
                                        ),
                                    ),
                                    NoOp(
                                        Token(EndOfLine, "\n", (177,0)->(177,0)),
                                    ),
                                    Eval(
                                        EvalCommand {
                                            eval: None,
                                            expr: Call(
                                                f: Identifier(Raw(Assert)) arg: [
                                                    Infix(
                                                        InfixExpression {
                                                            token: Token(EqualTo, "==", (178,34)->(178,36)),
                                                            operator: EqualTo,
                                                            left: Call(
                                                                f: Identifier(Raw(len)) arg: [
                                                                    DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(Res),
                                                                            ),
                                                                            dot: Token(Dot, (178,22)->(178,23)),
                                                                            index: RawIdentifier {
                                                                                name: "terminals",
                                                                            },
                                                                        },
                                                                    ),
                                                                ],
                                                            ),
                                                            right: Number(
                                                                Number(0),
                                                            ),
                                                        },
                                                    ),
                                                    String(
                                                        DoubleQuote(
                                                            "DeleteAll did not clear manager's terminals list",
                                                        ),
                                                    ),
                                                ],
                                            ),
                                            eol: Token(EndOfLine, (178,91)->(178,91)),
                                        },
                                    ),
                                    Statement(
                                        Assign(
                                            AssignStatement {
                                                left: DictAccess(
                                                    DictAccess {
                                                        container: Identifier(
                                                            Raw(Res),
                                                        ),
                                                        dot: Token(Dot, (179,11)->(179,12)),
                                                        index: RawIdentifier {
                                                            name: "terminals",
                                                        },
                                                    },
                                                ),
                                                equals: Token(Equal, (179,22)->(179,23)),
                                                right: Array(
                                                    ArrayLiteral {
                                                        open: Token(LeftBracket, (179,24)->(179,25)),
                                                        elements: [],
                                                        close: Token(RightBracket, (179,25)->(179,26)),
                                                    },
                                                ),
                                                eol: Token(Comment, (179,27)->(179,72)),
                                            },
                                        ),
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (180,4)->(180,10)),
                            end_eol: Token(EndOfLine, (180,10)->(180,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (181,7)->(181,8)),
                                        index: RawIdentifier {
                                            name: "DeleteAll",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (181,18)->(181,19)),
                                right: Identifier(
                                    Raw(DeleteAll),
                                ),
                                eol: Token(EndOfLine, (181,29)->(181,29)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (182,0)->(182,0)),
                    ),
                    Comment(
                        Token(Comment, "# Prints out all active terminals", (183,4)->(183,37)),
                    ),
                    Comment(
                        Token(Comment, "# i.e. 0 1 [2] 3", (184,4)->(184,20)),
                    ),
                    Comment(
                        Token(Comment, "# if terminal at index 2 is the current", (185,4)->(185,43)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (186,4)->(186,7)),
                            name: Raw(ListTerminals),
                            args: Signature {
                                open: Token(LeftParen, (186,21)->(186,22)),
                                params: [],
                                close: Token(RightParen, (186,22)->(186,23)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (186,23)->(186,23)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, (187,8)->(187,10)),
                                            condition: Infix(
                                                InfixExpression {
                                                    token: Token(EqualTo, "==", (187,30)->(187,32)),
                                                    operator: EqualTo,
                                                    left: Call(
                                                        f: Identifier(Raw(len)) arg: [
                                                            DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(Res),
                                                                    ),
                                                                    dot: Token(Dot, (187,18)->(187,19)),
                                                                    index: RawIdentifier {
                                                                        name: "terminals",
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                    right: Number(
                                                        Number(0),
                                                    ),
                                                },
                                            ),
                                            if_eol: Token(EndOfLine, (187,34)->(187,34)),
                                            body: Body {
                                                commands: [
                                                    Echo(
                                                        EchoCommand {
                                                            echo: Token(Identifier, (188,12)->(188,16)),
                                                            expr: String(
                                                                DoubleQuote(
                                                                    "No terminals active",
                                                                ),
                                                            ),
                                                            eol: Token(EndOfLine, (188,38)->(188,38)),
                                                        },
                                                    ),
                                                    Return(
                                                        ReturnCommand {
                                                            ret: Token(Identifier, (189,12)->(189,18)),
                                                            expr: None,
                                                            eol: Token(EndOfLine, (189,18)->(189,18)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: None,
                                            endif_tok: Token(Identifier, (190,8)->(190,13)),
                                            endif_eol: Token(EndOfLine, (190,13)->(190,13)),
                                        },
                                    ),
                                    Var(
                                        VarCommand {
                                            var: Token(Identifier, (191,8)->(191,13)),
                                            ty: None,
                                            name: Raw(indices),
                                            equal: Token(Equal, (191,22)->(191,23)),
                                            expr: Array(
                                                ArrayLiteral {
                                                    open: Token(LeftBracket, (191,24)->(191,25)),
                                                    elements: [],
                                                    close: Token(RightBracket, (191,25)->(191,26)),
                                                },
                                            ),
                                            eol: Token(EndOfLine, (191,26)->(191,26)),
                                        },
                                    ),
                                    For(
                                        ForCommand {
                                            for_: Token(Identifier, (192,8)->(192,11)),
                                            for_identifier: Raw(i),
                                            for_type: None,
                                            in_: Token(Identifier, (192,14)->(192,16)),
                                            for_expr: Call(
                                                f: Identifier(Raw(range)) arg: [
                                                    Call(
                                                        f: Identifier(Raw(len)) arg: [
                                                            DictAccess(
                                                                DictAccess {
                                                                    container: Identifier(
                                                                        Raw(Res),
                                                                    ),
                                                                    dot: Token(Dot, (192,30)->(192,31)),
                                                                    index: RawIdentifier {
                                                                        name: "terminals",
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                            eol: Token(EndOfLine, (192,42)->(192,42)),
                                            body: Body {
                                                commands: [
                                                    Var(
                                                        VarCommand {
                                                            var: Token(Identifier, (193,12)->(193,17)),
                                                            ty: None,
                                                            name: Raw(term),
                                                            equal: Token(Equal, (193,23)->(193,24)),
                                                            expr: Index(
                                                                IndexExpression {
                                                                    container: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(Res),
                                                                            ),
                                                                            dot: Token(Dot, (193,28)->(193,29)),
                                                                            index: RawIdentifier {
                                                                                name: "terminals",
                                                                            },
                                                                        },
                                                                    ),
                                                                    open: Token(LeftBracket, (193,38)->(193,39)),
                                                                    index: Item(
                                                                        Identifier(
                                                                            Raw(i),
                                                                        ),
                                                                    ),
                                                                    close: Token(RightBracket, (193,40)->(193,41)),
                                                                },
                                                            ),
                                                            eol: Token(EndOfLine, (193,41)->(193,41)),
                                                        },
                                                    ),
                                                    If(
                                                        IfCommand {
                                                            if_tok: Token(Identifier, (194,12)->(194,14)),
                                                            condition: Infix(
                                                                InfixExpression {
                                                                    token: Token(EqualTo, "==", (194,26)->(194,28)),
                                                                    operator: EqualTo,
                                                                    left: DictAccess(
                                                                        DictAccess {
                                                                            container: Identifier(
                                                                                Raw(term),
                                                                            ),
                                                                            dot: Token(Dot, (194,19)->(194,20)),
                                                                            index: RawIdentifier {
                                                                                name: "bufnr",
                                                                            },
                                                                        },
                                                                    ),
                                                                    right: DictAccess(
                                                                        DictAccess {
                                                                            container: DictAccess(
                                                                                DictAccess {
                                                                                    container: Identifier(
                                                                                        Raw(Res),
                                                                                    ),
                                                                                    dot: Token(Dot, (194,32)->(194,33)),
                                                                                    index: RawIdentifier {
                                                                                        name: "current",
                                                                                    },
                                                                                },
                                                                            ),
                                                                            dot: Token(Dot, (194,40)->(194,41)),
                                                                            index: RawIdentifier {
                                                                                name: "bufnr",
                                                                            },
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            if_eol: Token(EndOfLine, (194,46)->(194,46)),
                                                            body: Body {
                                                                commands: [
                                                                    Eval(
                                                                        EvalCommand {
                                                                            eval: None,
                                                                            expr: MethodCall(
                                                                                MethodCall {
                                                                                    left: Identifier(
                                                                                        Raw(indices),
                                                                                    ),
                                                                                    tok: Token(MethodArrow, (195,23)->(195,25)),
                                                                                    right: f: Identifier(Raw(add)) arg: [
                                                                                        Infix(
                                                                                            InfixExpression {
                                                                                                token: Token(StringConcat, "..", (195,38)->(195,40)),
                                                                                                operator: StringConcat,
                                                                                                left: Infix(
                                                                                                    InfixExpression {
                                                                                                        token: Token(StringConcat, "..", (195,33)->(195,35)),
                                                                                                        operator: StringConcat,
                                                                                                        left: String(
                                                                                                            SingleQuote(
                                                                                                                "[",
                                                                                                            ),
                                                                                                        ),
                                                                                                        right: Identifier(
                                                                                                            Raw(i),
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                                right: String(
                                                                                                    SingleQuote(
                                                                                                        "]",
                                                                                                    ),
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            eol: Token(EndOfLine, (195,45)->(195,45)),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                            elseifs: [],
                                                            else_command: Some(
                                                                ElseCommand {
                                                                    else_tok: Token(Identifier, (196,12)->(196,16)),
                                                                    else_eol: Token(EndOfLine, (196,16)->(196,16)),
                                                                    body: Body {
                                                                        commands: [
                                                                            Eval(
                                                                                EvalCommand {
                                                                                    eval: None,
                                                                                    expr: MethodCall(
                                                                                        MethodCall {
                                                                                            left: Identifier(
                                                                                                Raw(indices),
                                                                                            ),
                                                                                            tok: Token(MethodArrow, (197,23)->(197,25)),
                                                                                            right: f: Identifier(Raw(add)) arg: [
                                                                                                Identifier(
                                                                                                    Raw(i),
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                    eol: Token(EndOfLine, (197,31)->(197,31)),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                            endif_tok: Token(Identifier, (198,12)->(198,17)),
                                                            endif_eol: Token(EndOfLine, (198,17)->(198,17)),
                                                        },
                                                    ),
                                                ],
                                            },
                                            endfor_: Token(Identifier, (199,8)->(199,14)),
                                            endfor_eol: Token(EndOfLine, (199,14)->(199,14)),
                                        },
                                    ),
                                    Echo(
                                        EchoCommand {
                                            echo: Token(Identifier, (200,8)->(200,12)),
                                            expr: Call(
                                                f: Identifier(Raw(join)) arg: [
                                                    Identifier(
                                                        Raw(indices),
                                                    ),
                                                    String(
                                                        SingleQuote(
                                                            " ",
                                                        ),
                                                    ),
                                                ],
                                            ),
                                            eol: Token(EndOfLine, (200,31)->(200,31)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (201,4)->(201,10)),
                            end_eol: Token(EndOfLine, (201,10)->(201,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (202,7)->(202,8)),
                                        index: RawIdentifier {
                                            name: "ListTerminals",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (202,22)->(202,23)),
                                right: Identifier(
                                    Raw(ListTerminals),
                                ),
                                eol: Token(EndOfLine, (202,37)->(202,37)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (203,0)->(203,0)),
                    ),
                    Def(
                        DefCommand {
                            def: Token(Identifier, (204,4)->(204,7)),
                            name: Raw(UpdateState),
                            args: Signature {
                                open: Token(LeftParen, (204,19)->(204,20)),
                                params: [],
                                close: Token(RightParen, (204,20)->(204,21)),
                            },
                            ret: None,
                            def_eol: Token(EndOfLine, (204,21)->(204,21)),
                            body: Body {
                                commands: [
                                    If(
                                        IfCommand {
                                            if_tok: Token(Identifier, (205,8)->(205,10)),
                                            condition: Call(
                                                f: Identifier(Raw(empty)) arg: [
                                                    DictAccess(
                                                        DictAccess {
                                                            container: Identifier(
                                                                Raw(Res),
                                                            ),
                                                            dot: Token(Dot, (205,20)->(205,21)),
                                                            index: RawIdentifier {
                                                                name: "terminals",
                                                            },
                                                        },
                                                    ),
                                                ],
                                            ),
                                            if_eol: Token(EndOfLine, (205,31)->(205,31)),
                                            body: Body {
                                                commands: [
                                                    Statement(
                                                        Assign(
                                                            AssignStatement {
                                                                left: DictAccess(
                                                                    DictAccess {
                                                                        container: Identifier(
                                                                            Raw(Res),
                                                                        ),
                                                                        dot: Token(Dot, (206,15)->(206,16)),
                                                                        index: RawIdentifier {
                                                                            name: "current",
                                                                        },
                                                                    },
                                                                ),
                                                                equals: Token(Equal, (206,24)->(206,25)),
                                                                right: Dict(
                                                                    DictLiteral {
                                                                        open: Token(LeftBrace, (206,26)->(206,27)),
                                                                        elements: [],
                                                                        close: Token(RightBrace, (206,27)->(206,28)),
                                                                    },
                                                                ),
                                                                eol: Token(EndOfLine, (206,28)->(206,28)),
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            },
                                            elseifs: [],
                                            else_command: Some(
                                                ElseCommand {
                                                    else_tok: Token(Identifier, (207,8)->(207,12)),
                                                    else_eol: Token(EndOfLine, (207,12)->(207,12)),
                                                    body: Body {
                                                        commands: [
                                                            Statement(
                                                                Assign(
                                                                    AssignStatement {
                                                                        left: DictAccess(
                                                                            DictAccess {
                                                                                container: Identifier(
                                                                                    Raw(Res),
                                                                                ),
                                                                                dot: Token(Dot, (208,15)->(208,16)),
                                                                                index: RawIdentifier {
                                                                                    name: "current",
                                                                                },
                                                                            },
                                                                        ),
                                                                        equals: Token(Equal, (208,24)->(208,25)),
                                                                        right: Index(
                                                                            IndexExpression {
                                                                                container: DictAccess(
                                                                                    DictAccess {
                                                                                        container: Identifier(
                                                                                            Raw(Res),
                                                                                        ),
                                                                                        dot: Token(Dot, (208,29)->(208,30)),
                                                                                        index: RawIdentifier {
                                                                                            name: "terminals",
                                                                                        },
                                                                                    },
                                                                                ),
                                                                                open: Token(LeftBracket, (208,39)->(208,40)),
                                                                                index: Item(
                                                                                    Number(
                                                                                        Number(0),
                                                                                    ),
                                                                                ),
                                                                                close: Token(RightBracket, (208,41)->(208,42)),
                                                                            },
                                                                        ),
                                                                        eol: Token(EndOfLine, (208,42)->(208,42)),
                                                                    },
                                                                ),
                                                            ),
                                                            Eval(
                                                                EvalCommand {
                                                                    eval: None,
                                                                    expr: Call(
                                                                        f: DictAccess(DictAccess { container: Identifier(Raw(Res)), dot: Token(Dot, (209,15)->(209,16)), index: RawIdentifier { name: "OpenCurrent" } }) arg: [],
                                                                    ),
                                                                    eol: Token(EndOfLine, (209,29)->(209,29)),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                },
                                            ),
                                            endif_tok: Token(Identifier, (210,8)->(210,13)),
                                            endif_eol: Token(EndOfLine, (210,13)->(210,13)),
                                        },
                                    ),
                                ],
                            },
                            enddef: Token(Identifier, (211,4)->(211,10)),
                            end_eol: Token(EndOfLine, (211,10)->(211,10)),
                        },
                    ),
                    Statement(
                        Assign(
                            AssignStatement {
                                left: DictAccess(
                                    DictAccess {
                                        container: Identifier(
                                            Raw(Res),
                                        ),
                                        dot: Token(Dot, (212,7)->(212,8)),
                                        index: RawIdentifier {
                                            name: "UpdateState",
                                        },
                                    },
                                ),
                                equals: Token(Equal, (212,20)->(212,21)),
                                right: Identifier(
                                    Raw(UpdateState),
                                ),
                                eol: Token(EndOfLine, (212,33)->(212,33)),
                            },
                        ),
                    ),
                    NoOp(
                        Token(EndOfLine, "\n", (213,0)->(213,0)),
                    ),
                    Return(
                        ReturnCommand {
                            ret: Token(Identifier, (214,4)->(214,10)),
                            expr: Some(
                                Identifier(
                                    Raw(Res),
                                ),
                            ),
                            eol: Token(EndOfLine, (214,14)->(214,14)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (215,0)->(215,6)),
            end_eol: Token(EndOfLine, (215,6)->(215,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (216,0)->(216,0)),
    ),
    Comment(
        Token(Comment, "####################################", (217,0)->(217,36)),
    ),
    Comment(
        Token(Comment, "# Helpers", (218,0)->(218,9)),
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (219,0)->(219,3)),
            name: Raw(Assert),
            args: Signature {
                open: Token(LeftParen, (219,10)->(219,11)),
                params: [
                    Parameter {
                        name: Raw(cond),
                        ty: Some(
                            BoolOrNumber,
                        ),
                        equal: None,
                        default_val: None,
                    },
                    Parameter {
                        name: Raw(msg),
                        ty: Some(
                            String,
                        ),
                        equal: None,
                        default_val: None,
                    },
                ],
                close: Token(RightParen, (219,34)->(219,35)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (219,35)->(219,35)),
            body: Body {
                commands: [
                    If(
                        IfCommand {
                            if_tok: Token(Identifier, (220,4)->(220,6)),
                            condition: Prefix(
                                PrefixExpression {
                                    token: Token(Bang, (220,7)->(220,8)),
                                    operator: Bang,
                                    right: Identifier(
                                        Raw(cond),
                                    ),
                                },
                            ),
                            if_eol: Token(EndOfLine, (220,12)->(220,12)),
                            body: Body {
                                commands: [
                                    SharedCommand(
                                        SharedCommand {
                                            contents: "        throw msg",
                                            eol: Token(EndOfLine, (221,17)->(221,17)),
                                        },
                                    ),
                                ],
                            },
                            elseifs: [],
                            else_command: None,
                            endif_tok: Token(Identifier, (222,4)->(222,9)),
                            endif_eol: Token(EndOfLine, (222,9)->(222,9)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (223,0)->(223,6)),
            end_eol: Token(EndOfLine, (223,6)->(223,6)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (224,0)->(224,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (225,0)->(225,5)),
            ty: None,
            name: Raw(manager),
            equal: Token(Equal, (225,14)->(225,15)),
            expr: Call(
                f: Identifier(Raw(TerminalManager)) arg: [],
            ),
            eol: Token(EndOfLine, (225,33)->(225,33)),
        },
    ),
    ExportCommand(
        ExportCommand {
            export: Token(Identifier, (226,0)->(226,6)),
            command: Def(
                DefCommand {
                    def: Token(Identifier, (226,7)->(226,10)),
                    name: Scope(ScopedIdentifier { scope: Global, colon: Token(Colon, (226,12)->(226,13)), accessor: Raw(GetManager) }),
                    args: Signature {
                        open: Token(LeftParen, (226,23)->(226,24)),
                        params: [],
                        close: Token(RightParen, (226,24)->(226,25)),
                    },
                    ret: Some(
                        Dict {
                            open: Token(AngleLeft, (226,31)->(226,32)),
                            inner: Any,
                            close: Token(GreaterThan, (226,35)->(226,36)),
                        },
                    ),
                    def_eol: Token(EndOfLine, (226,36)->(226,36)),
                    body: Body {
                        commands: [
                            Return(
                                ReturnCommand {
                                    ret: Token(Identifier, (227,4)->(227,10)),
                                    expr: Some(
                                        Identifier(
                                            Raw(manager),
                                        ),
                                    ),
                                    eol: Token(EndOfLine, (227,18)->(227,18)),
                                },
                            ),
                        ],
                    },
                    enddef: Token(Identifier, (228,0)->(228,6)),
                    end_eol: Token(EndOfLine, (228,6)->(228,6)),
                },
            ),
        },
    ),
]
