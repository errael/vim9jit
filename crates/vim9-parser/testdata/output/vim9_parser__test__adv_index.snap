---
source: crates/vim9-parser/src/lib.rs
assertion_line: 2834
expression: snapshot_parsing(contents)
---
[
    Vim9Script(
        Vim9ScriptCommand {
            noclear: false,
            eol: Token(EndOfLine, (0,10)->(0,10)),
        },
    ),
    NoOp(
        Token(EndOfLine, "\n", (1,0)->(1,0)),
    ),
    Var(
        VarCommand {
            var: Token(Identifier, (2,0)->(2,3)),
            ty: None,
            name: Raw(l),
            equal: Token(Equal, (2,6)->(2,7)),
            expr: Array(
                ArrayLiteral {
                    open: Token(LeftBracket, (2,8)->(2,9)),
                    elements: [
                        Number(
                            Number(1),
                        ),
                        Number(
                            Number(2),
                        ),
                        Number(
                            Number(3),
                        ),
                    ],
                    close: Token(RightBracket, (2,16)->(2,17)),
                },
            ),
            eol: Token(EndOfLine, (2,17)->(2,17)),
        },
    ),
    Def(
        DefCommand {
            def: Token(Identifier, (3,0)->(3,3)),
            name: Raw(Test_expression),
            args: Signature {
                open: Token(LeftParen, (3,19)->(3,20)),
                params: [],
                close: Token(RightParen, (3,20)->(3,21)),
            },
            ret: None,
            def_eol: Token(EndOfLine, (3,21)->(3,21)),
            body: Body {
                commands: [
                    Eval(
                        EvalCommand {
                            eval: None,
                            expr: Call(
                                f: Identifier(Raw(assert_equal)) arg: [
                                    Index(
                                        IndexExpression {
                                            container: Identifier(
                                                Raw(l),
                                            ),
                                            open: Token(LeftBracket, (4,16)->(4,17)),
                                            index: Slice(
                                                VimSlice {
                                                    start: Some(
                                                        Prefix(
                                                            PrefixExpression {
                                                                token: Token(Minus, (4,17)->(4,18)),
                                                                operator: Minus,
                                                                right: Number(
                                                                    Number(1),
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    colon: Token(SpacedColon, (4,20)->(4,21)),
                                                    finish: None,
                                                },
                                            ),
                                            close: Token(RightBracket, (4,21)->(4,22)),
                                        },
                                    ),
                                    Array(
                                        ArrayLiteral {
                                            open: Token(LeftBracket, (4,24)->(4,25)),
                                            elements: [
                                                Number(
                                                    Number(3),
                                                ),
                                            ],
                                            close: Token(RightBracket, (4,26)->(4,27)),
                                        },
                                    ),
                                ],
                            ),
                            eol: Token(EndOfLine, (4,28)->(4,28)),
                        },
                    ),
                ],
            },
            enddef: Token(Identifier, (5,0)->(5,6)),
            end_eol: Token(EndOfLine, (5,6)->(5,6)),
        },
    ),
]
