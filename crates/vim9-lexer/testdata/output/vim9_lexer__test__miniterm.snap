---
source: crates/vim9-lexer/src/lib.rs
assertion_line: 1126
expression: snapshot_lexing(contents)
---
vim9script
^^^^^^^^^^ Token(Identifier, "vim9script", (0,0)->(0,10))
           Token(EndOfLine, "\n", (0,10)->(0,10))

 Token(EndOfLine, "\n", (1,0)->(1,0))
# Thanks to https://github.com/hahdookin/miniterm.vim for the test file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Thanks to https://github.com/hahdookin/miniterm.vim for the test file", (2,0)->(2,71))

 Token(EndOfLine, "\n", (3,0)->(3,0))
# Configuration
^^^^^^^^^^^^^^^ Token(Comment, "# Configuration", (4,0)->(4,15))
# g:miniterm_proportion = get(g:, "miniterm_proportion", 0.28)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# g:miniterm_proportion = get(g:, \"miniterm_proportion\", 0.28)", (5,0)->(5,62))
# g:miniterm_position = get(g:, "miniterm_position", "bottom")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# g:miniterm_position = get(g:, \"miniterm_position\", \"bottom\")", (6,0)->(6,62))

 Token(EndOfLine, "\n", (7,0)->(7,0))
# These two functions handle destroying buffers.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# These two functions handle destroying buffers.", (8,0)->(8,48))
# Slight workaround to event handling while also
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Slight workaround to event handling while also", (9,0)->(9,48))
# being able to reference the "manager" in the
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# being able to reference the \"manager\" in the", (10,0)->(10,46))
# event handling code.
^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# event handling code.", (11,0)->(11,22))
def g:AttachWipeoutHandler(term: dict<any>)
^^^ Token(Identifier, "def", (12,0)->(12,3))
    ^ Token(Identifier, "g", (12,4)->(12,5))
     ^ Token(Colon, ":", (12,5)->(12,6))
      ^^^^^^^^^^^^^^^^^^^^ Token(Identifier, "AttachWipeoutHandler", (12,6)->(12,26))
                          ^ Token(LeftParen, "(", (12,26)->(12,27))
                           ^^^^ Token(Identifier, "term", (12,27)->(12,31))
                               ^^ Token(SpacedColon, ": ", (12,31)->(12,33))
                                 ^^^^ Token(Identifier, "dict", (12,33)->(12,37))
                                     ^ Token(AngleLeft, "<", (12,37)->(12,38))
                                      ^^^ Token(Identifier, "any", (12,38)->(12,41))
                                         ^ Token(AngleRight, ">", (12,41)->(12,42))
                                          ^ Token(RightParen, ")", (12,42)->(12,43))
                                            Token(EndOfLine, "\n", (12,43)->(12,43))
    execute "autocmd BufWipeout <buffer=" .. term.bufnr .. "> vim9 miniterm#GetManager().RemoveBufnr(" .. term.bufnr .. ") | miniterm#GetManager().UpdateState()"
    ^^^^^^^ Token(Identifier, "execute", (13,4)->(13,11))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(DoubleQuoteString, "autocmd BufWipeout <buffer=", (13,13)->(13,39))
                                          ^^ Token(StringConcat, "..", (13,42)->(13,44))
                                             ^^^^ Token(Identifier, "term", (13,45)->(13,49))
                                                 ^ Token(Dot, ".", (13,49)->(13,50))
                                                  ^^^^^ Token(Identifier, "bufnr", (13,50)->(13,55))
                                                        ^^ Token(StringConcat, "..", (13,56)->(13,58))
                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(DoubleQuoteString, "> vim9 miniterm#GetManager().RemoveBufnr(", (13,60)->(13,100))
                                                                                                       ^^ Token(StringConcat, "..", (13,103)->(13,105))
                                                                                                          ^^^^ Token(Identifier, "term", (13,106)->(13,110))
                                                                                                              ^ Token(Dot, ".", (13,110)->(13,111))
                                                                                                               ^^^^^ Token(Identifier, "bufnr", (13,111)->(13,116))
                                                                                                                     ^^ Token(StringConcat, "..", (13,117)->(13,119))
                                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(DoubleQuoteString, ") | miniterm#GetManager().UpdateState()", (13,121)->(13,159))
                                                                                                                                                                  Token(EndOfLine, "\n", (13,161)->(13,161))
    execute "autocmd BufDelete <buffer=" .. term.bufnr .. "> vim9 miniterm#GetManager().RemoveBufnr(" .. term.bufnr .. ") | miniterm#GetManager().UpdateState()"
    ^^^^^^^ Token(Identifier, "execute", (14,4)->(14,11))
             ^^^^^^^^^^^^^^^^^^^^^^^^^ Token(DoubleQuoteString, "autocmd BufDelete <buffer=", (14,13)->(14,38))
                                         ^^ Token(StringConcat, "..", (14,41)->(14,43))
                                            ^^^^ Token(Identifier, "term", (14,44)->(14,48))
                                                ^ Token(Dot, ".", (14,48)->(14,49))
                                                 ^^^^^ Token(Identifier, "bufnr", (14,49)->(14,54))
                                                       ^^ Token(StringConcat, "..", (14,55)->(14,57))
                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(DoubleQuoteString, "> vim9 miniterm#GetManager().RemoveBufnr(", (14,59)->(14,99))
                                                                                                      ^^ Token(StringConcat, "..", (14,102)->(14,104))
                                                                                                         ^^^^ Token(Identifier, "term", (14,105)->(14,109))
                                                                                                             ^ Token(Dot, ".", (14,109)->(14,110))
                                                                                                              ^^^^^ Token(Identifier, "bufnr", (14,110)->(14,115))
                                                                                                                    ^^ Token(StringConcat, "..", (14,116)->(14,118))
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(DoubleQuoteString, ") | miniterm#GetManager().UpdateState()", (14,120)->(14,158))
                                                                                                                                                                 Token(EndOfLine, "\n", (14,160)->(14,160))
enddef
^^^^^^ Token(Identifier, "enddef", (15,0)->(15,6))
       Token(EndOfLine, "\n", (15,6)->(15,6))

 Token(EndOfLine, "\n", (16,0)->(16,0))
# Terminal class
^^^^^^^^^^^^^^^^ Token(Comment, "# Terminal class", (17,0)->(17,16))
def Terminal(): dict<any>
^^^ Token(Identifier, "def", (18,0)->(18,3))
    ^^^^^^^^ Token(Identifier, "Terminal", (18,4)->(18,12))
            ^ Token(LeftParen, "(", (18,12)->(18,13))
             ^ Token(RightParen, ")", (18,13)->(18,14))
              ^^ Token(SpacedColon, ": ", (18,14)->(18,16))
                ^^^^ Token(Identifier, "dict", (18,16)->(18,20))
                    ^ Token(AngleLeft, "<", (18,20)->(18,21))
                     ^^^ Token(Identifier, "any", (18,21)->(18,24))
                        ^ Token(GreaterThan, ">", (18,24)->(18,25))
                          Token(EndOfLine, "\n", (18,25)->(18,25))
    var Res: dict<any> = {
    ^^^ Token(Identifier, "var", (19,4)->(19,7))
        ^^^ Token(Identifier, "Res", (19,8)->(19,11))
           ^^ Token(SpacedColon, ": ", (19,11)->(19,13))
             ^^^^ Token(Identifier, "dict", (19,13)->(19,17))
                 ^ Token(AngleLeft, "<", (19,17)->(19,18))
                  ^^^ Token(Identifier, "any", (19,18)->(19,21))
                     ^ Token(GreaterThan, ">", (19,21)->(19,22))
                       ^ Token(Equal, "=", (19,23)->(19,24))
                         ^ Token(LeftBrace, "{", (19,25)->(19,26))
                           Token(EndOfLine, "\n", (19,26)->(19,26))
        bufnr: 0,
        ^^^^^ Token(Identifier, "bufnr", (20,8)->(20,13))
             ^^ Token(SpacedColon, ": ", (20,13)->(20,15))
               ^ Token(Integer, "0", (20,15)->(20,16))
                ^ Token(Comma, ",", (20,16)->(20,17))
                  Token(EndOfLine, "\n", (20,17)->(20,17))
        winnr: 0,
        ^^^^^ Token(Identifier, "winnr", (21,8)->(21,13))
             ^^ Token(SpacedColon, ": ", (21,13)->(21,15))
               ^ Token(Integer, "0", (21,15)->(21,16))
                ^ Token(Comma, ",", (21,16)->(21,17))
                  Token(EndOfLine, "\n", (21,17)->(21,17))
        open: 0,
        ^^^^ Token(Identifier, "open", (22,8)->(22,12))
            ^^ Token(SpacedColon, ": ", (22,12)->(22,14))
              ^ Token(Integer, "0", (22,14)->(22,15))
               ^ Token(Comma, ",", (22,15)->(22,16))
                 Token(EndOfLine, "\n", (22,16)->(22,16))
    }
    ^ Token(RightBrace, "}", (23,4)->(23,5))
      Token(EndOfLine, "\n", (23,5)->(23,5))

 Token(EndOfLine, "\n", (24,0)->(24,0))
    Res.bufnr = term_start($SHELL, { 
    ^^^ Token(Identifier, "Res", (25,4)->(25,7))
       ^ Token(Dot, ".", (25,7)->(25,8))
        ^^^^^ Token(Identifier, "bufnr", (25,8)->(25,13))
              ^ Token(Equal, "=", (25,14)->(25,15))
                ^^^^^^^^^^ Token(Identifier, "term_start", (25,16)->(25,26))
                          ^ Token(LeftParen, "(", (25,26)->(25,27))
                            ^^^^ Token(EnvironmentVariable, "SHELL", (25,28)->(25,32))
                                 ^ Token(Comma, ",", (25,33)->(25,34))
                                   ^ Token(LeftBrace, "{", (25,35)->(25,36))
                                      Token(EndOfLine, "\n", (25,37)->(25,37))
        hidden: 1, 
        ^^^^^^ Token(Identifier, "hidden", (26,8)->(26,14))
              ^^ Token(SpacedColon, ": ", (26,14)->(26,16))
                ^ Token(Integer, "1", (26,16)->(26,17))
                 ^ Token(Comma, ",", (26,17)->(26,18))
                    Token(EndOfLine, "\n", (26,19)->(26,19))
        term_kill: 'hup' 
        ^^^^^^^^^ Token(Identifier, "term_kill", (27,8)->(27,17))
                 ^^ Token(SpacedColon, ": ", (27,17)->(27,19))
                    ^^ Token(SingleQuoteString, "hup", (27,20)->(27,22))
                          Token(EndOfLine, "\n", (27,25)->(27,25))
    })
    ^ Token(RightBrace, "}", (28,4)->(28,5))
     ^ Token(RightParen, ")", (28,5)->(28,6))
       Token(EndOfLine, "\n", (28,6)->(28,6))
    setbufvar(Res.bufnr, "&buflisted", 0)
    ^^^^^^^^^ Token(Identifier, "setbufvar", (29,4)->(29,13))
             ^ Token(LeftParen, "(", (29,13)->(29,14))
              ^^^ Token(Identifier, "Res", (29,14)->(29,17))
                 ^ Token(Dot, ".", (29,17)->(29,18))
                  ^^^^^ Token(Identifier, "bufnr", (29,18)->(29,23))
                       ^ Token(Comma, ",", (29,23)->(29,24))
                          ^^^^^^^^^ Token(DoubleQuoteString, "&buflisted", (29,26)->(29,35))
                                     ^ Token(Comma, ",", (29,37)->(29,38))
                                       ^ Token(Integer, "0", (29,39)->(29,40))
                                        ^ Token(RightParen, ")", (29,40)->(29,41))
                                          Token(EndOfLine, "\n", (29,41)->(29,41))

 Token(EndOfLine, "\n", (30,0)->(30,0))
    return Res
    ^^^^^^ Token(Identifier, "return", (31,4)->(31,10))
           ^^^ Token(Identifier, "Res", (31,11)->(31,14))
               Token(EndOfLine, "\n", (31,14)->(31,14))
enddef
^^^^^^ Token(Identifier, "enddef", (32,0)->(32,6))
       Token(EndOfLine, "\n", (32,6)->(32,6))

 Token(EndOfLine, "\n", (33,0)->(33,0))
# Terminal manager class
^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Terminal manager class", (34,0)->(34,24))
def TerminalManager(): dict<any>
^^^ Token(Identifier, "def", (35,0)->(35,3))
    ^^^^^^^^^^^^^^^ Token(Identifier, "TerminalManager", (35,4)->(35,19))
                   ^ Token(LeftParen, "(", (35,19)->(35,20))
                    ^ Token(RightParen, ")", (35,20)->(35,21))
                     ^^ Token(SpacedColon, ": ", (35,21)->(35,23))
                       ^^^^ Token(Identifier, "dict", (35,23)->(35,27))
                           ^ Token(AngleLeft, "<", (35,27)->(35,28))
                            ^^^ Token(Identifier, "any", (35,28)->(35,31))
                               ^ Token(GreaterThan, ">", (35,31)->(35,32))
                                 Token(EndOfLine, "\n", (35,32)->(35,32))
    var Res: dict<any> = {
    ^^^ Token(Identifier, "var", (36,4)->(36,7))
        ^^^ Token(Identifier, "Res", (36,8)->(36,11))
           ^^ Token(SpacedColon, ": ", (36,11)->(36,13))
             ^^^^ Token(Identifier, "dict", (36,13)->(36,17))
                 ^ Token(AngleLeft, "<", (36,17)->(36,18))
                  ^^^ Token(Identifier, "any", (36,18)->(36,21))
                     ^ Token(GreaterThan, ">", (36,21)->(36,22))
                       ^ Token(Equal, "=", (36,23)->(36,24))
                         ^ Token(LeftBrace, "{", (36,25)->(36,26))
                           Token(EndOfLine, "\n", (36,26)->(36,26))
        terminals: [],
        ^^^^^^^^^ Token(Identifier, "terminals", (37,8)->(37,17))
                 ^^ Token(SpacedColon, ": ", (37,17)->(37,19))
                   ^ Token(LeftBracket, "[", (37,19)->(37,20))
                    ^ Token(RightBracket, "]", (37,20)->(37,21))
                     ^ Token(Comma, ",", (37,21)->(37,22))
                       Token(EndOfLine, "\n", (37,22)->(37,22))
        current: {}
        ^^^^^^^ Token(Identifier, "current", (38,8)->(38,15))
               ^^ Token(SpacedColon, ": ", (38,15)->(38,17))
                 ^ Token(LeftBrace, "{", (38,17)->(38,18))
                  ^ Token(RightBrace, "}", (38,18)->(38,19))
                    Token(EndOfLine, "\n", (38,19)->(38,19))
    }
    ^ Token(RightBrace, "}", (39,4)->(39,5))
      Token(EndOfLine, "\n", (39,5)->(39,5))

 Token(EndOfLine, "\n", (40,0)->(40,0))
    # Whether or not the manager has a current terminal
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Whether or not the manager has a current terminal", (41,4)->(41,55))
    def HasCurrent(): bool
    ^^^ Token(Identifier, "def", (42,4)->(42,7))
        ^^^^^^^^^^ Token(Identifier, "HasCurrent", (42,8)->(42,18))
                  ^ Token(LeftParen, "(", (42,18)->(42,19))
                   ^ Token(RightParen, ")", (42,19)->(42,20))
                    ^^ Token(SpacedColon, ": ", (42,20)->(42,22))
                      ^^^^ Token(Identifier, "bool", (42,22)->(42,26))
                           Token(EndOfLine, "\n", (42,26)->(42,26))
        return !empty(Res.current)
        ^^^^^^ Token(Identifier, "return", (43,8)->(43,14))
               ^ Token(Bang, "!", (43,15)->(43,16))
                ^^^^^ Token(Identifier, "empty", (43,16)->(43,21))
                     ^ Token(LeftParen, "(", (43,21)->(43,22))
                      ^^^ Token(Identifier, "Res", (43,22)->(43,25))
                         ^ Token(Dot, ".", (43,25)->(43,26))
                          ^^^^^^^ Token(Identifier, "current", (43,26)->(43,33))
                                 ^ Token(RightParen, ")", (43,33)->(43,34))
                                   Token(EndOfLine, "\n", (43,34)->(43,34))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (44,4)->(44,10))
           Token(EndOfLine, "\n", (44,10)->(44,10))
    Res.HasCurrent = HasCurrent
    ^^^ Token(Identifier, "Res", (45,4)->(45,7))
       ^ Token(Dot, ".", (45,7)->(45,8))
        ^^^^^^^^^^ Token(Identifier, "HasCurrent", (45,8)->(45,18))
                   ^ Token(Equal, "=", (45,19)->(45,20))
                     ^^^^^^^^^^ Token(Identifier, "HasCurrent", (45,21)->(45,31))
                                Token(EndOfLine, "\n", (45,31)->(45,31))

 Token(EndOfLine, "\n", (46,0)->(46,0))
    # Open the current terminal
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Open the current terminal", (47,4)->(47,31))
    def OpenCurrent()
    ^^^ Token(Identifier, "def", (48,4)->(48,7))
        ^^^^^^^^^^^ Token(Identifier, "OpenCurrent", (48,8)->(48,19))
                   ^ Token(LeftParen, "(", (48,19)->(48,20))
                    ^ Token(RightParen, ")", (48,20)->(48,21))
                      Token(EndOfLine, "\n", (48,21)->(48,21))
        exec "bot sbuffer " .. Res.current.bufnr
        ^^^^ Token(Identifier, "exec", (49,8)->(49,12))
              ^^^^^^^^^^^ Token(DoubleQuoteString, "bot sbuffer ", (49,14)->(49,25))
                            ^^ Token(StringConcat, "..", (49,28)->(49,30))
                               ^^^ Token(Identifier, "Res", (49,31)->(49,34))
                                  ^ Token(Dot, ".", (49,34)->(49,35))
                                   ^^^^^^^ Token(Identifier, "current", (49,35)->(49,42))
                                          ^ Token(Dot, ".", (49,42)->(49,43))
                                           ^^^^^ Token(Identifier, "bufnr", (49,43)->(49,48))
                                                 Token(EndOfLine, "\n", (49,48)->(49,48))
        exec "resize " .. float2nr(&lines * g:miniterm_proportion)
        ^^^^ Token(Identifier, "exec", (50,8)->(50,12))
              ^^^^^^ Token(DoubleQuoteString, "resize ", (50,14)->(50,20))
                       ^^ Token(StringConcat, "..", (50,23)->(50,25))
                          ^^^^^^^^ Token(Identifier, "float2nr", (50,26)->(50,34))
                                  ^ Token(LeftParen, "(", (50,34)->(50,35))
                                   ^ Token(Ampersand, "&", (50,35)->(50,36))
                                    ^^^^^ Token(Identifier, "lines", (50,36)->(50,41))
                                          ^ Token(Mul, "*", (50,42)->(50,43))
                                            ^ Token(Identifier, "g", (50,44)->(50,45))
                                             ^ Token(Colon, ":", (50,45)->(50,46))
                                              ^^^^^^^^^^^^^^^^^^^ Token(Identifier, "miniterm_proportion", (50,46)->(50,65))
                                                                 ^ Token(RightParen, ")", (50,65)->(50,66))
                                                                   Token(EndOfLine, "\n", (50,66)->(50,66))
        setlocal winfixheight
        ^^^^^^^^ Token(Identifier, "setlocal", (51,8)->(51,16))
                 ^^^^^^^^^^^^ Token(Identifier, "winfixheight", (51,17)->(51,29))
                              Token(EndOfLine, "\n", (51,29)->(51,29))
        setlocal nonumber norelativenumber
        ^^^^^^^^ Token(Identifier, "setlocal", (52,8)->(52,16))
                 ^^^^^^^^ Token(Identifier, "nonumber", (52,17)->(52,25))
                          ^^^^^^^^^^^^^^^^ Token(Identifier, "norelativenumber", (52,26)->(52,42))
                                           Token(EndOfLine, "\n", (52,42)->(52,42))
        setlocal hidden
        ^^^^^^^^ Token(Identifier, "setlocal", (53,8)->(53,16))
                 ^^^^^^ Token(Identifier, "hidden", (53,17)->(53,23))
                        Token(EndOfLine, "\n", (53,23)->(53,23))
        Res.current.winnr = win_getid()
        ^^^ Token(Identifier, "Res", (54,8)->(54,11))
           ^ Token(Dot, ".", (54,11)->(54,12))
            ^^^^^^^ Token(Identifier, "current", (54,12)->(54,19))
                   ^ Token(Dot, ".", (54,19)->(54,20))
                    ^^^^^ Token(Identifier, "winnr", (54,20)->(54,25))
                          ^ Token(Equal, "=", (54,26)->(54,27))
                            ^^^^^^^^^ Token(Identifier, "win_getid", (54,28)->(54,37))
                                     ^ Token(LeftParen, "(", (54,37)->(54,38))
                                      ^ Token(RightParen, ")", (54,38)->(54,39))
                                        Token(EndOfLine, "\n", (54,39)->(54,39))
        Res.current.open = 1
        ^^^ Token(Identifier, "Res", (55,8)->(55,11))
           ^ Token(Dot, ".", (55,11)->(55,12))
            ^^^^^^^ Token(Identifier, "current", (55,12)->(55,19))
                   ^ Token(Dot, ".", (55,19)->(55,20))
                    ^^^^ Token(Identifier, "open", (55,20)->(55,24))
                         ^ Token(Equal, "=", (55,25)->(55,26))
                           ^ Token(Integer, "1", (55,27)->(55,28))
                             Token(EndOfLine, "\n", (55,28)->(55,28))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (56,4)->(56,10))
           Token(EndOfLine, "\n", (56,10)->(56,10))
    Res.OpenCurrent = OpenCurrent
    ^^^ Token(Identifier, "Res", (57,4)->(57,7))
       ^ Token(Dot, ".", (57,7)->(57,8))
        ^^^^^^^^^^^ Token(Identifier, "OpenCurrent", (57,8)->(57,19))
                    ^ Token(Equal, "=", (57,20)->(57,21))
                      ^^^^^^^^^^^ Token(Identifier, "OpenCurrent", (57,22)->(57,33))
                                  Token(EndOfLine, "\n", (57,33)->(57,33))

 Token(EndOfLine, "\n", (58,0)->(58,0))
    # Close the current terminal
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Close the current terminal", (59,4)->(59,32))
    def CloseCurrent()
    ^^^ Token(Identifier, "def", (60,4)->(60,7))
        ^^^^^^^^^^^^ Token(Identifier, "CloseCurrent", (60,8)->(60,20))
                    ^ Token(LeftParen, "(", (60,20)->(60,21))
                     ^ Token(RightParen, ")", (60,21)->(60,22))
                       Token(EndOfLine, "\n", (60,22)->(60,22))
        win_execute(Res.current.winnr, 'close!')
        ^^^^^^^^^^^ Token(Identifier, "win_execute", (61,8)->(61,19))
                   ^ Token(LeftParen, "(", (61,19)->(61,20))
                    ^^^ Token(Identifier, "Res", (61,20)->(61,23))
                       ^ Token(Dot, ".", (61,23)->(61,24))
                        ^^^^^^^ Token(Identifier, "current", (61,24)->(61,31))
                               ^ Token(Dot, ".", (61,31)->(61,32))
                                ^^^^^ Token(Identifier, "winnr", (61,32)->(61,37))
                                     ^ Token(Comma, ",", (61,37)->(61,38))
                                        ^^^^^ Token(SingleQuoteString, "close!", (61,40)->(61,45))
                                               ^ Token(RightParen, ")", (61,47)->(61,48))
                                                 Token(EndOfLine, "\n", (61,48)->(61,48))
        Res.current.open = 0
        ^^^ Token(Identifier, "Res", (62,8)->(62,11))
           ^ Token(Dot, ".", (62,11)->(62,12))
            ^^^^^^^ Token(Identifier, "current", (62,12)->(62,19))
                   ^ Token(Dot, ".", (62,19)->(62,20))
                    ^^^^ Token(Identifier, "open", (62,20)->(62,24))
                         ^ Token(Equal, "=", (62,25)->(62,26))
                           ^ Token(Integer, "0", (62,27)->(62,28))
                             Token(EndOfLine, "\n", (62,28)->(62,28))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (63,4)->(63,10))
           Token(EndOfLine, "\n", (63,10)->(63,10))
    Res.CloseCurrent = CloseCurrent
    ^^^ Token(Identifier, "Res", (64,4)->(64,7))
       ^ Token(Dot, ".", (64,7)->(64,8))
        ^^^^^^^^^^^^ Token(Identifier, "CloseCurrent", (64,8)->(64,20))
                     ^ Token(Equal, "=", (64,21)->(64,22))
                       ^^^^^^^^^^^^ Token(Identifier, "CloseCurrent", (64,23)->(64,35))
                                    Token(EndOfLine, "\n", (64,35)->(64,35))

 Token(EndOfLine, "\n", (65,0)->(65,0))
    # Returns what index the terminal is in the list
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Returns what index the terminal is in the list", (66,4)->(66,52))
    def IndexOfTerm(term: dict<any>): number
    ^^^ Token(Identifier, "def", (67,4)->(67,7))
        ^^^^^^^^^^^ Token(Identifier, "IndexOfTerm", (67,8)->(67,19))
                   ^ Token(LeftParen, "(", (67,19)->(67,20))
                    ^^^^ Token(Identifier, "term", (67,20)->(67,24))
                        ^^ Token(SpacedColon, ": ", (67,24)->(67,26))
                          ^^^^ Token(Identifier, "dict", (67,26)->(67,30))
                              ^ Token(AngleLeft, "<", (67,30)->(67,31))
                               ^^^ Token(Identifier, "any", (67,31)->(67,34))
                                  ^ Token(AngleRight, ">", (67,34)->(67,35))
                                   ^ Token(RightParen, ")", (67,35)->(67,36))
                                    ^^ Token(SpacedColon, ": ", (67,36)->(67,38))
                                      ^^^^^^ Token(Identifier, "number", (67,38)->(67,44))
                                             Token(EndOfLine, "\n", (67,44)->(67,44))
        var index = -1
        ^^^ Token(Identifier, "var", (68,8)->(68,11))
            ^^^^^ Token(Identifier, "index", (68,12)->(68,17))
                  ^ Token(Equal, "=", (68,18)->(68,19))
                    ^ Token(Minus, "-", (68,20)->(68,21))
                     ^ Token(Integer, "1", (68,21)->(68,22))
                       Token(EndOfLine, "\n", (68,22)->(68,22))
        for i in range(len(Res.terminals))
        ^^^ Token(Identifier, "for", (69,8)->(69,11))
            ^ Token(Identifier, "i", (69,12)->(69,13))
              ^^ Token(Identifier, "in", (69,14)->(69,16))
                 ^^^^^ Token(Identifier, "range", (69,17)->(69,22))
                      ^ Token(LeftParen, "(", (69,22)->(69,23))
                       ^^^ Token(Identifier, "len", (69,23)->(69,26))
                          ^ Token(LeftParen, "(", (69,26)->(69,27))
                           ^^^ Token(Identifier, "Res", (69,27)->(69,30))
                              ^ Token(Dot, ".", (69,30)->(69,31))
                               ^^^^^^^^^ Token(Identifier, "terminals", (69,31)->(69,40))
                                        ^ Token(RightParen, ")", (69,40)->(69,41))
                                         ^ Token(RightParen, ")", (69,41)->(69,42))
                                           Token(EndOfLine, "\n", (69,42)->(69,42))
            var t = Res.terminals[i]
            ^^^ Token(Identifier, "var", (70,12)->(70,15))
                ^ Token(Identifier, "t", (70,16)->(70,17))
                  ^ Token(Equal, "=", (70,18)->(70,19))
                    ^^^ Token(Identifier, "Res", (70,20)->(70,23))
                       ^ Token(Dot, ".", (70,23)->(70,24))
                        ^^^^^^^^^ Token(Identifier, "terminals", (70,24)->(70,33))
                                 ^ Token(LeftBracket, "[", (70,33)->(70,34))
                                  ^ Token(Identifier, "i", (70,34)->(70,35))
                                   ^ Token(RightBracket, "]", (70,35)->(70,36))
                                     Token(EndOfLine, "\n", (70,36)->(70,36))
            if t.bufnr == term.bufnr
            ^^ Token(Identifier, "if", (71,12)->(71,14))
               ^ Token(Identifier, "t", (71,15)->(71,16))
                ^ Token(Dot, ".", (71,16)->(71,17))
                 ^^^^^ Token(Identifier, "bufnr", (71,17)->(71,22))
                       ^^ Token(EqualTo, "==", (71,23)->(71,25))
                          ^^^^ Token(Identifier, "term", (71,26)->(71,30))
                              ^ Token(Dot, ".", (71,30)->(71,31))
                               ^^^^^ Token(Identifier, "bufnr", (71,31)->(71,36))
                                     Token(EndOfLine, "\n", (71,36)->(71,36))
                index = i
                ^^^^^ Token(Identifier, "index", (72,16)->(72,21))
                      ^ Token(Equal, "=", (72,22)->(72,23))
                        ^ Token(Identifier, "i", (72,24)->(72,25))
                          Token(EndOfLine, "\n", (72,25)->(72,25))
                break
                ^^^^^ Token(Identifier, "break", (73,16)->(73,21))
                      Token(EndOfLine, "\n", (73,21)->(73,21))
            endif
            ^^^^^ Token(Identifier, "endif", (74,12)->(74,17))
                  Token(EndOfLine, "\n", (74,17)->(74,17))
        endfor
        ^^^^^^ Token(Identifier, "endfor", (75,8)->(75,14))
               Token(EndOfLine, "\n", (75,14)->(75,14))
        return index
        ^^^^^^ Token(Identifier, "return", (76,8)->(76,14))
               ^^^^^ Token(Identifier, "index", (76,15)->(76,20))
                     Token(EndOfLine, "\n", (76,20)->(76,20))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (77,4)->(77,10))
           Token(EndOfLine, "\n", (77,10)->(77,10))
    Res.IndexOfTerm = IndexOfTerm
    ^^^ Token(Identifier, "Res", (78,4)->(78,7))
       ^ Token(Dot, ".", (78,7)->(78,8))
        ^^^^^^^^^^^ Token(Identifier, "IndexOfTerm", (78,8)->(78,19))
                    ^ Token(Equal, "=", (78,20)->(78,21))
                      ^^^^^^^^^^^ Token(Identifier, "IndexOfTerm", (78,22)->(78,33))
                                  Token(EndOfLine, "\n", (78,33)->(78,33))

 Token(EndOfLine, "\n", (79,0)->(79,0))
    # Removes a terminal with bufnr from list if it exists
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Removes a terminal with bufnr from list if it exists", (80,4)->(80,58))
    def RemoveBufnr(bufnr: number)
    ^^^ Token(Identifier, "def", (81,4)->(81,7))
        ^^^^^^^^^^^ Token(Identifier, "RemoveBufnr", (81,8)->(81,19))
                   ^ Token(LeftParen, "(", (81,19)->(81,20))
                    ^^^^^ Token(Identifier, "bufnr", (81,20)->(81,25))
                         ^^ Token(SpacedColon, ": ", (81,25)->(81,27))
                           ^^^^^^ Token(Identifier, "number", (81,27)->(81,33))
                                 ^ Token(RightParen, ")", (81,33)->(81,34))
                                   Token(EndOfLine, "\n", (81,34)->(81,34))
        for i in range(len(Res.terminals))
        ^^^ Token(Identifier, "for", (82,8)->(82,11))
            ^ Token(Identifier, "i", (82,12)->(82,13))
              ^^ Token(Identifier, "in", (82,14)->(82,16))
                 ^^^^^ Token(Identifier, "range", (82,17)->(82,22))
                      ^ Token(LeftParen, "(", (82,22)->(82,23))
                       ^^^ Token(Identifier, "len", (82,23)->(82,26))
                          ^ Token(LeftParen, "(", (82,26)->(82,27))
                           ^^^ Token(Identifier, "Res", (82,27)->(82,30))
                              ^ Token(Dot, ".", (82,30)->(82,31))
                               ^^^^^^^^^ Token(Identifier, "terminals", (82,31)->(82,40))
                                        ^ Token(RightParen, ")", (82,40)->(82,41))
                                         ^ Token(RightParen, ")", (82,41)->(82,42))
                                           Token(EndOfLine, "\n", (82,42)->(82,42))
            var t = Res.terminals[i]
            ^^^ Token(Identifier, "var", (83,12)->(83,15))
                ^ Token(Identifier, "t", (83,16)->(83,17))
                  ^ Token(Equal, "=", (83,18)->(83,19))
                    ^^^ Token(Identifier, "Res", (83,20)->(83,23))
                       ^ Token(Dot, ".", (83,23)->(83,24))
                        ^^^^^^^^^ Token(Identifier, "terminals", (83,24)->(83,33))
                                 ^ Token(LeftBracket, "[", (83,33)->(83,34))
                                  ^ Token(Identifier, "i", (83,34)->(83,35))
                                   ^ Token(RightBracket, "]", (83,35)->(83,36))
                                     Token(EndOfLine, "\n", (83,36)->(83,36))
            if t.bufnr == bufnr
            ^^ Token(Identifier, "if", (84,12)->(84,14))
               ^ Token(Identifier, "t", (84,15)->(84,16))
                ^ Token(Dot, ".", (84,16)->(84,17))
                 ^^^^^ Token(Identifier, "bufnr", (84,17)->(84,22))
                       ^^ Token(EqualTo, "==", (84,23)->(84,25))
                          ^^^^^ Token(Identifier, "bufnr", (84,26)->(84,31))
                                Token(EndOfLine, "\n", (84,31)->(84,31))
                Res.terminals->remove(i)
                ^^^ Token(Identifier, "Res", (85,16)->(85,19))
                   ^ Token(Dot, ".", (85,19)->(85,20))
                    ^^^^^^^^^ Token(Identifier, "terminals", (85,20)->(85,29))
                             ^^ Token(MethodArrow, "->", (85,29)->(85,31))
                               ^^^^^^ Token(Identifier, "remove", (85,31)->(85,37))
                                     ^ Token(LeftParen, "(", (85,37)->(85,38))
                                      ^ Token(Identifier, "i", (85,38)->(85,39))
                                       ^ Token(RightParen, ")", (85,39)->(85,40))
                                         Token(EndOfLine, "\n", (85,40)->(85,40))
                break
                ^^^^^ Token(Identifier, "break", (86,16)->(86,21))
                      Token(EndOfLine, "\n", (86,21)->(86,21))
            endif
            ^^^^^ Token(Identifier, "endif", (87,12)->(87,17))
                  Token(EndOfLine, "\n", (87,17)->(87,17))
        endfor
        ^^^^^^ Token(Identifier, "endfor", (88,8)->(88,14))
               Token(EndOfLine, "\n", (88,14)->(88,14))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (89,4)->(89,10))
           Token(EndOfLine, "\n", (89,10)->(89,10))
    Res.RemoveBufnr = RemoveBufnr
    ^^^ Token(Identifier, "Res", (90,4)->(90,7))
       ^ Token(Dot, ".", (90,7)->(90,8))
        ^^^^^^^^^^^ Token(Identifier, "RemoveBufnr", (90,8)->(90,19))
                    ^ Token(Equal, "=", (90,20)->(90,21))
                      ^^^^^^^^^^^ Token(Identifier, "RemoveBufnr", (90,22)->(90,33))
                                  Token(EndOfLine, "\n", (90,33)->(90,33))

 Token(EndOfLine, "\n", (91,0)->(91,0))
    # Create a new terminal and set it as the current
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Create a new terminal and set it as the current", (92,4)->(92,53))
    def CreateNewCurrent()
    ^^^ Token(Identifier, "def", (93,4)->(93,7))
        ^^^^^^^^^^^^^^^^ Token(Identifier, "CreateNewCurrent", (93,8)->(93,24))
                        ^ Token(LeftParen, "(", (93,24)->(93,25))
                         ^ Token(RightParen, ")", (93,25)->(93,26))
                           Token(EndOfLine, "\n", (93,26)->(93,26))
        var term = Terminal()
        ^^^ Token(Identifier, "var", (94,8)->(94,11))
            ^^^^ Token(Identifier, "term", (94,12)->(94,16))
                 ^ Token(Equal, "=", (94,17)->(94,18))
                   ^^^^^^^^ Token(Identifier, "Terminal", (94,19)->(94,27))
                           ^ Token(LeftParen, "(", (94,27)->(94,28))
                            ^ Token(RightParen, ")", (94,28)->(94,29))
                              Token(EndOfLine, "\n", (94,29)->(94,29))
        #term.SetName("MT" .. Res.terminals->len())
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#term.SetName(\"MT\" .. Res.terminals->len())", (95,8)->(95,51))
        Res.terminals->add(term)
        ^^^ Token(Identifier, "Res", (96,8)->(96,11))
           ^ Token(Dot, ".", (96,11)->(96,12))
            ^^^^^^^^^ Token(Identifier, "terminals", (96,12)->(96,21))
                     ^^ Token(MethodArrow, "->", (96,21)->(96,23))
                       ^^^ Token(Identifier, "add", (96,23)->(96,26))
                          ^ Token(LeftParen, "(", (96,26)->(96,27))
                           ^^^^ Token(Identifier, "term", (96,27)->(96,31))
                               ^ Token(RightParen, ")", (96,31)->(96,32))
                                 Token(EndOfLine, "\n", (96,32)->(96,32))
        Res.current = term
        ^^^ Token(Identifier, "Res", (97,8)->(97,11))
           ^ Token(Dot, ".", (97,11)->(97,12))
            ^^^^^^^ Token(Identifier, "current", (97,12)->(97,19))
                    ^ Token(Equal, "=", (97,20)->(97,21))
                      ^^^^ Token(Identifier, "term", (97,22)->(97,26))
                           Token(EndOfLine, "\n", (97,26)->(97,26))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (98,4)->(98,10))
           Token(EndOfLine, "\n", (98,10)->(98,10))
    Res.CreateNewCurrent = CreateNewCurrent
    ^^^ Token(Identifier, "Res", (99,4)->(99,7))
       ^ Token(Dot, ".", (99,7)->(99,8))
        ^^^^^^^^^^^^^^^^ Token(Identifier, "CreateNewCurrent", (99,8)->(99,24))
                         ^ Token(Equal, "=", (99,25)->(99,26))
                           ^^^^^^^^^^^^^^^^ Token(Identifier, "CreateNewCurrent", (99,27)->(99,43))
                                            Token(EndOfLine, "\n", (99,43)->(99,43))

 Token(EndOfLine, "\n", (100,0)->(100,0))
#   - if first time (no current terminal buffer):
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#   - if first time (no current terminal buffer):", (101,0)->(101,49))
#       - run "Toggle" logic
^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#       - run \"Toggle\" logic", (102,0)->(102,28))
#   - else
^^^^^^^^^^ Token(Comment, "#   - else", (103,0)->(103,10))
#       - if terminal window is open
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#       - if terminal window is open", (104,0)->(104,36))
#           - close that terminal window
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#           - close that terminal window", (105,0)->(105,40))
#       - create new terminal buffer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#       - create new terminal buffer", (106,0)->(106,36))
#       - open new terminal window
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#       - open new terminal window", (107,0)->(107,34))
    def NewTerminal()
    ^^^ Token(Identifier, "def", (108,4)->(108,7))
        ^^^^^^^^^^^ Token(Identifier, "NewTerminal", (108,8)->(108,19))
                   ^ Token(LeftParen, "(", (108,19)->(108,20))
                    ^ Token(RightParen, ")", (108,20)->(108,21))
                      Token(EndOfLine, "\n", (108,21)->(108,21))
        if !Res.HasCurrent()
        ^^ Token(Identifier, "if", (109,8)->(109,10))
           ^ Token(Bang, "!", (109,11)->(109,12))
            ^^^ Token(Identifier, "Res", (109,12)->(109,15))
               ^ Token(Dot, ".", (109,15)->(109,16))
                ^^^^^^^^^^ Token(Identifier, "HasCurrent", (109,16)->(109,26))
                          ^ Token(LeftParen, "(", (109,26)->(109,27))
                           ^ Token(RightParen, ")", (109,27)->(109,28))
                             Token(EndOfLine, "\n", (109,28)->(109,28))
            Res.ToggleTerminal()
            ^^^ Token(Identifier, "Res", (110,12)->(110,15))
               ^ Token(Dot, ".", (110,15)->(110,16))
                ^^^^^^^^^^^^^^ Token(Identifier, "ToggleTerminal", (110,16)->(110,30))
                              ^ Token(LeftParen, "(", (110,30)->(110,31))
                               ^ Token(RightParen, ")", (110,31)->(110,32))
                                 Token(EndOfLine, "\n", (110,32)->(110,32))
        else
        ^^^^ Token(Identifier, "else", (111,8)->(111,12))
             Token(EndOfLine, "\n", (111,12)->(111,12))
            if Res.current.open
            ^^ Token(Identifier, "if", (112,12)->(112,14))
               ^^^ Token(Identifier, "Res", (112,15)->(112,18))
                  ^ Token(Dot, ".", (112,18)->(112,19))
                   ^^^^^^^ Token(Identifier, "current", (112,19)->(112,26))
                          ^ Token(Dot, ".", (112,26)->(112,27))
                           ^^^^ Token(Identifier, "open", (112,27)->(112,31))
                                Token(EndOfLine, "\n", (112,31)->(112,31))
                Res.CloseCurrent()
                ^^^ Token(Identifier, "Res", (113,16)->(113,19))
                   ^ Token(Dot, ".", (113,19)->(113,20))
                    ^^^^^^^^^^^^ Token(Identifier, "CloseCurrent", (113,20)->(113,32))
                                ^ Token(LeftParen, "(", (113,32)->(113,33))
                                 ^ Token(RightParen, ")", (113,33)->(113,34))
                                   Token(EndOfLine, "\n", (113,34)->(113,34))
            endif
            ^^^^^ Token(Identifier, "endif", (114,12)->(114,17))
                  Token(EndOfLine, "\n", (114,17)->(114,17))
            Res.CreateNewCurrent()
            ^^^ Token(Identifier, "Res", (115,12)->(115,15))
               ^ Token(Dot, ".", (115,15)->(115,16))
                ^^^^^^^^^^^^^^^^ Token(Identifier, "CreateNewCurrent", (115,16)->(115,32))
                                ^ Token(LeftParen, "(", (115,32)->(115,33))
                                 ^ Token(RightParen, ")", (115,33)->(115,34))
                                   Token(EndOfLine, "\n", (115,34)->(115,34))

 Token(EndOfLine, "\n", (116,0)->(116,0))
            Res.OpenCurrent()
            ^^^ Token(Identifier, "Res", (117,12)->(117,15))
               ^ Token(Dot, ".", (117,15)->(117,16))
                ^^^^^^^^^^^ Token(Identifier, "OpenCurrent", (117,16)->(117,27))
                           ^ Token(LeftParen, "(", (117,27)->(117,28))
                            ^ Token(RightParen, ")", (117,28)->(117,29))
                              Token(EndOfLine, "\n", (117,29)->(117,29))
        endif
        ^^^^^ Token(Identifier, "endif", (118,8)->(118,13))
              Token(EndOfLine, "\n", (118,13)->(118,13))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (119,4)->(119,10))
           Token(EndOfLine, "\n", (119,10)->(119,10))
    Res.NewTerminal = NewTerminal
    ^^^ Token(Identifier, "Res", (120,4)->(120,7))
       ^ Token(Dot, ".", (120,7)->(120,8))
        ^^^^^^^^^^^ Token(Identifier, "NewTerminal", (120,8)->(120,19))
                    ^ Token(Equal, "=", (120,20)->(120,21))
                      ^^^^^^^^^^^ Token(Identifier, "NewTerminal", (120,22)->(120,33))
                                  Token(EndOfLine, "\n", (120,33)->(120,33))

 Token(EndOfLine, "\n", (121,0)->(121,0))
#   - if first time (no current terminal buffer):
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#   - if first time (no current terminal buffer):", (122,0)->(122,49))
#       - create a new terminal buffer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#       - create a new terminal buffer", (123,0)->(123,38))
#       - set new buffer as current
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#       - set new buffer as current", (124,0)->(124,35))
#   - if terminal window is open:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#   - if terminal window is open:", (125,0)->(125,33))
#       - close terminal window
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#       - close terminal window", (126,0)->(126,31))
#   - else if terminal window isnt open:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#   - else if terminal window isnt open:", (127,0)->(127,40))
#       - open terminal window
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "#       - open terminal window", (128,0)->(128,30))
    def ToggleTerminal()
    ^^^ Token(Identifier, "def", (129,4)->(129,7))
        ^^^^^^^^^^^^^^ Token(Identifier, "ToggleTerminal", (129,8)->(129,22))
                      ^ Token(LeftParen, "(", (129,22)->(129,23))
                       ^ Token(RightParen, ")", (129,23)->(129,24))
                         Token(EndOfLine, "\n", (129,24)->(129,24))
        if !Res.HasCurrent()
        ^^ Token(Identifier, "if", (130,8)->(130,10))
           ^ Token(Bang, "!", (130,11)->(130,12))
            ^^^ Token(Identifier, "Res", (130,12)->(130,15))
               ^ Token(Dot, ".", (130,15)->(130,16))
                ^^^^^^^^^^ Token(Identifier, "HasCurrent", (130,16)->(130,26))
                          ^ Token(LeftParen, "(", (130,26)->(130,27))
                           ^ Token(RightParen, ")", (130,27)->(130,28))
                             Token(EndOfLine, "\n", (130,28)->(130,28))
            Res.CreateNewCurrent()
            ^^^ Token(Identifier, "Res", (131,12)->(131,15))
               ^ Token(Dot, ".", (131,15)->(131,16))
                ^^^^^^^^^^^^^^^^ Token(Identifier, "CreateNewCurrent", (131,16)->(131,32))
                                ^ Token(LeftParen, "(", (131,32)->(131,33))
                                 ^ Token(RightParen, ")", (131,33)->(131,34))
                                   Token(EndOfLine, "\n", (131,34)->(131,34))
        endif
        ^^^^^ Token(Identifier, "endif", (132,8)->(132,13))
              Token(EndOfLine, "\n", (132,13)->(132,13))
        if Res.current.open
        ^^ Token(Identifier, "if", (133,8)->(133,10))
           ^^^ Token(Identifier, "Res", (133,11)->(133,14))
              ^ Token(Dot, ".", (133,14)->(133,15))
               ^^^^^^^ Token(Identifier, "current", (133,15)->(133,22))
                      ^ Token(Dot, ".", (133,22)->(133,23))
                       ^^^^ Token(Identifier, "open", (133,23)->(133,27))
                            Token(EndOfLine, "\n", (133,27)->(133,27))
            Res.CloseCurrent()
            ^^^ Token(Identifier, "Res", (134,12)->(134,15))
               ^ Token(Dot, ".", (134,15)->(134,16))
                ^^^^^^^^^^^^ Token(Identifier, "CloseCurrent", (134,16)->(134,28))
                            ^ Token(LeftParen, "(", (134,28)->(134,29))
                             ^ Token(RightParen, ")", (134,29)->(134,30))
                               Token(EndOfLine, "\n", (134,30)->(134,30))
        else
        ^^^^ Token(Identifier, "else", (135,8)->(135,12))
             Token(EndOfLine, "\n", (135,12)->(135,12))
            Res.OpenCurrent()
            ^^^ Token(Identifier, "Res", (136,12)->(136,15))
               ^ Token(Dot, ".", (136,15)->(136,16))
                ^^^^^^^^^^^ Token(Identifier, "OpenCurrent", (136,16)->(136,27))
                           ^ Token(LeftParen, "(", (136,27)->(136,28))
                            ^ Token(RightParen, ")", (136,28)->(136,29))
                              Token(EndOfLine, "\n", (136,29)->(136,29))
        endif
        ^^^^^ Token(Identifier, "endif", (137,8)->(137,13))
              Token(EndOfLine, "\n", (137,13)->(137,13))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (138,4)->(138,10))
           Token(EndOfLine, "\n", (138,10)->(138,10))
    Res.ToggleTerminal = ToggleTerminal
    ^^^ Token(Identifier, "Res", (139,4)->(139,7))
       ^ Token(Dot, ".", (139,7)->(139,8))
        ^^^^^^^^^^^^^^ Token(Identifier, "ToggleTerminal", (139,8)->(139,22))
                       ^ Token(Equal, "=", (139,23)->(139,24))
                         ^^^^^^^^^^^^^^ Token(Identifier, "ToggleTerminal", (139,25)->(139,39))
                                        Token(EndOfLine, "\n", (139,39)->(139,39))

 Token(EndOfLine, "\n", (140,0)->(140,0))
    # Get index of current terminal in terminal list
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Get index of current terminal in terminal list", (141,4)->(141,52))
    def CurrentIndex(): number
    ^^^ Token(Identifier, "def", (142,4)->(142,7))
        ^^^^^^^^^^^^ Token(Identifier, "CurrentIndex", (142,8)->(142,20))
                    ^ Token(LeftParen, "(", (142,20)->(142,21))
                     ^ Token(RightParen, ")", (142,21)->(142,22))
                      ^^ Token(SpacedColon, ": ", (142,22)->(142,24))
                        ^^^^^^ Token(Identifier, "number", (142,24)->(142,30))
                               Token(EndOfLine, "\n", (142,30)->(142,30))
        return Res.IndexOfTerm(Res.current)
        ^^^^^^ Token(Identifier, "return", (143,8)->(143,14))
               ^^^ Token(Identifier, "Res", (143,15)->(143,18))
                  ^ Token(Dot, ".", (143,18)->(143,19))
                   ^^^^^^^^^^^ Token(Identifier, "IndexOfTerm", (143,19)->(143,30))
                              ^ Token(LeftParen, "(", (143,30)->(143,31))
                               ^^^ Token(Identifier, "Res", (143,31)->(143,34))
                                  ^ Token(Dot, ".", (143,34)->(143,35))
                                   ^^^^^^^ Token(Identifier, "current", (143,35)->(143,42))
                                          ^ Token(RightParen, ")", (143,42)->(143,43))
                                            Token(EndOfLine, "\n", (143,43)->(143,43))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (144,4)->(144,10))
           Token(EndOfLine, "\n", (144,10)->(144,10))
    Res.CurrentIndex = CurrentIndex
    ^^^ Token(Identifier, "Res", (145,4)->(145,7))
       ^ Token(Dot, ".", (145,7)->(145,8))
        ^^^^^^^^^^^^ Token(Identifier, "CurrentIndex", (145,8)->(145,20))
                     ^ Token(Equal, "=", (145,21)->(145,22))
                       ^^^^^^^^^^^^ Token(Identifier, "CurrentIndex", (145,23)->(145,35))
                                    Token(EndOfLine, "\n", (145,35)->(145,35))

 Token(EndOfLine, "\n", (146,0)->(146,0))
    # Swap current terminal to another based on an index offset
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Swap current terminal to another based on an index offset", (147,4)->(147,63))
    def OffsetTerminal(offset: number)
    ^^^ Token(Identifier, "def", (148,4)->(148,7))
        ^^^^^^^^^^^^^^ Token(Identifier, "OffsetTerminal", (148,8)->(148,22))
                      ^ Token(LeftParen, "(", (148,22)->(148,23))
                       ^^^^^^ Token(Identifier, "offset", (148,23)->(148,29))
                             ^^ Token(SpacedColon, ": ", (148,29)->(148,31))
                               ^^^^^^ Token(Identifier, "number", (148,31)->(148,37))
                                     ^ Token(RightParen, ")", (148,37)->(148,38))
                                       Token(EndOfLine, "\n", (148,38)->(148,38))
        if len(Res.terminals) > 0
        ^^ Token(Identifier, "if", (149,8)->(149,10))
           ^^^ Token(Identifier, "len", (149,11)->(149,14))
              ^ Token(LeftParen, "(", (149,14)->(149,15))
               ^^^ Token(Identifier, "Res", (149,15)->(149,18))
                  ^ Token(Dot, ".", (149,18)->(149,19))
                   ^^^^^^^^^ Token(Identifier, "terminals", (149,19)->(149,28))
                            ^ Token(RightParen, ")", (149,28)->(149,29))
                              ^ Token(GreaterThan, ">", (149,30)->(149,31))
                                ^ Token(Integer, "0", (149,32)->(149,33))
                                  Token(EndOfLine, "\n", (149,33)->(149,33))
            var next_index = (Res.CurrentIndex() + offset) % len(Res.terminals)
            ^^^ Token(Identifier, "var", (150,12)->(150,15))
                ^^^^^^^^^^ Token(Identifier, "next_index", (150,16)->(150,26))
                           ^ Token(Equal, "=", (150,27)->(150,28))
                             ^ Token(LeftParen, "(", (150,29)->(150,30))
                              ^^^ Token(Identifier, "Res", (150,30)->(150,33))
                                 ^ Token(Dot, ".", (150,33)->(150,34))
                                  ^^^^^^^^^^^^ Token(Identifier, "CurrentIndex", (150,34)->(150,46))
                                              ^ Token(LeftParen, "(", (150,46)->(150,47))
                                               ^ Token(RightParen, ")", (150,47)->(150,48))
                                                 ^ Token(Plus, "+", (150,49)->(150,50))
                                                   ^^^^^^ Token(Identifier, "offset", (150,51)->(150,57))
                                                         ^ Token(RightParen, ")", (150,57)->(150,58))
                                                           ^ Token(Percent, "%", (150,59)->(150,60))
                                                             ^^^ Token(Identifier, "len", (150,61)->(150,64))
                                                                ^ Token(LeftParen, "(", (150,64)->(150,65))
                                                                 ^^^ Token(Identifier, "Res", (150,65)->(150,68))
                                                                    ^ Token(Dot, ".", (150,68)->(150,69))
                                                                     ^^^^^^^^^ Token(Identifier, "terminals", (150,69)->(150,78))
                                                                              ^ Token(RightParen, ")", (150,78)->(150,79))
                                                                                Token(EndOfLine, "\n", (150,79)->(150,79))
            while next_index < 0
            ^^^^^ Token(Identifier, "while", (151,12)->(151,17))
                  ^^^^^^^^^^ Token(Identifier, "next_index", (151,18)->(151,28))
                             ^ Token(LessThan, "<", (151,29)->(151,30))
                               ^ Token(Integer, "0", (151,31)->(151,32))
                                 Token(EndOfLine, "\n", (151,32)->(151,32))
                next_index += len(Res.terminals)
                ^^^^^^^^^^ Token(Identifier, "next_index", (152,16)->(152,26))
                           ^^ Token(PlusEquals, "+=", (152,27)->(152,29))
                              ^^^ Token(Identifier, "len", (152,30)->(152,33))
                                 ^ Token(LeftParen, "(", (152,33)->(152,34))
                                  ^^^ Token(Identifier, "Res", (152,34)->(152,37))
                                     ^ Token(Dot, ".", (152,37)->(152,38))
                                      ^^^^^^^^^ Token(Identifier, "terminals", (152,38)->(152,47))
                                               ^ Token(RightParen, ")", (152,47)->(152,48))
                                                 Token(EndOfLine, "\n", (152,48)->(152,48))
            endwhile
            ^^^^^^^^ Token(Identifier, "endwhile", (153,12)->(153,20))
                     Token(EndOfLine, "\n", (153,20)->(153,20))
            Res.CloseCurrent()
            ^^^ Token(Identifier, "Res", (154,12)->(154,15))
               ^ Token(Dot, ".", (154,15)->(154,16))
                ^^^^^^^^^^^^ Token(Identifier, "CloseCurrent", (154,16)->(154,28))
                            ^ Token(LeftParen, "(", (154,28)->(154,29))
                             ^ Token(RightParen, ")", (154,29)->(154,30))
                               Token(EndOfLine, "\n", (154,30)->(154,30))
            Res.current = Res.terminals[next_index]
            ^^^ Token(Identifier, "Res", (155,12)->(155,15))
               ^ Token(Dot, ".", (155,15)->(155,16))
                ^^^^^^^ Token(Identifier, "current", (155,16)->(155,23))
                        ^ Token(Equal, "=", (155,24)->(155,25))
                          ^^^ Token(Identifier, "Res", (155,26)->(155,29))
                             ^ Token(Dot, ".", (155,29)->(155,30))
                              ^^^^^^^^^ Token(Identifier, "terminals", (155,30)->(155,39))
                                       ^ Token(LeftBracket, "[", (155,39)->(155,40))
                                        ^^^^^^^^^^ Token(Identifier, "next_index", (155,40)->(155,50))
                                                  ^ Token(RightBracket, "]", (155,50)->(155,51))
                                                    Token(EndOfLine, "\n", (155,51)->(155,51))
            Res.OpenCurrent()
            ^^^ Token(Identifier, "Res", (156,12)->(156,15))
               ^ Token(Dot, ".", (156,15)->(156,16))
                ^^^^^^^^^^^ Token(Identifier, "OpenCurrent", (156,16)->(156,27))
                           ^ Token(LeftParen, "(", (156,27)->(156,28))
                            ^ Token(RightParen, ")", (156,28)->(156,29))
                              Token(EndOfLine, "\n", (156,29)->(156,29))
        endif
        ^^^^^ Token(Identifier, "endif", (157,8)->(157,13))
              Token(EndOfLine, "\n", (157,13)->(157,13))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (158,4)->(158,10))
           Token(EndOfLine, "\n", (158,10)->(158,10))
    Res.OffsetTerminal = OffsetTerminal
    ^^^ Token(Identifier, "Res", (159,4)->(159,7))
       ^ Token(Dot, ".", (159,7)->(159,8))
        ^^^^^^^^^^^^^^ Token(Identifier, "OffsetTerminal", (159,8)->(159,22))
                       ^ Token(Equal, "=", (159,23)->(159,24))
                         ^^^^^^^^^^^^^^ Token(Identifier, "OffsetTerminal", (159,25)->(159,39))
                                        Token(EndOfLine, "\n", (159,39)->(159,39))

 Token(EndOfLine, "\n", (160,0)->(160,0))
    # Delete the current terminal window and do NOT reopen
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Delete the current terminal window and do NOT reopen", (161,4)->(161,58))
    def DeleteCurrent()
    ^^^ Token(Identifier, "def", (162,4)->(162,7))
        ^^^^^^^^^^^^^ Token(Identifier, "DeleteCurrent", (162,8)->(162,21))
                     ^ Token(LeftParen, "(", (162,21)->(162,22))
                      ^ Token(RightParen, ")", (162,22)->(162,23))
                        Token(EndOfLine, "\n", (162,23)->(162,23))
        if Res.HasCurrent()
        ^^ Token(Identifier, "if", (163,8)->(163,10))
           ^^^ Token(Identifier, "Res", (163,11)->(163,14))
              ^ Token(Dot, ".", (163,14)->(163,15))
               ^^^^^^^^^^ Token(Identifier, "HasCurrent", (163,15)->(163,25))
                         ^ Token(LeftParen, "(", (163,25)->(163,26))
                          ^ Token(RightParen, ")", (163,26)->(163,27))
                            Token(EndOfLine, "\n", (163,27)->(163,27))
            # Wipe current's buffer
            ^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Wipe current's buffer", (164,12)->(164,35))
            execute "bwipeout! " .. Res.current.bufnr
            ^^^^^^^ Token(Identifier, "execute", (165,12)->(165,19))
                     ^^^^^^^^^ Token(DoubleQuoteString, "bwipeout! ", (165,21)->(165,30))
                                 ^^ Token(StringConcat, "..", (165,33)->(165,35))
                                    ^^^ Token(Identifier, "Res", (165,36)->(165,39))
                                       ^ Token(Dot, ".", (165,39)->(165,40))
                                        ^^^^^^^ Token(Identifier, "current", (165,40)->(165,47))
                                               ^ Token(Dot, ".", (165,47)->(165,48))
                                                ^^^^^ Token(Identifier, "bufnr", (165,48)->(165,53))
                                                      Token(EndOfLine, "\n", (165,53)->(165,53))
        endif
        ^^^^^ Token(Identifier, "endif", (166,8)->(166,13))
              Token(EndOfLine, "\n", (166,13)->(166,13))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (167,4)->(167,10))
           Token(EndOfLine, "\n", (167,10)->(167,10))
    Res.DeleteCurrent = DeleteCurrent
    ^^^ Token(Identifier, "Res", (168,4)->(168,7))
       ^ Token(Dot, ".", (168,7)->(168,8))
        ^^^^^^^^^^^^^ Token(Identifier, "DeleteCurrent", (168,8)->(168,21))
                      ^ Token(Equal, "=", (168,22)->(168,23))
                        ^^^^^^^^^^^^^ Token(Identifier, "DeleteCurrent", (168,24)->(168,37))
                                      Token(EndOfLine, "\n", (168,37)->(168,37))

 Token(EndOfLine, "\n", (169,0)->(169,0))
    # Wipe all buffers managed by this
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Wipe all buffers managed by this", (170,4)->(170,38))
    def DeleteAll()
    ^^^ Token(Identifier, "def", (171,4)->(171,7))
        ^^^^^^^^^ Token(Identifier, "DeleteAll", (171,8)->(171,17))
                 ^ Token(LeftParen, "(", (171,17)->(171,18))
                  ^ Token(RightParen, ")", (171,18)->(171,19))
                    Token(EndOfLine, "\n", (171,19)->(171,19))
        var buf_nums = mapnew(Res.terminals, (_, v) => v.bufnr)
        ^^^ Token(Identifier, "var", (172,8)->(172,11))
            ^^^^^^^^ Token(Identifier, "buf_nums", (172,12)->(172,20))
                     ^ Token(Equal, "=", (172,21)->(172,22))
                       ^^^^^^ Token(Identifier, "mapnew", (172,23)->(172,29))
                             ^ Token(LeftParen, "(", (172,29)->(172,30))
                              ^^^ Token(Identifier, "Res", (172,30)->(172,33))
                                 ^ Token(Dot, ".", (172,33)->(172,34))
                                  ^^^^^^^^^ Token(Identifier, "terminals", (172,34)->(172,43))
                                           ^ Token(Comma, ",", (172,43)->(172,44))
                                             ^ Token(LeftParen, "(", (172,45)->(172,46))
                                              ^ Token(Identifier, "_", (172,46)->(172,47))
                                               ^ Token(Comma, ",", (172,47)->(172,48))
                                                 ^ Token(Identifier, "v", (172,49)->(172,50))
                                                  ^ Token(RightParen, ")", (172,50)->(172,51))
                                                    ^^ Token(Arrow, "=>", (172,52)->(172,54))
                                                       ^ Token(Identifier, "v", (172,55)->(172,56))
                                                        ^ Token(Dot, ".", (172,56)->(172,57))
                                                         ^^^^^ Token(Identifier, "bufnr", (172,57)->(172,62))
                                                              ^ Token(RightParen, ")", (172,62)->(172,63))
                                                                Token(EndOfLine, "\n", (172,63)->(172,63))
        for buf_num in buf_nums
        ^^^ Token(Identifier, "for", (173,8)->(173,11))
            ^^^^^^^ Token(Identifier, "buf_num", (173,12)->(173,19))
                    ^^ Token(Identifier, "in", (173,20)->(173,22))
                       ^^^^^^^^ Token(Identifier, "buf_nums", (173,23)->(173,31))
                                Token(EndOfLine, "\n", (173,31)->(173,31))
            execute "bwipeout! " .. buf_num
            ^^^^^^^ Token(Identifier, "execute", (174,12)->(174,19))
                     ^^^^^^^^^ Token(DoubleQuoteString, "bwipeout! ", (174,21)->(174,30))
                                 ^^ Token(StringConcat, "..", (174,33)->(174,35))
                                    ^^^^^^^ Token(Identifier, "buf_num", (174,36)->(174,43))
                                            Token(EndOfLine, "\n", (174,43)->(174,43))
        endfor
        ^^^^^^ Token(Identifier, "endfor", (175,8)->(175,14))
               Token(EndOfLine, "\n", (175,14)->(175,14))
        Res.current = {}
        ^^^ Token(Identifier, "Res", (176,8)->(176,11))
           ^ Token(Dot, ".", (176,11)->(176,12))
            ^^^^^^^ Token(Identifier, "current", (176,12)->(176,19))
                    ^ Token(Equal, "=", (176,20)->(176,21))
                      ^ Token(LeftBrace, "{", (176,22)->(176,23))
                       ^ Token(RightBrace, "}", (176,23)->(176,24))
                         Token(EndOfLine, "\n", (176,24)->(176,24))

 Token(EndOfLine, "\n", (177,0)->(177,0))
        Assert(len(Res.terminals) == 0, "DeleteAll did not clear manager's terminals list")
        ^^^^^^ Token(Identifier, "Assert", (178,8)->(178,14))
              ^ Token(LeftParen, "(", (178,14)->(178,15))
               ^^^ Token(Identifier, "len", (178,15)->(178,18))
                  ^ Token(LeftParen, "(", (178,18)->(178,19))
                   ^^^ Token(Identifier, "Res", (178,19)->(178,22))
                      ^ Token(Dot, ".", (178,22)->(178,23))
                       ^^^^^^^^^ Token(Identifier, "terminals", (178,23)->(178,32))
                                ^ Token(RightParen, ")", (178,32)->(178,33))
                                  ^^ Token(EqualTo, "==", (178,34)->(178,36))
                                     ^ Token(Integer, "0", (178,37)->(178,38))
                                      ^ Token(Comma, ",", (178,38)->(178,39))
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(DoubleQuoteString, "DeleteAll did not clear manager's terminals list", (178,41)->(178,88))
                                                                                          ^ Token(RightParen, ")", (178,90)->(178,91))
                                                                                            Token(EndOfLine, "\n", (178,91)->(178,91))
        Res.terminals = [] # FIXME: Redundant, handled by delete handler
        ^^^ Token(Identifier, "Res", (179,8)->(179,11))
           ^ Token(Dot, ".", (179,11)->(179,12))
            ^^^^^^^^^ Token(Identifier, "terminals", (179,12)->(179,21))
                      ^ Token(Equal, "=", (179,22)->(179,23))
                        ^ Token(LeftBracket, "[", (179,24)->(179,25))
                         ^ Token(RightBracket, "]", (179,25)->(179,26))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# FIXME: Redundant, handled by delete handler", (179,27)->(179,72))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (180,4)->(180,10))
           Token(EndOfLine, "\n", (180,10)->(180,10))
    Res.DeleteAll = DeleteAll
    ^^^ Token(Identifier, "Res", (181,4)->(181,7))
       ^ Token(Dot, ".", (181,7)->(181,8))
        ^^^^^^^^^ Token(Identifier, "DeleteAll", (181,8)->(181,17))
                  ^ Token(Equal, "=", (181,18)->(181,19))
                    ^^^^^^^^^ Token(Identifier, "DeleteAll", (181,20)->(181,29))
                              Token(EndOfLine, "\n", (181,29)->(181,29))

 Token(EndOfLine, "\n", (182,0)->(182,0))
    # Prints out all active terminals
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# Prints out all active terminals", (183,4)->(183,37))
    # i.e. 0 1 [2] 3
    ^^^^^^^^^^^^^^^^ Token(Comment, "# i.e. 0 1 [2] 3", (184,4)->(184,20))
    # if terminal at index 2 is the current
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "# if terminal at index 2 is the current", (185,4)->(185,43))
    def ListTerminals()
    ^^^ Token(Identifier, "def", (186,4)->(186,7))
        ^^^^^^^^^^^^^ Token(Identifier, "ListTerminals", (186,8)->(186,21))
                     ^ Token(LeftParen, "(", (186,21)->(186,22))
                      ^ Token(RightParen, ")", (186,22)->(186,23))
                        Token(EndOfLine, "\n", (186,23)->(186,23))
        if len(Res.terminals) == 0
        ^^ Token(Identifier, "if", (187,8)->(187,10))
           ^^^ Token(Identifier, "len", (187,11)->(187,14))
              ^ Token(LeftParen, "(", (187,14)->(187,15))
               ^^^ Token(Identifier, "Res", (187,15)->(187,18))
                  ^ Token(Dot, ".", (187,18)->(187,19))
                   ^^^^^^^^^ Token(Identifier, "terminals", (187,19)->(187,28))
                            ^ Token(RightParen, ")", (187,28)->(187,29))
                              ^^ Token(EqualTo, "==", (187,30)->(187,32))
                                 ^ Token(Integer, "0", (187,33)->(187,34))
                                   Token(EndOfLine, "\n", (187,34)->(187,34))
            echo "No terminals active"
            ^^^^ Token(Identifier, "echo", (188,12)->(188,16))
                  ^^^^^^^^^^^^^^^^^^ Token(DoubleQuoteString, "No terminals active", (188,18)->(188,36))
                                       Token(EndOfLine, "\n", (188,38)->(188,38))
            return
            ^^^^^^ Token(Identifier, "return", (189,12)->(189,18))
                   Token(EndOfLine, "\n", (189,18)->(189,18))
        endif
        ^^^^^ Token(Identifier, "endif", (190,8)->(190,13))
              Token(EndOfLine, "\n", (190,13)->(190,13))
        final indices = []
        ^^^^^ Token(Identifier, "final", (191,8)->(191,13))
              ^^^^^^^ Token(Identifier, "indices", (191,14)->(191,21))
                      ^ Token(Equal, "=", (191,22)->(191,23))
                        ^ Token(LeftBracket, "[", (191,24)->(191,25))
                         ^ Token(RightBracket, "]", (191,25)->(191,26))
                           Token(EndOfLine, "\n", (191,26)->(191,26))
        for i in range(len(Res.terminals))
        ^^^ Token(Identifier, "for", (192,8)->(192,11))
            ^ Token(Identifier, "i", (192,12)->(192,13))
              ^^ Token(Identifier, "in", (192,14)->(192,16))
                 ^^^^^ Token(Identifier, "range", (192,17)->(192,22))
                      ^ Token(LeftParen, "(", (192,22)->(192,23))
                       ^^^ Token(Identifier, "len", (192,23)->(192,26))
                          ^ Token(LeftParen, "(", (192,26)->(192,27))
                           ^^^ Token(Identifier, "Res", (192,27)->(192,30))
                              ^ Token(Dot, ".", (192,30)->(192,31))
                               ^^^^^^^^^ Token(Identifier, "terminals", (192,31)->(192,40))
                                        ^ Token(RightParen, ")", (192,40)->(192,41))
                                         ^ Token(RightParen, ")", (192,41)->(192,42))
                                           Token(EndOfLine, "\n", (192,42)->(192,42))
            const term = Res.terminals[i]
            ^^^^^ Token(Identifier, "const", (193,12)->(193,17))
                  ^^^^ Token(Identifier, "term", (193,18)->(193,22))
                       ^ Token(Equal, "=", (193,23)->(193,24))
                         ^^^ Token(Identifier, "Res", (193,25)->(193,28))
                            ^ Token(Dot, ".", (193,28)->(193,29))
                             ^^^^^^^^^ Token(Identifier, "terminals", (193,29)->(193,38))
                                      ^ Token(LeftBracket, "[", (193,38)->(193,39))
                                       ^ Token(Identifier, "i", (193,39)->(193,40))
                                        ^ Token(RightBracket, "]", (193,40)->(193,41))
                                          Token(EndOfLine, "\n", (193,41)->(193,41))
            if term.bufnr == Res.current.bufnr
            ^^ Token(Identifier, "if", (194,12)->(194,14))
               ^^^^ Token(Identifier, "term", (194,15)->(194,19))
                   ^ Token(Dot, ".", (194,19)->(194,20))
                    ^^^^^ Token(Identifier, "bufnr", (194,20)->(194,25))
                          ^^ Token(EqualTo, "==", (194,26)->(194,28))
                             ^^^ Token(Identifier, "Res", (194,29)->(194,32))
                                ^ Token(Dot, ".", (194,32)->(194,33))
                                 ^^^^^^^ Token(Identifier, "current", (194,33)->(194,40))
                                        ^ Token(Dot, ".", (194,40)->(194,41))
                                         ^^^^^ Token(Identifier, "bufnr", (194,41)->(194,46))
                                               Token(EndOfLine, "\n", (194,46)->(194,46))
                indices->add('[' .. i .. ']')
                ^^^^^^^ Token(Identifier, "indices", (195,16)->(195,23))
                       ^^ Token(MethodArrow, "->", (195,23)->(195,25))
                         ^^^ Token(Identifier, "add", (195,25)->(195,28))
                            ^ Token(LeftParen, "(", (195,28)->(195,29))
                               Token(SingleQuoteString, "[", (195,30)->(195,30))
                                 ^^ Token(StringConcat, "..", (195,33)->(195,35))
                                    ^ Token(Identifier, "i", (195,36)->(195,37))
                                      ^^ Token(StringConcat, "..", (195,38)->(195,40))
                                           Token(SingleQuoteString, "]", (195,42)->(195,42))
                                            ^ Token(RightParen, ")", (195,44)->(195,45))
                                              Token(EndOfLine, "\n", (195,45)->(195,45))
            else
            ^^^^ Token(Identifier, "else", (196,12)->(196,16))
                 Token(EndOfLine, "\n", (196,16)->(196,16))
                indices->add(i)
                ^^^^^^^ Token(Identifier, "indices", (197,16)->(197,23))
                       ^^ Token(MethodArrow, "->", (197,23)->(197,25))
                         ^^^ Token(Identifier, "add", (197,25)->(197,28))
                            ^ Token(LeftParen, "(", (197,28)->(197,29))
                             ^ Token(Identifier, "i", (197,29)->(197,30))
                              ^ Token(RightParen, ")", (197,30)->(197,31))
                                Token(EndOfLine, "\n", (197,31)->(197,31))
            endif
            ^^^^^ Token(Identifier, "endif", (198,12)->(198,17))
                  Token(EndOfLine, "\n", (198,17)->(198,17))
        endfor
        ^^^^^^ Token(Identifier, "endfor", (199,8)->(199,14))
               Token(EndOfLine, "\n", (199,14)->(199,14))
        echo join(indices, ' ')
        ^^^^ Token(Identifier, "echo", (200,8)->(200,12))
             ^^^^ Token(Identifier, "join", (200,13)->(200,17))
                 ^ Token(LeftParen, "(", (200,17)->(200,18))
                  ^^^^^^^ Token(Identifier, "indices", (200,18)->(200,25))
                         ^ Token(Comma, ",", (200,25)->(200,26))
                             Token(SingleQuoteString, " ", (200,28)->(200,28))
                              ^ Token(RightParen, ")", (200,30)->(200,31))
                                Token(EndOfLine, "\n", (200,31)->(200,31))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (201,4)->(201,10))
           Token(EndOfLine, "\n", (201,10)->(201,10))
    Res.ListTerminals = ListTerminals
    ^^^ Token(Identifier, "Res", (202,4)->(202,7))
       ^ Token(Dot, ".", (202,7)->(202,8))
        ^^^^^^^^^^^^^ Token(Identifier, "ListTerminals", (202,8)->(202,21))
                      ^ Token(Equal, "=", (202,22)->(202,23))
                        ^^^^^^^^^^^^^ Token(Identifier, "ListTerminals", (202,24)->(202,37))
                                      Token(EndOfLine, "\n", (202,37)->(202,37))

 Token(EndOfLine, "\n", (203,0)->(203,0))
    def UpdateState()
    ^^^ Token(Identifier, "def", (204,4)->(204,7))
        ^^^^^^^^^^^ Token(Identifier, "UpdateState", (204,8)->(204,19))
                   ^ Token(LeftParen, "(", (204,19)->(204,20))
                    ^ Token(RightParen, ")", (204,20)->(204,21))
                      Token(EndOfLine, "\n", (204,21)->(204,21))
        if empty(Res.terminals)
        ^^ Token(Identifier, "if", (205,8)->(205,10))
           ^^^^^ Token(Identifier, "empty", (205,11)->(205,16))
                ^ Token(LeftParen, "(", (205,16)->(205,17))
                 ^^^ Token(Identifier, "Res", (205,17)->(205,20))
                    ^ Token(Dot, ".", (205,20)->(205,21))
                     ^^^^^^^^^ Token(Identifier, "terminals", (205,21)->(205,30))
                              ^ Token(RightParen, ")", (205,30)->(205,31))
                                Token(EndOfLine, "\n", (205,31)->(205,31))
            Res.current = {}
            ^^^ Token(Identifier, "Res", (206,12)->(206,15))
               ^ Token(Dot, ".", (206,15)->(206,16))
                ^^^^^^^ Token(Identifier, "current", (206,16)->(206,23))
                        ^ Token(Equal, "=", (206,24)->(206,25))
                          ^ Token(LeftBrace, "{", (206,26)->(206,27))
                           ^ Token(RightBrace, "}", (206,27)->(206,28))
                             Token(EndOfLine, "\n", (206,28)->(206,28))
        else
        ^^^^ Token(Identifier, "else", (207,8)->(207,12))
             Token(EndOfLine, "\n", (207,12)->(207,12))
            Res.current = Res.terminals[0]
            ^^^ Token(Identifier, "Res", (208,12)->(208,15))
               ^ Token(Dot, ".", (208,15)->(208,16))
                ^^^^^^^ Token(Identifier, "current", (208,16)->(208,23))
                        ^ Token(Equal, "=", (208,24)->(208,25))
                          ^^^ Token(Identifier, "Res", (208,26)->(208,29))
                             ^ Token(Dot, ".", (208,29)->(208,30))
                              ^^^^^^^^^ Token(Identifier, "terminals", (208,30)->(208,39))
                                       ^ Token(LeftBracket, "[", (208,39)->(208,40))
                                        ^ Token(Integer, "0", (208,40)->(208,41))
                                         ^ Token(RightBracket, "]", (208,41)->(208,42))
                                           Token(EndOfLine, "\n", (208,42)->(208,42))
            Res.OpenCurrent()
            ^^^ Token(Identifier, "Res", (209,12)->(209,15))
               ^ Token(Dot, ".", (209,15)->(209,16))
                ^^^^^^^^^^^ Token(Identifier, "OpenCurrent", (209,16)->(209,27))
                           ^ Token(LeftParen, "(", (209,27)->(209,28))
                            ^ Token(RightParen, ")", (209,28)->(209,29))
                              Token(EndOfLine, "\n", (209,29)->(209,29))
        endif
        ^^^^^ Token(Identifier, "endif", (210,8)->(210,13))
              Token(EndOfLine, "\n", (210,13)->(210,13))
    enddef
    ^^^^^^ Token(Identifier, "enddef", (211,4)->(211,10))
           Token(EndOfLine, "\n", (211,10)->(211,10))
    Res.UpdateState = UpdateState
    ^^^ Token(Identifier, "Res", (212,4)->(212,7))
       ^ Token(Dot, ".", (212,7)->(212,8))
        ^^^^^^^^^^^ Token(Identifier, "UpdateState", (212,8)->(212,19))
                    ^ Token(Equal, "=", (212,20)->(212,21))
                      ^^^^^^^^^^^ Token(Identifier, "UpdateState", (212,22)->(212,33))
                                  Token(EndOfLine, "\n", (212,33)->(212,33))

 Token(EndOfLine, "\n", (213,0)->(213,0))
    return Res
    ^^^^^^ Token(Identifier, "return", (214,4)->(214,10))
           ^^^ Token(Identifier, "Res", (214,11)->(214,14))
               Token(EndOfLine, "\n", (214,14)->(214,14))
enddef
^^^^^^ Token(Identifier, "enddef", (215,0)->(215,6))
       Token(EndOfLine, "\n", (215,6)->(215,6))

 Token(EndOfLine, "\n", (216,0)->(216,0))
####################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Token(Comment, "####################################", (217,0)->(217,36))
# Helpers
^^^^^^^^^ Token(Comment, "# Helpers", (218,0)->(218,9))
def Assert(cond: bool, msg: string)
^^^ Token(Identifier, "def", (219,0)->(219,3))
    ^^^^^^ Token(Identifier, "Assert", (219,4)->(219,10))
          ^ Token(LeftParen, "(", (219,10)->(219,11))
           ^^^^ Token(Identifier, "cond", (219,11)->(219,15))
               ^^ Token(SpacedColon, ": ", (219,15)->(219,17))
                 ^^^^ Token(Identifier, "bool", (219,17)->(219,21))
                     ^ Token(Comma, ",", (219,21)->(219,22))
                       ^^^ Token(Identifier, "msg", (219,23)->(219,26))
                          ^^ Token(SpacedColon, ": ", (219,26)->(219,28))
                            ^^^^^^ Token(Identifier, "string", (219,28)->(219,34))
                                  ^ Token(RightParen, ")", (219,34)->(219,35))
                                    Token(EndOfLine, "\n", (219,35)->(219,35))
    if !cond
    ^^ Token(Identifier, "if", (220,4)->(220,6))
       ^ Token(Bang, "!", (220,7)->(220,8))
        ^^^^ Token(Identifier, "cond", (220,8)->(220,12))
             Token(EndOfLine, "\n", (220,12)->(220,12))
        throw msg
        ^^^^^ Token(Identifier, "throw", (221,8)->(221,13))
              ^^^ Token(Identifier, "msg", (221,14)->(221,17))
                  Token(EndOfLine, "\n", (221,17)->(221,17))
    endif
    ^^^^^ Token(Identifier, "endif", (222,4)->(222,9))
          Token(EndOfLine, "\n", (222,9)->(222,9))
enddef
^^^^^^ Token(Identifier, "enddef", (223,0)->(223,6))
       Token(EndOfLine, "\n", (223,6)->(223,6))

 Token(EndOfLine, "\n", (224,0)->(224,0))
final manager = TerminalManager()
^^^^^ Token(Identifier, "final", (225,0)->(225,5))
      ^^^^^^^ Token(Identifier, "manager", (225,6)->(225,13))
              ^ Token(Equal, "=", (225,14)->(225,15))
                ^^^^^^^^^^^^^^^ Token(Identifier, "TerminalManager", (225,16)->(225,31))
                               ^ Token(LeftParen, "(", (225,31)->(225,32))
                                ^ Token(RightParen, ")", (225,32)->(225,33))
                                  Token(EndOfLine, "\n", (225,33)->(225,33))
export def g:GetManager(): dict<any>
^^^^^^ Token(Identifier, "export", (226,0)->(226,6))
       ^^^ Token(Identifier, "def", (226,7)->(226,10))
           ^ Token(Identifier, "g", (226,11)->(226,12))
            ^ Token(Colon, ":", (226,12)->(226,13))
             ^^^^^^^^^^ Token(Identifier, "GetManager", (226,13)->(226,23))
                       ^ Token(LeftParen, "(", (226,23)->(226,24))
                        ^ Token(RightParen, ")", (226,24)->(226,25))
                         ^^ Token(SpacedColon, ": ", (226,25)->(226,27))
                           ^^^^ Token(Identifier, "dict", (226,27)->(226,31))
                               ^ Token(AngleLeft, "<", (226,31)->(226,32))
                                ^^^ Token(Identifier, "any", (226,32)->(226,35))
                                   ^ Token(GreaterThan, ">", (226,35)->(226,36))
                                     Token(EndOfLine, "\n", (226,36)->(226,36))
    return manager
    ^^^^^^ Token(Identifier, "return", (227,4)->(227,10))
           ^^^^^^^ Token(Identifier, "manager", (227,11)->(227,18))
                   Token(EndOfLine, "\n", (227,18)->(227,18))
enddef
^^^^^^ Token(Identifier, "enddef", (228,0)->(228,6))
       Token(EndOfLine, "\n", (228,6)->(228,6))

